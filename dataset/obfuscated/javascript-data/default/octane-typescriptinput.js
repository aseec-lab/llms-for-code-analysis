function a0_0x3eb8(_0x5acdd4,_0x55d6b6){var _0x1bc637=a0_0x1bc6();return a0_0x3eb8=function(_0x3eb8cf,_0x385e22){_0x3eb8cf=_0x3eb8cf-0x17c;var _0x3e0ff6=_0x1bc637[_0x3eb8cf];return _0x3e0ff6;},a0_0x3eb8(_0x5acdd4,_0x55d6b6);}(function(_0x4087e8,_0x20bfde){var _0xb47c85=a0_0x3eb8,_0x32cb16=_0x4087e8();while(!![]){try{var _0x1dac3f=-parseInt(_0xb47c85(0x182))/0x1+-parseInt(_0xb47c85(0x17d))/0x2+parseInt(_0xb47c85(0x17e))/0x3+-parseInt(_0xb47c85(0x184))/0x4*(parseInt(_0xb47c85(0x180))/0x5)+parseInt(_0xb47c85(0x185))/0x6*(parseInt(_0xb47c85(0x183))/0x7)+-parseInt(_0xb47c85(0x17c))/0x8+parseInt(_0xb47c85(0x181))/0x9*(parseInt(_0xb47c85(0x17f))/0xa);if(_0x1dac3f===_0x20bfde)break;else _0x32cb16['push'](_0x32cb16['shift']());}catch(_0x5001a0){_0x32cb16['push'](_0x32cb16['shift']());}}}(a0_0x1bc6,0x53e7d));var compiler_input='//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20AstLogger\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20logger:\x20ILogger)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20logScript(script:\x20TypeScript.Script):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logLinemap(script.locationInfo.lineMap);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stack:\x20AST[]=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stack.push(cur);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20indent\x20=\x20(stack.length\x20-\x201)\x20*\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logComments(script,\x20cur.preComments,\x20indent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logNode(script,\x20cur,\x20indent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logComments(script,\x20cur.postComments,\x20indent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20post\x20=\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stack.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(script,\x20pre,\x20post);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20logNode(script:\x20TypeScript.Script,\x20cur:\x20TypeScript.AST,\x20indent:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20msg\x20=\x20this.addPadding(\x22\x22,\x20indent,\x20\x22|\x20\x22,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg.concat(\x22+\x20\x22\x20+\x20cur.treeViewLabel());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20this.addPadding(msg,\x2070,\x20\x22\x20\x22,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg\x20+\x20this.addLineColumn(script,\x20cur.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20this.addPadding(msg,\x2080,\x20\x22\x20\x22,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg\x20+\x20\x22=>\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg\x20+\x20this.addLineColumn(script,\x20cur.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20this.addPadding(msg,\x20102,\x20\x22\x20\x22,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg.concat(\x22[\x22\x20+\x20this.addPadding(cur.minChar.toString(),\x201,\x20\x22\x20\x22,\x20true)\x20+\x20\x22,\x20\x22\x20+\x20this.addPadding(cur.limChar.toString(),\x201,\x20\x22\x20\x22,\x20true)\x20+\x20\x22]\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20this.addPadding(msg,\x20115,\x20\x22\x20\x22,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg.concat(\x22sym=\x22\x20+\x20(<any>cur).sym);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20this.addPadding(msg,\x20135,\x20\x22\x20\x22,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20msg\x20=\x20msg.concat(\x22type=\x22\x20+\x20(cur.type\x20===\x20null\x20?\x20\x22null\x22\x20:\x20cur.type.getTypeName()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20logComments(script:\x20TypeScript.Script,\x20comments:\x20TypeScript.AST[],\x20indent:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments\x20==\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20comments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logNode(script,\x20comments[i],\x20indent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20logLinemap(linemap:\x20number[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20\x22[\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20linemap.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20>\x200)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22,\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20linemap[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22]\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22linemap:\x20\x22\x20+\x20result);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20addPadding(s:\x20string,\x20targetLength:\x20number,\x20paddingString:\x20string,\x20leftPadding:\x20bool):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20(leftPadding\x20?\x20\x22\x22\x20:\x20s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20s.length;\x20i\x20<\x20targetLength;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result\x20+\x20paddingString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result\x20+\x20(leftPadding\x20?\x20s\x20:\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20addLineColumn(script:\x20TypeScript.Script,\x20position:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20just\x20for\x20calling\x20getSourceLineColFromMap\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineInfo\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20line:\x20-1,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20col:\x20-1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getSourceLineColFromMap(lineInfo,\x20position,\x20script.locationInfo.lineMap);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lineInfo.col\x20!==\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineInfo.col++;\x20//TODO:\x20function\x20above\x20seems\x20to\x20consider\x20line\x20as\x201-based,\x20and\x20column\x20as\x200-based\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22(\x22\x20+\x20lineInfo.line\x20+\x20\x22,\x20\x22\x20+\x20lineInfo.col\x20+\x20\x22)\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20function\x20lastOf(items:\x20any[]):\x20any\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20(items\x20===\x20null\x20||\x20items.length\x20===\x200)\x20?\x20null\x20:\x20items[items.length\x20-\x201];\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20max(a:\x20number,\x20b:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20a\x20>=\x20b\x20?\x20a\x20:\x20b;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20min(a:\x20number,\x20b:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20a\x20<=\x20b\x20?\x20a\x20:\x20b;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20//\x20Helper\x20class\x20representing\x20a\x20path\x20from\x20a\x20root\x20ast\x20node\x20to\x20a\x20(grand)child\x20ast\x20node.\x0a\x20\x20\x20\x20//\x20This\x20is\x20helpful\x20as\x20our\x20tree\x20don\x27t\x20have\x20parents.\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20export\x20class\x20AstPath\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20asts:\x20TypeScript.AST[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20top:\x20number\x20=\x20-1;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20reverseIndexOf(items:\x20any[],\x20index:\x20number):\x20any\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(items\x20===\x20null\x20||\x20items.length\x20<=\x20index)\x20?\x20null\x20:\x20items[items.length\x20-\x20index\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20clone():\x20AstPath\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20clone\x20=\x20new\x20AstPath();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20clone.asts\x20=\x20this.asts.map((value)\x20=>\x20{\x20return\x20value;\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20clone.top\x20=\x20this.top;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20clone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pop():\x20TypeScript.AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20head\x20=\x20this.ast();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.up();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(this.asts.length\x20>\x20this.count())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20head;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20push(ast:\x20TypeScript.AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(this.asts.length\x20>\x20this.count())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.top\x20=\x20this.asts.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts.push(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20up()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.top\x20<=\x20-1)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Invalid\x20call\x20to\x20\x27up\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.top--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20down()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.top\x20==\x20this.ast.length\x20-\x201)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Invalid\x20call\x20to\x20\x27down\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.top++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nodeType():\x20TypeScript.NodeType\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20==\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeScript.NodeType.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.ast().nodeType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ast()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<TypeScript.AST>AstPath.reverseIndexOf(this.asts,\x20this.asts.length\x20-\x20(this.top\x20+\x201));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<TypeScript.AST>AstPath.reverseIndexOf(this.asts,\x20this.asts.length\x20-\x20this.top);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20count()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.top\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20get(index:\x20number):\x20TypeScript.AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.asts[index];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfClass():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.ClassDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.InterfaceDeclaration>this.parent()).name\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfInterface():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.InterfaceDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.InterfaceDeclaration>this.parent()).name\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfArgument():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.ArgDecl)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.ArgDecl>this.parent()).id\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfVariable():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.VarDecl)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.VarDecl>this.parent()).id\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfModule():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.ModuleDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.ModuleDeclaration>this.parent()).name\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfFunction():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ast()\x20===\x20null\x20||\x20this.parent()\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.ast().nodeType\x20===\x20TypeScript.NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.parent().nodeType\x20===\x20TypeScript.NodeType.FuncDecl)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.FuncDecl>this.parent()).name\x20===\x20this.ast());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isChildOfScript():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20lastOf(this.asts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top]\x20===\x20ast\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.Script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isChildOfModule():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20lastOf(this.asts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top]\x20===\x20ast\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.ModuleDeclaration;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isChildOfClass():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20lastOf(this.asts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top]\x20===\x20ast\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.ClassDeclaration;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArgumentOfClassConstructor():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20lastOf(this.asts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x205\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top]\x20===\x20ast\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x203].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x204].nodeType\x20===\x20TypeScript.NodeType.ClassDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.FuncDecl>this.asts[this.top\x20-\x202]).isConstructor)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.FuncDecl>this.asts[this.top\x20-\x202]).arguments\x20===\x20this.asts[this.top\x20-\x201])\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<TypeScript.ClassDeclaration>this.asts[this.top\x20-\x204]).constructorDecl\x20===\x20this.asts[this.top\x20-\x202]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isChildOfInterface():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20lastOf(this.asts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top]\x20===\x20ast\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.InterfaceDeclaration;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isTopLevelImplicitModule()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top].nodeType\x20===\x20TypeScript.NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags,\x20TypeScript.ModuleFlags.IsWholeFile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfTopLevelImplicitModule()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ModuleDeclaration>this.asts[this.top\x20-\x201]).members\x20==\x20this.asts[this.top\x20-\x200]\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top\x20-\x201]).modFlags,\x20TypeScript.ModuleFlags.IsWholeFile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfScript():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Script\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Script>this.asts[this.top\x20-\x201]).bod\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfSwitch():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Switch\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.SwitchStatement>this.asts[this.top\x20-\x201]).caseList\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfModule():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ModuleDeclaration>this.asts[this.top\x20-\x201]).members\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfClass():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ClassDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ClassDeclaration>this.asts[this.top\x20-\x201]).members\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfFunction():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.FuncDecl>this.asts[this.top\x20-\x201]).bod\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfInterface():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.InterfaceDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.InterfaceDeclaration>this.asts[this.top\x20-\x201]).members\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfBlock():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Block\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Block>this.asts[this.top\x20-\x201]).statements\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfFor():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.For\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ForStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfCase():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Case\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.CaseStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfTry():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Try\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Try>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfCatch():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Catch\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Catch>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfDoWhile():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.DoWhile\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.DoWhileStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfWhile():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.While\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.WhileStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfForIn():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ForIn\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ForInStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfWith():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.With\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.WithStatement>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfFinally():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Finally\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Finally>this.asts[this.top\x20-\x201]).body\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCaseOfSwitch():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.Switch\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.SwitchStatement>this.asts[this.top\x20-\x202]).caseList\x20==\x20this.asts[this.top\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDefaultCaseOfSwitch():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.Switch\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.SwitchStatement>this.asts[this.top\x20-\x202]).caseList\x20==\x20this.asts[this.top\x20-\x201]\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.SwitchStatement>this.asts[this.top\x20-\x202]).defaultCase\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isListOfObjectLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ObjectLit\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.UnaryExpression>this.asts[this.top\x20-\x201]).operand\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfObjectLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.isListOfObjectLit();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isEmptyListOfObjectLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ObjectLit\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.UnaryExpression>this.asts[this.top\x20-\x201]).operand\x20==\x20this.asts[this.top\x20-\x200]\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ASTList>this.asts[this.top\x20-\x200]).members.length\x20==\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMemberOfObjectLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.ObjectLit\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.Member\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.UnaryExpression>this.asts[this.top\x20-\x202]).operand\x20==\x20this.asts[this.top\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNameOfMemberOfObjectLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x204\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x203].nodeType\x20===\x20TypeScript.NodeType.ObjectLit\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Member\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.Name\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.UnaryExpression>this.asts[this.top\x20-\x203]).operand\x20==\x20this.asts[this.top\x20-\x202];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isListOfArrayLit():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.ArrayLit\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.UnaryExpression>this.asts[this.top\x20-\x201]).operand\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isTargetOfMember():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Member\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.BinaryExpression>this.asts[this.top\x20-\x201]).operand1\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMemberOfMember():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Member\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.BinaryExpression>this.asts[this.top\x20-\x201]).operand2\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isItemOfList():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//(<Tools.ASTList>this.asts[this.top\x20-\x201]).operand2\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isThenOfIf():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.If\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.IfStatement>this.asts[this.top\x20-\x201]).thenBod\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isElseOfIf():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.If\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.IfStatement>this.asts[this.top\x20-\x201]).elseBod\x20==\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBodyOfDefaultCase():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.isBodyOfCase();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isSingleStatementList():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.ASTList>this.asts[this.top]).members.length\x20===\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArgumentListOfFunction():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.FuncDecl>this.asts[this.top\x20-\x201]).arguments\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArgumentOfFunction():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x203\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x202].nodeType\x20===\x20TypeScript.NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.FuncDecl>this.asts[this.top\x20-\x202]).arguments\x20===\x20this.asts[this.top\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArgumentListOfCall():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.Call\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.CallExpression>this.asts[this.top\x20-\x201]).arguments\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArgumentListOfNew():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x202\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.List\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x201].nodeType\x20===\x20TypeScript.NodeType.New\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.CallExpression>this.asts[this.top\x20-\x201]).arguments\x20===\x20this.asts[this.top\x20-\x200];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isSynthesizedBlock():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.count()\x20>=\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.asts[this.top\x20-\x200].nodeType\x20===\x20TypeScript.NodeType.Block\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeScript.Block>this.asts[this.top\x20-\x200]).isStatementBlock\x20===\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isValidAstNode(ast:\x20TypeScript.ASTSpan):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.minChar\x20===\x20-1\x20||\x20ast.limChar\x20===\x20-1)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20AstPathContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20path\x20=\x20new\x20TypeScript.AstPath();\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20GetAstPathOptions\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Default\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EdgeInclusive\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20//We\x20need\x20this\x20options\x20dealing\x20with\x20an\x20AST\x20coming\x20from\x20an\x20incomplete\x20AST.\x20For\x20example:\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20class\x20foo\x20{\x20//\x20r\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x20ask\x20for\x20the\x20AST\x20at\x20the\x20position\x20after\x20the\x20\x22r\x22\x20character,\x20we\x20won\x27t\x20see\x20we\x20are\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20inside\x20a\x20comment,\x20because\x20the\x20\x22class\x22\x20AST\x20node\x20has\x20a\x20limChar\x20corresponding\x20to\x20the\x20position\x20of\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20\x22{\x22\x20character,\x20meaning\x20we\x20don\x27t\x20traverse\x20the\x20tree\x20down\x20to\x20the\x20stmt\x20list\x20of\x20the\x20class,\x20meaning\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20we\x20don\x27t\x20find\x20the\x20\x22precomment\x22\x20attached\x20to\x20the\x20errorneous\x20empty\x20stmt.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20It\x20would\x20be\x20nice\x20to\x20be\x20able\x20to\x20get\x20rid\x20of\x20this.\x0a\x20\x20\x20\x20\x20\x20\x20\x20DontPruneSearchBasedOnPosition\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20///\x20Return\x20the\x20stack\x20of\x20AST\x20nodes\x20containing\x20\x22position\x22\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20export\x20function\x20getAstPathToPosition(script:\x20TypeScript.AST,\x20pos:\x20number,\x20options\x20=\x20GetAstPathOptions.Default):\x20TypeScript.AstPath\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20lookInComments\x20=\x20(comments:\x20TypeScript.Comment[])\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments\x20&&\x20comments.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20comments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20comments[i].minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20comments[i].limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!comments[i].isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar++;\x20//\x20For\x20single\x20line\x20comments,\x20include\x201\x20more\x20character\x20(for\x20the\x20newline)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pos\x20>=\x20minChar\x20&&\x20pos\x20<\x20limChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ctx.path.push(comments[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20function\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isValidAstNode(cur))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20\x22cur\x22\x20to\x20the\x20stack\x20if\x20it\x20contains\x20our\x20position\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20For\x20\x22identifier\x22\x20nodes,\x20we\x20need\x20a\x20special\x20case:\x20A\x20position\x20equal\x20to\x20\x22limChar\x22\x20is\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20valid,\x20since\x20the\x20position\x20corresponds\x20to\x20a\x20caret\x20position\x20(in\x20between\x20characters)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20For\x20example:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20bar\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x200123\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20\x22position\x20==\x203\x22,\x20the\x20caret\x20is\x20at\x20the\x20\x22right\x22\x20of\x20the\x20\x22r\x22\x20character,\x20which\x20should\x20be\x20considered\x20valid\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inclusive\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(options,\x20GetAstPathOptions.EdgeInclusive)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cur.nodeType\x20===\x20TypeScript.NodeType.Name\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pos\x20===\x20script.limChar;\x20//\x20Special\x20\x22EOF\x22\x20case\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20cur.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20cur.limChar\x20+\x20(inclusive\x20?\x201\x20:\x200)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pos\x20>=\x20minChar\x20&&\x20pos\x20<\x20limChar)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20Since\x20AST\x20is\x20sometimes\x20not\x20correct\x20wrt\x20to\x20position,\x20only\x20add\x20\x22cur\x22\x20if\x20it\x27s\x20better\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20than\x20top\x20of\x20the\x20stack.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20previous\x20=\x20ctx.path.ast();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(previous\x20==\x20null\x20||\x20(cur.minChar\x20>=\x20previous.minChar\x20&&\x20cur.limChar\x20<=\x20previous.limChar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ctx.path.push(cur);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//logger.log(\x22TODO:\x20Ignoring\x20node\x20because\x20minChar,\x20limChar\x20not\x20better\x20than\x20previous\x20node\x20in\x20stack\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20AST\x20walker\x20skips\x20comments,\x20but\x20we\x20might\x20be\x20in\x20one,\x20so\x20check\x20the\x20pre/post\x20comments\x20for\x20this\x20node\x20manually\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pos\x20<\x20limChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lookInComments(cur.preComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pos\x20>=\x20minChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lookInComments(cur.postComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(options,\x20GetAstPathOptions.DontPruneSearchBasedOnPosition))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20go\x20further\x20down\x20the\x20tree\x20if\x20pos\x20is\x20outside\x20of\x20[minChar,\x20limChar]\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20(minChar\x20<=\x20pos\x20&&\x20pos\x20<=\x20limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ctx\x20=\x20new\x20AstPathContext();\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(script,\x20pre,\x20null,\x20null,\x20ctx);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ctx.path;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20//\x20Find\x20a\x20source\x20text\x20offset\x20that\x20is\x20safe\x20for\x20lexing\x20tokens\x20at\x20the\x20given\x20position.\x0a\x20\x20\x20\x20//\x20This\x20is\x20used\x20when\x20\x22position\x22\x20might\x20be\x20inside\x20a\x20comment\x20or\x20string,\x20etc.\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20export\x20function\x20getTokenizationOffset(script:\x20TypeScript.Script,\x20position:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20bestOffset\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20TypeScript.IAstWalker):\x20TypeScript.AST\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(TypeScript.isValidAstNode(cur))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Did\x20we\x20find\x20a\x20closer\x20offset?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur.minChar\x20<=\x20position)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bestOffset\x20=\x20max(bestOffset,\x20cur.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Stop\x20the\x20walk\x20if\x20this\x20node\x20is\x20not\x20related\x20to\x20\x22minChar\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur.minChar\x20>\x20position\x20||\x20cur.limChar\x20<\x20bestOffset)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(script,\x20pre);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20bestOffset;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20///\x20Simple\x20function\x20to\x20Walk\x20an\x20AST\x20using\x20a\x20simple\x20callback\x20function.\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20export\x20function\x20walkAST(ast:\x20TypeScript.AST,\x20callback:\x20(path:\x20AstPath,\x20walker:\x20TypeScript.IAstWalker)\x20=>\x20void\x20):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20function\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20TypeScript.IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path:\x20TypeScript.AstPath\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path.push(cur);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callback(path,\x20walker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20post\x20=\x20function\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20TypeScript.IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path:\x20TypeScript.AstPath\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20new\x20AstPath();\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(ast,\x20pre,\x20post,\x20null,\x20path);\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20ASTSpan\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20minChar:\x20number\x20=\x20-1;\x20\x20//\x20-1\x20=\x20\x22undefined\x22\x20or\x20\x22compiler\x20generated\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20limChar:\x20number\x20=\x20-1;\x20\x20//\x20-1\x20=\x20\x22undefined\x22\x20or\x20\x22compiler\x20generated\x22\x20\x20\x20\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20AST\x20extends\x20ASTSpan\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20type:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20flags\x20=\x20ASTFlags.Writeable;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20for\x20diagnostic\x20purposes\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20passCreated:\x20number\x20=\x20CompilerDiagnostics.analysisPass;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20preComments:\x20Comment[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20postComments:\x20Comment[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20docComments:\x20Comment[]\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isParenthesized\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20nodeType:\x20NodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExpression()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementOrExpression()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLeaf()\x20{\x20return\x20this.isStatementOrExpression()\x20&&\x20(!this.isCompoundStatement());\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclaration()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Error:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.EmptyExpr:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.This:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckThis(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Null:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.nullType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.False:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.True:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Super:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckSuper(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.EndCode:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Empty:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Void:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.This:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitter.thisFnc\x20&&\x20(hasFlag(emitter.thisFnc.fncFlags,\x20FncFlags.IsFatArrowFunction)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22_this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Null:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22null\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.False:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22false\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.True:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22true\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Super:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitSuperReference();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.EndCode:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Error:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.EmptyExpr:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Empty:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Void:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22void\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(context:\x20PrintContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.startLine();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limLineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.parser\x20!==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.parser.getSourceLineCol(lineCol,\x20this.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.parser.getSourceLineCol(limLineCol,\x20this.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.write(\x22(\x22\x20+\x20lineCol.line\x20+\x20\x22,\x22\x20+\x20lineCol.col\x20+\x20\x22)--\x22\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22(\x22\x20+\x20limLineCol.line\x20+\x20\x22,\x22\x20+\x20limLineCol.col\x20+\x20\x22):\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lab\x20=\x20this.printLabel();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.flags,\x20ASTFlags.Error))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lab\x20+=\x20\x22\x20(Error)\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.writeLine(lab);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nodeTypeTable[this.nodeType]\x20!==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20nodeTypeTable[this.nodeType];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<any>NodeType)._map[this.nodeType];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20by\x20default,\x20AST\x20adds\x20itself\x20to\x20current\x20basic\x20block\x20and\x20does\x20not\x20check\x20its\x20children\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20netFreeUses(container:\x20Symbol,\x20freeUses:\x20StringHashTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<any>NodeType)._map[this.nodeType];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20static\x20getResolvedIdentifierName(name:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!name)\x20return\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolved\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20start\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while(i\x20<=\x20name.length\x20-\x206)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Look\x20for\x20escape\x20sequence\x20\x5cuxxxx\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(name.charAt(i)\x20==\x20\x27\x5c\x5c\x27\x20&&\x20name.charAt(i+1)\x20==\x20\x27u\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20charCode\x20=\x20parseInt(name.substr(i\x20+\x202,\x204),\x2016);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolved\x20+=\x20name.substr(start,\x20i\x20-\x20start);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolved\x20+=\x20String.fromCharCode(charCode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i\x20+=\x206;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20start\x20=\x20i;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Append\x20remaining\x20string\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolved\x20+=\x20name.substring(start);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20resolved;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocComments()\x20:\x20Comment[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isDeclaration()\x20||\x20!this.preComments\x20||\x20this.preComments.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.docComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preCommentsLength\x20=\x20this.preComments.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20docComments:\x20Comment[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20preCommentsLength\x20-\x201;\x20i\x20>=\x200;\x20i--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.preComments[i].isDocComment())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevDocComment\x20=\x20docComments.length\x20>\x200\x20?\x20docComments[docComments.length\x20-\x201]\x20:\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevDocComment\x20==\x20null\x20||\x20//\x20If\x20the\x20help\x20comments\x20were\x20not\x20yet\x20set\x20then\x20this\x20is\x20the\x20comment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.preComments[i].limLine\x20==\x20prevDocComment.minLine\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.preComments[i].limLine\x20+\x201\x20==\x20prevDocComment.minLine))\x20{\x20//\x20On\x20same\x20line\x20or\x20next\x20line\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20docComments.push(this.preComments[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.docComments\x20=\x20docComments.reverse();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.docComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20IncompleteAST\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(min:\x20number,\x20lim:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Error);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.minChar\x20=\x20min;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.limChar\x20=\x20lim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ASTList\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingScope:\x20SymbolScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20members:\x20AST[]\x20=\x20new\x20AST[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.List);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addUnreachable(this.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members[i]\x20=\x20context.walk(this.members[i],\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20append(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members[this.members.length]\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20appendAll(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20list\x20=\x20<ASTList>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20list.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.append(list.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.append(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptList(this,\x20null,\x20TokenID.Semicolon,\x20startLine,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.nestingLevel++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.members[i])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members[i]\x20=\x20this.members[i].typeCheck(typeFlow);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.nestingLevel--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Identifier\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cloId\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20text:\x20string;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x27actualText\x27\x20is\x20the\x20text\x20that\x20the\x20user\x20has\x20entered\x20for\x20the\x20identifier.\x20the\x20text\x20might\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20include\x20any\x20Unicode\x20escape\x20sequences\x20(e.g.:\x20\x5cu0041\x20for\x20\x27A\x27).\x20\x27text\x27,\x20however,\x20contains\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20resolved\x20value\x20of\x20any\x20escape\x20sequences\x20in\x20the\x20actual\x20text;\x20so\x20in\x20the\x20previous\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20example,\x20actualText\x20=\x20\x27\x5cu0041\x27,\x20text\x20=\x20\x27A\x27.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20For\x20purposes\x20of\x20finding\x20a\x20symbol,\x20use\x20text,\x20as\x20this\x20will\x20allow\x20you\x20to\x20match\x20all\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20variations\x20of\x20the\x20variable\x20text.\x20For\x20full-fidelity\x20translation\x20of\x20the\x20user\x20input,\x20such\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20as\x20emitting,\x20use\x20the\x20actualText\x20field.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note:\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20To\x20change\x20text,\x20and\x20to\x20avoid\x20running\x20into\x20a\x20situation\x20where\x20\x27actualText\x27\x20does\x20not\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20match\x20\x27text\x27,\x20always\x20use\x20setText.\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20actualText:\x20string,\x20public\x20hasEscapeSequence?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setText(actualText,\x20hasEscapeSequence);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setText(actualText:\x20string,\x20hasEscapeSequence?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.actualText\x20=\x20actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasEscapeSequence)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.text\x20=\x20AST.getResolvedIdentifierName(actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.text\x20=\x20actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMissing()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLeaf()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22id:\x20\x22\x20+\x20this.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.actualText)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22id:\x20\x22\x20+\x20this.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22name\x20node\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckName(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptName(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20static\x20fromToken(token:\x20Token):\x20Identifier\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20Identifier(token.getText(),\x20(<IdentifierToken>token).hasEscapeSequence);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20MissingIdentifier\x20extends\x20Identifier\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(\x22__missing\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMissing()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Emit\x20nothing\x20for\x20a\x20missing\x20ID\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Label\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20id:\x20Identifier)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Label);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x20return\x20this.id.actualText\x20+\x20\x22:\x22;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(this.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22:\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Expression\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExpression()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementOrExpression()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20UnaryExpression\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20targetType:\x20Type\x20=\x20null;\x20//\x20Target\x20type\x20for\x20an\x20object\x20literal\x20(null\x20if\x20no\x20target\x20type)\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20castTerm:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType,\x20public\x20operand:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.addToControlFlow(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20add\x20successor\x20as\x20catch\x20block/finally\x20block\x20if\x20present\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nodeType\x20==\x20NodeType.Throw)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.returnStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Not:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckBitNot(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.LogNot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckLogNot(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Pos:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Neg:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckUnaryNumberOperator(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.IncPost:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.IncPre:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.DecPost:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.DecPre:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckIncOrDec(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheckArrayLit(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheckObjectLit(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Throw:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand\x20=\x20typeFlow.typeCheck(this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Typeof:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand\x20=\x20typeFlow.typeCheck(this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Delete:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand\x20=\x20typeFlow.typeCheck(this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.TypeAssertion:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.castTerm\x20=\x20typeFlow.typeCheck(this.castTerm);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applyTargetType\x20=\x20!this.operand.isParenthesized;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType\x20=\x20applyTargetType\x20?\x20this.castTerm.type\x20:\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.typeCheckWithContextualType(targetType,\x20typeFlow.checker.inProvisionalTypecheckMode(),\x20true,\x20this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.castWithCoercion(this.operand,\x20this.castTerm.type,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20this.castTerm.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Void:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW\x20-\x20Although\x20this\x20is\x20good\x20to\x20do\x20for\x20completeness\x27s\x20sake,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20shouldn\x27t\x20be\x20strictly\x20necessary\x20from\x20the\x20void\x20operator\x27s\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20point\x20of\x20view\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand\x20=\x20typeFlow.typeCheck(this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.checker.undefinedType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.IncPost:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.PlusPlus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22++\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.LogNot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22!\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Exclamation,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.DecPost:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.MinusMinus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22--\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitObjectLiteral(<ASTList>this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitArrayLiteral(<ASTList>this.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Not:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22~\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Neg:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22-\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.operand.nodeType\x20==\x20NodeType.Neg)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand.isParenthesized\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Minus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Pos:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22+\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.operand.nodeType\x20==\x20NodeType.Pos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.operand.isParenthesized\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Plus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.IncPre:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22++\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.PlusPlus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.DecPre:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22--\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.MinusMinus,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Throw:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22throw\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Typeof:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22typeof\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Delete:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22delete\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Void:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22void\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.TypeAssertion:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20CallExpression\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20target:\x20AST,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20arguments:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.minChar\x20=\x20this.target.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signature:\x20Signature\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nodeType\x20==\x20NodeType.New)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckNew(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckCall(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nodeType\x20==\x20NodeType.New)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitNew(this.target,\x20this.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitCall(this,\x20this.target,\x20this.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BinaryExpression\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType,\x20public\x20operand1:\x20AST,\x20public\x20operand2:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Dot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckDotOperator(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Asg:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckAsgOperator(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Add:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Sub:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Mul:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Div:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Mod:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Or:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.And:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckArithmeticOperator(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Xor:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckBitwiseOperator(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Ne:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Eq:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeFlow.checker.styleSettings.eqeqeq)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20nodeTypeTable[this.nodeType];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter.styleError(this,\x20\x22use\x20of\x20\x22\x20+\x20text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(typeFlow.checker.styleSettings.eqnull)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20nodeTypeTable[this.nodeType];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.operand2\x20!==\x20null)\x20&&\x20(this.operand2.nodeType\x20==\x20NodeType.Null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter.styleError(this,\x20\x22use\x20of\x20\x22\x20+\x20text\x20+\x20\x22\x20to\x20compare\x20with\x20null\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Eqv:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.NEqv:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Lt:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Le:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Ge:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Gt:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckBooleanOperator(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Index:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckIndex(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Member:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.LogOr:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckLogOr(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.LogAnd:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckLogAnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgAdd:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgSub:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgMul:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgDiv:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgMod:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgOr:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgAnd:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckArithmeticOperator(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgXor:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckBitwiseOperator(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Lsh:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Rsh:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Rs2:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckShift(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgLsh:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgRsh:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.AsgRs2:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckShift(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Comma:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckCommaOperator(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.InstOf:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckInstOf(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.In:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckInOperator(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.From:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter.simpleError(this,\x20\x22Illegal\x20use\x20of\x20\x27from\x27\x20keyword\x20in\x20binary\x20expression\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binTokenId\x20=\x20nodeTypeToTokTable[this.nodeType];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binTokenId\x20!=\x20undefined)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20binTokenId,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenTable[binTokenId].text\x20==\x20\x22instanceof\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20instanceof\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(tokenTable[binTokenId].text\x20==\x20\x22in\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20in\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutputTrimmable(\x22\x20\x22\x20+\x20tokenTable[binTokenId].text\x20+\x20\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand2,\x20binTokenId,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Dot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!emitter.tryEmitConstant(this))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20TokenID.Dot,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptName(<Identifier>this.operand2,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Index:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitIndex(this.operand1,\x20this.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Member:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.operand2.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20(<FuncDecl>this.operand2).isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>this.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22get\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22set\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20TokenID.Colon,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20TokenID.Colon,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutputTrimmable(\x22:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand2,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Comma:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitter.emitState.inObjectLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22,\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand2,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Is:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22should\x20be\x20de-sugared\x20during\x20type\x20check\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ConditionalExpression\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20operand1:\x20AST,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20operand2:\x20AST,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20operand3:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.ConditionalExpression);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckQMark(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand1,\x20TokenID.Question,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20?\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand2,\x20TokenID.Question,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.operand3,\x20TokenID.Question,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20NumberLiteral\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20value:\x20number,\x20public\x20hasEmptyFraction?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.NumberLit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNegativeZero\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22num:\x20\x22\x20+\x20this.printLabel();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isNegativeZero)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22-\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(this.value.toString());\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.hasEmptyFraction)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22.0\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Math.floor(this.value)\x20!=\x20this.value)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value.toFixed(2).toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.hasEmptyFraction)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value.toString()\x20+\x20\x22.0\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20RegexLiteral\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20regex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Regex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.regexType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(this.regex.toString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20StringLiteral\x20extends\x20Expression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20text:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.QString);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitStringLiteral(this.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22st:\x20\x22\x20+\x20this.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ModuleElement\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ImportDeclaration\x20extends\x20ModuleElement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementOrExpression()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20varFlags\x20=\x20VarFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDynamicImport\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclaration()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20id:\x20Identifier,\x20public\x20alias:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.ImportDeclaration);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mod\x20=\x20<ModuleType>this.alias.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Only\x20modules\x20may\x20be\x20aliased\x20for\x20now,\x20though\x20there\x27s\x20no\x20real\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20restriction\x20on\x20what\x20the\x20type\x20symbol\x20may\x20be\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isDynamicImport\x20||\x20(this.id.sym\x20&&\x20!(<TypeSymbol>this.id.sym).onlyReferencedAsTypeRef))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevModAliasId\x20=\x20emitter.modAliasId;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevFirstModAlias\x20=\x20emitter.firstModAlias;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22var\x20\x22\x20+\x20this.id.actualText\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.modAliasId\x20=\x20this.id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.firstModAlias\x20=\x20this.firstAliasedModToString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.alias,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20dynamic\x20import\x20case\x20will\x20insert\x20the\x20semi-colon\x20automatically\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isDynamicImport)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.modAliasId\x20=\x20prevModAliasId;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.firstModAlias\x20=\x20prevFirstModAlias;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckImportDecl(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAliasName(aliasAST?:\x20AST\x20=\x20this.alias)\x20:\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(aliasAST.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<Identifier>aliasAST).actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dotExpr\x20=\x20<BinaryExpression>aliasAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getAliasName(dotExpr.operand1)\x20+\x20\x22.\x22\x20+\x20this.getAliasName(dotExpr.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20firstAliasedModToString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.alias.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<Identifier>this.alias).actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dotExpr\x20=\x20<BinaryExpression>this.alias;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20firstMod\x20=\x20<Identifier>dotExpr.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20firstMod.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BoundDecl\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20init:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeExpr:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20varFlags\x20=\x20VarFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclaration()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20id:\x20Identifier,\x20nodeType:\x20NodeType,\x20public\x20nestingLevel:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementOrExpression()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isPrivate()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Private);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isPublic()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Public);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isProperty()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Property);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckBoundDecl(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.treeViewLabel();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20VarDecl\x20extends\x20BoundDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(id:\x20Identifier,\x20nest:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(id,\x20NodeType.VarDecl,\x20nest);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAmbient()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Ambient);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExported()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Exported);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatic()\x20{\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Static);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptVarDecl(this,\x20tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22var\x20\x22\x20+\x20this.id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ArgDecl\x20extends\x20BoundDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(id:\x20Identifier)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(id,\x20NodeType.ArgDecl,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isOptional\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isOptionalArg()\x20{\x20return\x20this.isOptional\x20||\x20this.init;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22arg:\x20\x22\x20+\x20this.id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parameterPropertySym:\x20FieldSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(this.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20var\x20internalId\x20=\x200;\x0a\x0a\x20\x20\x20\x20export\x20class\x20FuncDecl\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hint:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fncFlags\x20=\x20FncFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnTypeAnnotation:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbols:\x20IHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20variableArgList\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signature:\x20Signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20envids:\x20Identifier[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20jumpRefs:\x20Identifier[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20internalNameCache:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tmp1Declared\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingFnc:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20freeVariables:\x20Symbol[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unitIndex\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classDecl:\x20NamedDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20boundToProperty:\x20VarDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isOverload\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20innerStaticFuncs:\x20FuncDecl[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isTargetTypedAsMethod\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isInlineCallLiteral\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20accessorSymbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20leftCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rightCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnStatementsWithExpressions:\x20ReturnStatement[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopeType:\x20Type\x20=\x20null;\x20//\x20Type\x20of\x20the\x20FuncDecl,\x20before\x20target\x20typing\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20endingToken:\x20ASTSpan\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclaration()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20name:\x20Identifier,\x20public\x20bod:\x20ASTList,\x20public\x20isConstructor:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20arguments:\x20ASTList,\x20public\x20vars:\x20ASTList,\x20public\x20scopes:\x20ASTList,\x20public\x20statics:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodeType:\x20number)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20internalName():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.internalNameCache\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20extName\x20=\x20this.getNameText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(extName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.internalNameCache\x20=\x20\x22_internal_\x22\x20+\x20extName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.internalNameCache\x20=\x20\x22_internal_\x22\x20+\x20internalId++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.internalNameCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasSelfReference()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.HasSelfReference);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setHasSelfReference()\x20{\x20this.fncFlags\x20|=\x20FncFlags.HasSelfReference;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasSuperReferenceInFatArrowFunction()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.HasSuperReferenceInFatArrowFunction);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setHasSuperReferenceInFatArrowFunction()\x20{\x20this.fncFlags\x20|=\x20FncFlags.HasSuperReferenceInFatArrowFunction;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addCloRef(id:\x20Identifier,\x20sym:\x20Symbol):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.envids\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.envids\x20=\x20new\x20Identifier[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.envids[this.envids.length]\x20=\x20id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outerFnc\x20=\x20this.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(outerFnc\x20&&\x20(outerFnc.type.symbol\x20!=\x20sym.container))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerFnc.addJumpRef(sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerFnc\x20=\x20outerFnc.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.envids.length\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addJumpRef(sym:\x20Symbol):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.jumpRefs\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.jumpRefs\x20=\x20new\x20Identifier[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20new\x20Identifier(sym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.jumpRefs[this.jumpRefs.length]\x20=\x20id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.sym\x20=\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.cloId\x20=\x20this.addCloRef(id,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20buildControlFlow():\x20ControlFlowContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20entry\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exit\x20=\x20new\x20BasicBlock();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20context\x20=\x20new\x20ControlFlowContext(entry,\x20exit);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20controlFlowPrefix\x20=\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.addToControlFlow(walker.state);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20walker\x20=\x20getAstWalkerFactory().getWalker(controlFlowPrefix,\x20null,\x20null,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker\x20=\x20walker;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.walk(this.bod,\x20this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20context;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckFunction(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptFunction(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getNameText()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.hint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMethod()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.fncFlags\x20&\x20FncFlags.Method)\x20!=\x20FncFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCallMember()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.CallMember);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isConstructMember()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.ConstructMember);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isIndexerMember()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.IndexerMember);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isSpecialFn()\x20{\x20return\x20this.isCallMember()\x20||\x20this.isIndexerMember()\x20||\x20this.isConstructMember();\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAnonymousFn()\x20{\x20return\x20this.name\x20===\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAccessor()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.GetAccessor)\x20||\x20hasFlag(this.fncFlags,\x20FncFlags.SetAccessor);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isGetAccessor()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.GetAccessor);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isSetAccessor()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.SetAccessor);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAmbient()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.Ambient);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExported()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.Exported);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isPrivate()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.Private);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isPublic()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.Public);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatic()\x20{\x20return\x20hasFlag(this.fncFlags,\x20FncFlags.Static);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.name\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22funcExpr\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22func:\x20\x22\x20+\x20this.name.actualText\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ClearFlags():\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.fncFlags\x20=\x20FncFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isSignature()\x20{\x20return\x20(this.fncFlags\x20&\x20FncFlags.Signature)\x20!=\x20FncFlags.None;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20LocationInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20filename:\x20string,\x20public\x20lineMap:\x20number[],\x20public\x20unitIndex)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20unknownLocationInfo\x20=\x20new\x20LocationInfo(\x22unknown\x22,\x20null,\x20-1);\x0a\x0a\x20\x20\x20\x20export\x20class\x20Script\x20extends\x20FuncDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20locationInfo:\x20LocationInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20referencedFiles:\x20IFileReference[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20requiresGlobal\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20requiresExtendsBlock\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isResident\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclareFile\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasBeenTypeChecked\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20topLevelMod:\x20ModuleDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20leftCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rightCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20vars:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopes:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Remember\x20if\x20the\x20script\x20contains\x20Unicode\x20chars,\x20that\x20is\x20needed\x20when\x20generating\x20code\x20for\x20this\x20script\x20object\x20to\x20decide\x20the\x20output\x20file\x20correct\x20encoding.\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containsUnicodeChar\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containsUnicodeCharInComment\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cachedEmitRequired:\x20bool;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20setCachedEmitRequired(value:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cachedEmitRequired\x20=\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.cachedEmitRequired;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(vars:\x20ASTList,\x20scopes:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(new\x20Identifier(\x22script\x22),\x20null,\x20false,\x20null,\x20vars,\x20scopes,\x20null,\x20NodeType.Script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.vars\x20=\x20vars;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scopes\x20=\x20scopes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckScript(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20treeViewLabel()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22Script\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitRequired(emitOptions:\x20EmitOptions)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.cachedEmitRequired\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.cachedEmitRequired;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isDeclareFile\x20&&\x20!this.isResident\x20&&\x20this.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.bod.members.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20allow\x20empty\x20files\x20that\x20are\x20not\x20declare\x20files\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.bod.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stmt\x20=\x20this.bod.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmt.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag((<ModuleDeclaration>stmt).modFlags,\x20ModuleFlags.ShouldEmitModuleDecl\x20|\x20ModuleFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(stmt.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag((<ClassDeclaration>stmt).varFlags,\x20VarFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(stmt.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag((<VarDecl>stmt).varFlags,\x20VarFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(stmt.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(<FuncDecl>stmt).isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(stmt.nodeType\x20!=\x20NodeType.InterfaceDeclaration\x20&&\x20stmt.nodeType\x20!=\x20NodeType.Empty)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(\x20emitOptions.emitComments\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((this.bod.preComments\x20&&\x20this.bod.preComments.length\x20>\x200)\x20||\x20(this.bod.postComments\x20&&\x20this.bod.postComments.length\x20>\x200)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.setCachedEmitRequired(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitRequired(emitter.emitOptions))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this.bod,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptList(this.bod,\x20null,\x20TokenID.Semicolon,\x20true,\x20false,\x20false,\x20true,\x20this.requiresExtendsBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this.bod,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20externallyVisibleImportedSymbols:\x20Symbol[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20AddExternallyVisibleImportedSymbol(symbol:\x20Symbol,\x20checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isExternallyVisibleSymbol(symbol))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Before\x20adding\x20check\x20if\x20the\x20external\x20symbol\x20is\x20also\x20marked\x20for\x20visibility\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol.getType().symbol.isExternallyVisible(checker))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Report\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quotes\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleName\x20=\x20symbol.getType().symbol.prettyName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isQuoted(moduleName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quotes\x20=\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.errorReporter.simpleError(symbol.declAST,\x20\x22Externally\x20visible\x20import\x20statement\x20uses\x20non\x20exported\x20module\x20\x22\x20+\x20quotes\x20+\x20moduleName\x20+\x20quotes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.externallyVisibleImportedSymbols.push(symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExternallyVisibleSymbol(symbol:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200\x20;\x20i\x20<\x20this.externallyVisibleImportedSymbols.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.externallyVisibleImportedSymbols[i]\x20==\x20symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20NamedDeclaration\x20extends\x20ModuleElement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20leftCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rightCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDeclaration()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20name:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20members:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ModuleDeclaration\x20extends\x20NamedDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20modFlags\x20=\x20ModuleFlags.ShouldEmitModuleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mod:\x20ModuleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prettyName:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20amdDependencies:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20vars:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopes:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Remember\x20if\x20the\x20module\x20contains\x20Unicode\x20chars,\x20that\x20is\x20needed\x20for\x20dynamic\x20module\x20as\x20we\x20will\x20generate\x20a\x20file\x20for\x20each.\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containsUnicodeChar\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containsUnicodeCharInComment\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20Identifier,\x20members:\x20ASTList,\x20vars:\x20ASTList,\x20scopes:\x20ASTList,\x20public\x20endingToken:\x20ASTSpan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.ModuleDeclaration,\x20name,\x20members);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.vars\x20=\x20vars;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scopes\x20=\x20scopes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prettyName\x20=\x20this.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExported()\x20{\x20return\x20hasFlag(this.modFlags,\x20ModuleFlags.Exported);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAmbient()\x20{\x20return\x20hasFlag(this.modFlags,\x20ModuleFlags.Ambient);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isEnum()\x20{\x20return\x20hasFlag(this.modFlags,\x20ModuleFlags.IsEnum);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20recordNonInterface()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.modFlags\x20&=\x20~ModuleFlags.ShouldEmitModuleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckModule(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(this.modFlags,\x20ModuleFlags.ShouldEmitModuleDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptModule(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeDeclaration\x20extends\x20NamedDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20varFlags\x20=\x20VarFlags.None;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20extendsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20implementsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType,\x20name,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExported()\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAmbient()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(this.varFlags,\x20VarFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ClassDeclaration\x20extends\x20TypeDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20knownMemberNames:\x20any\x20=\x20{};\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20constructorDecl:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20constructorNestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20endingToken:\x20ASTSpan\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implementsList:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.ClassDeclaration,\x20name,\x20extendsList,\x20implementsList,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckClass(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptClass(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20InterfaceDeclaration\x20extends\x20TypeDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implementsList:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.InterfaceDeclaration,\x20name,\x20extendsList,\x20implementsList,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckInterface(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Statement\x20extends\x20ModuleElement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20ASTFlags.IsStatement;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLoop()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementOrExpression()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20this.isLoop();\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20LabeledStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20labels:\x20ASTList,\x20public\x20stmt:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.LabeledStatement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.labels)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20labelsLen\x20=\x20this.labels.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20labelsLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.labels.members[i].emit(emitter,\x20tokenId,\x20startLine);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stmt.emit(emitter,\x20tokenId,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheck(this.labels);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stmt\x20=\x20this.stmt.typeCheck(typeFlow);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20beforeBB\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bb\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20bb;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeBB.addSuccessor(bb);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Block\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20statements:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatementBlock:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Block);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isStatementBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInVarBlock(this.statements.members.length);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.statements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptList(this.statements,\x20null,\x20TokenID.Semicolon,\x20true,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isStatementBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterIfNeeded\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20context.current,\x20afterIfNeeded);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.statements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.statements,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(afterIfNeeded.predecessors.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterIfNeeded);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterIfNeeded;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!typeFlow.checker.styleSettings.emptyBlocks)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.statements\x20===\x20null)\x20||\x20(this.statements.members.length\x20==\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter.styleError(this,\x20\x22empty\x20block\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheck(this.statements);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Jump\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20target:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasExplicitTarget()\x20{\x20return\x20(this.target);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolvedTarget:\x20Statement\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(nodeType:\x20NodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(nodeType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setResolvedTarget(parser:\x20Parser,\x20stmt:\x20Statement):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmt.isLoop())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedTarget\x20=\x20stmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nodeType\x20===\x20NodeType.Continue)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parser.reportParseError(\x22continue\x20statement\x20applies\x20only\x20to\x20loops\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((stmt.nodeType\x20==\x20NodeType.Switch)\x20||\x20this.hasExplicitTarget())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedTarget\x20=\x20stmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parser.reportParseError(\x22break\x20statement\x20with\x20no\x20label\x20can\x20apply\x20only\x20to\x20a\x20loop\x20or\x20switch\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.addToControlFlow(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.unconditionalBranch(this.resolvedTarget,\x20(this.nodeType\x20==\x20NodeType.Continue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nodeType\x20==\x20NodeType.Break)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22break\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22continue\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.hasExplicitTarget())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20\x22\x20+\x20this.target);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20WhileStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20cond:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.While);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLoop()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22while(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.cond,\x20TokenID.While,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckWhile(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopHeader\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopStart\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterLoop\x20=\x20new\x20BasicBlock();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopHeader.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20loopStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20condBlock\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo:\x20ITargetInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(context.current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20loopStart,\x20afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetInfo\x20=\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(context.noContinuation))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopEnd\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopEnd.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20check\x20for\x20while\x20(true)\x20and\x20then\x20only\x20continue\x20if\x20afterLoop\x20has\x20predecessors\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20DoWhileStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20whileAST:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cond:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLoop()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.DoWhile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22do\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.whileAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22while\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.whileAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x27(\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.cond,\x20TokenID.CloseParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckDoWhile(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopHeader\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopStart\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterLoop\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopHeader.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20loopStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo:\x20ITargetInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20loopStart,\x20afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetInfo\x20=\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(context.noContinuation))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopEnd\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopEnd.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20check\x20for\x20while\x20(true)\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopEnd.addSuccessor(afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addUnreachable(this.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20IfStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thenBod:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20elseBod:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20statement:\x20ASTSpan\x20=\x20new\x20ASTSpan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20cond:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.If);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22if(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.cond,\x20TokenID.If,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.thenBod,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elseBod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elseBod.nodeType\x20===\x20NodeType.If)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20else\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.elseBod.emit(emitter,\x20tokenId,\x20/*startLine:*/\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20else\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.elseBod,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckIf(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cond.addToControlFlow(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterIf\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20beforeIf\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20beforeIf,\x20afterIf);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeIf.addSuccessor(context.current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.thenBod,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterIf);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elseBod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20current\x20block\x20will\x20be\x20thenBod\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeIf.addSuccessor(context.current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.elseBod,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterIf);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20thenBod\x20created\x20continuation\x20for\x20if\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeIf.addSuccessor(afterIf);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo\x20=\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(afterIf.predecessors.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterIf;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ReturnStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnExpression:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Return);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.returnExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22return\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.returnExpression,\x20TokenID.Semicolon,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.returnExpression.nodeType\x20===\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22return;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.addToControlFlow(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.returnStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckReturn(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20EndCode\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.EndCode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ForInStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20lval:\x20AST,\x20public\x20obj:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.ForIn);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.lval\x20&&\x20(this.lval.nodeType\x20==\x20NodeType.VarDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<BoundDecl>this.lval).varFlags\x20|=\x20VarFlags.AutoInit;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20statement:\x20ASTSpan\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20AST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLoop()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isFiltered()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20singleItem:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body.nodeType\x20==\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stmts\x20=\x20<ASTList>this.body;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts.members.length\x20==\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20singleItem\x20=\x20stmts.members[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20singleItem\x20=\x20this.body;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20match\x20template\x20for\x20filtering\x20\x27own\x27\x20properties\x20from\x20obj\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(singleItem\x20!==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(singleItem.nodeType\x20==\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20block\x20=\x20<Block>singleItem;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((block.statements\x20!==\x20null)\x20&&\x20(block.statements.members.length\x20==\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20singleItem\x20=\x20block.statements.members[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(singleItem.nodeType\x20==\x20NodeType.If)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cond\x20=\x20(<IfStatement>singleItem).cond;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cond.nodeType\x20==\x20NodeType.Call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20target\x20=\x20(<CallExpression>cond).target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.nodeType\x20==\x20NodeType.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((binex.operand1.nodeType\x20==\x20NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.obj.nodeType\x20==\x20NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((<Identifier>binex.operand1).actualText\x20==\x20(<Identifier>this.obj).actualText))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prop\x20=\x20<Identifier>binex.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prop.actualText\x20==\x20\x22hasOwnProperty\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args\x20=\x20(<CallExpression>cond).arguments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((args\x20!==\x20null)\x20&&\x20(args.members.length\x20==\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20args.members[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((arg.nodeType\x20==\x20NodeType.Name)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.lval.nodeType\x20==\x20NodeType.Name))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((<Identifier>this.lval).actualText)\x20==\x20(<Identifier>arg).actualText)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22for(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.lval,\x20TokenID.For,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20in\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.obj,\x20TokenID.For,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeFlow.checker.styleSettings.forin)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isFiltered())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter.styleError(this,\x20\x22no\x20hasOwnProperty\x20filter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckForIn(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.lval)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.lval);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.obj)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.obj);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopHeader\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopStart\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterLoop\x20=\x20new\x20BasicBlock();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopHeader.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20loopStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20loopStart,\x20afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(context.noContinuation))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopEnd\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopEnd.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopHeader.addSuccessor(afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ForStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cond:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20incr:\x20AST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20init:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.For);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLoop()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22for(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.init.nodeType\x20!=\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.init,\x20TokenID.For,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInVarBlock((<ASTList>this.init).members.length);\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptList(this.init,\x20null,\x20TokenID.For,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.cond,\x20TokenID.For,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22;\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.incr,\x20TokenID.For,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckFor(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.init);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopHeader\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopStart\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterLoop\x20=\x20new\x20BasicBlock();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopHeader.addSuccessor(loopStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20loopStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20condBlock:\x20BasicBlock\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20continueTarget\x20=\x20loopStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20incrBB:\x20BasicBlock\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.incr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20incrBB\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continueTarget\x20=\x20incrBB;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.cond)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(context.current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo:\x20ITargetInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20continueTarget,\x20afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetInfo\x20=\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.incr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(incrBB.predecessors.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addUnreachable(this.incr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(incrBB);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20incrBB;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.incr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20loopEnd\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(context.noContinuation))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20loopEnd.addSuccessor(loopStart);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(condBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(afterLoop);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(afterLoop.predecessors.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20WithStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20AST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20withSym:\x20WithSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20expr:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.With);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22with\x20(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.expr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.expr,\x20TokenID.With,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20typeFlow.typeCheckWith(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SwitchStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20caseList:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20defaultCase:\x20CaseStatement\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20statement:\x20ASTSpan\x20=\x20new\x20ASTSpan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20val:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Switch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20emitter.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22switch(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.val,\x20TokenID.Identifier,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20casesLen\x20=\x20this.caseList.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20casesLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20caseExpr\x20=\x20this.caseList.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(caseExpr,\x20TokenID.Case,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.caseList.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.val\x20=\x20typeFlow.typeCheck(this.val);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.caseList.members[i]\x20=\x20typeFlow.typeCheck(this.caseList.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.defaultCase\x20=\x20<CaseStatement>typeFlow.typeCheck(this.defaultCase);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20there\x20are\x20break\x20statements\x20that\x20match\x20this\x20switch,\x20then\x20just\x20link\x20cond\x20block\x20with\x20block\x20after\x20switch\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20condBlock\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.val);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20execBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterSwitch\x20=\x20new\x20BasicBlock();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(execBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushSwitch(execBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20execBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20execBlock,\x20afterSwitch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.caseList,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.popSwitch();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo\x20=\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasCondContinuation\x20=\x20(this.defaultCase\x20==\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.defaultCase\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20condBlock.addSuccessor(afterSwitch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(afterSwitch.predecessors.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterSwitch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20CaseStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20expr:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20body:\x20ASTList;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Case);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.expr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22case\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.expr,\x20TokenID.Identifier,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22default\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22:\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body.members.length\x20==\x201\x20&&\x20this.body.members[0].nodeType\x20==\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20case\x20statement\x20was\x20written\x20with\x20curly\x20braces,\x20so\x20emit\x20it\x20with\x20the\x20appropriate\x20formatting\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascriptStatements(this.body,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20No\x20curly\x20braces.\x20Format\x20in\x20the\x20expected\x20way\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitBareJavascriptStatements(this.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.expr\x20=\x20typeFlow.typeCheck(this.expr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheck(this.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20more\x20reasoning\x20about\x20unreachable\x20cases\x20(such\x20as\x20duplicate\x20literals\x20as\x20case\x20expressions)\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20now,\x20assume\x20all\x20cases\x20are\x20reachable,\x20regardless\x20of\x20whether\x20some\x20cases\x20fall\x20through\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20execBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sw\x20=\x20context.currentSwitch[context.currentSwitch.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20fall-through\x20from\x20previous\x20(+\x20to\x20end\x20of\x20switch)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.expr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exprBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20exprBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sw.addSuccessor(exprBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.expr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exprBlock.addSuccessor(execBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sw.addSuccessor(execBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20execBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeReference\x20extends\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20term:\x20AST,\x20public\x20arrayCount:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.TypeRef);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22should\x20not\x20emit\x20a\x20type\x20ref\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInTCTR\x20=\x20typeFlow.inTypeRefTypeCheck;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.inTypeRefTypeCheck\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeLink\x20=\x20getTypeLink(this,\x20typeFlow.checker,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.resolveTypeLink(typeFlow.scope,\x20typeLink,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.term)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.typeCheck(this.term);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checkForVoidConstructor(typeLink.type,\x20this);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeLink.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20error\x20recovery\x20cases,\x20there\x20may\x20not\x20be\x20a\x20term\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.term)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.term.type\x20=\x20this.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.inTypeRefTypeCheck\x20=\x20prevInTCTR;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TryFinally\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20tryNode:\x20AST,\x20public\x20finallyNode:\x20Finally)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.TryFinally);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.tryNode,\x20TokenID.Try,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.finallyNode,\x20TokenID.Finally,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tryNode\x20=\x20typeFlow.typeCheck(this.tryNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.finallyNode\x20=\x20<Finally>typeFlow.typeCheck(this.finallyNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterFinally\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.tryNode,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20finBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.current)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(finBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20finBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20null,\x20afterFinally);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.finallyNode,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.noContinuation\x20&&\x20context.current)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterFinally);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(afterFinally.predecessors.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterFinally;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TryCatch\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20tryNode:\x20Try,\x20public\x20catchNode:\x20Catch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.TryCatch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isCompoundStatement()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.tryNode,\x20TokenID.Try,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.catchNode,\x20TokenID.Catch,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20beforeTry\x20=\x20context.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tryBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeTry.addSuccessor(tryBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20tryBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20afterTryCatch\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.pushStatement(this,\x20null,\x20afterTryCatch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.tryNode,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.current)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterTryCatch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beforeTry.addSuccessor(context.current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.catchNode,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.popStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.noContinuation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.current)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(afterTryCatch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20afterTryCatch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tryNode\x20=\x20<Try>typeFlow.typeCheck(this.tryNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.catchNode\x20=\x20<Catch>typeFlow.typeCheck(this.catchNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Try\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20body:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Try);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22try\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.body,\x20TokenID.Try,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.body\x20=\x20typeFlow.typeCheck(this.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Catch\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20param:\x20VarDecl,\x20public\x20body:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Catch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.param)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.param.varFlags\x20|=\x20VarFlags.AutoInit;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20statement:\x20ASTSpan\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containedScope:\x20SymbolScope\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22catch\x20(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.param,\x20TokenID.OpenParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this.statement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.body,\x20TokenID.Catch,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.param)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addContent(this.param);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bodBlock\x20=\x20new\x20BasicBlock();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current.addSuccessor(bodBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.current\x20=\x20bodBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20typeFlow.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.scope\x20=\x20this.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.param\x20=\x20<VarDecl>typeFlow.typeCheck(this.param);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exceptVar\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varSym\x20=\x20new\x20VariableSymbol((<VarDecl>this.param).id.text,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.param.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar.symbol\x20=\x20varSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20var\x20type\x20for\x20now\x20(add\x20syntax\x20for\x20type\x20annotation)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar.typeLink.type\x20=\x20typeFlow.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20thisFnc\x20=\x20typeFlow.thisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(thisFnc\x20&&\x20thisFnc.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar.symbol.container\x20=\x20thisFnc.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exceptVar.symbol.container\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.param.sym\x20=\x20exceptVar.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.scope.enter(exceptVar.symbol.container,\x20this.param,\x20exceptVar.symbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.checker.errorReporter,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.body\x20=\x20typeFlow.typeCheck(this.body);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20we\x27re\x20in\x20provisional\x20typecheck\x20mode,\x20clean\x20up\x20the\x20symbol\x20entry\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20is\x20obviously\x20bad\x20form,\x20since\x20we\x27re\x20counting\x20on\x20the\x20internal\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20layout\x20of\x20the\x20symbol\x20table,\x20but\x20this\x20is\x20also\x20the\x20only\x20place\x20where\x20we\x20insert\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20symbols\x20during\x20typecheck\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeFlow.checker.inProvisionalTypecheckMode())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table\x20=\x20typeFlow.scope.getTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<any>table).secondaryTable.table[exceptVar.symbol.name]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.type\x20=\x20typeFlow.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeFlow.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Finally\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20body:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Finally);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeToOutput(\x22finally\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(this.body,\x20TokenID.Finally,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToControlFlow(context:\x20ControlFlowContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walk(this.body,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(typeFlow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.body\x20=\x20typeFlow.typeCheck(this.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Comment\x20extends\x20AST\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20text:\x20string[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20minLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20limLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20docCommentText:\x20string\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20content:\x20string,\x20public\x20isBlockComment:\x20bool,\x20public\x20endsLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.text\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.text\x20=\x20this.content.split(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.text.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.text[i]\x20=\x20this.text[i].replace(/^\x5cs+|\x5cs+$/g,\x20\x27\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.text\x20=\x20[(this.content.replace(/^\x5cs+|\x5cs+$/g,\x20\x27\x27))];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDocComment()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.content.charAt(2)\x20==\x20\x22*\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocCommentText()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.docCommentText\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.docCommentText\x20=\x20Comment.cleanJSDocComment(this.content);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.docCommentText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20consumeLeadingSpace(line:\x20string,\x20startIndex:\x20number,\x20maxSpacesToRemove?:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endIndex\x20=\x20line.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(maxSpacesToRemove\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20endIndex\x20=\x20min(startIndex\x20+\x20maxSpacesToRemove,\x20endIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20startIndex\x20<\x20endIndex;\x20startIndex++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20charCode\x20=\x20line.charCodeAt(startIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(charCode\x20!=\x20LexCodeSpace\x20&&\x20charCode\x20!=\x20LexCodeTAB)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20startIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(endIndex\x20!=\x20line.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20endIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20isSpaceChar(line:\x20string,\x20index:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20length\x20=\x20line.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(index\x20<\x20length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20charCode\x20=\x20line.charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20character\x20is\x20space\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20charCode\x20==\x20LexCodeSpace\x20||\x20charCode\x20==\x20LexCodeTAB;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20index\x20is\x20end\x20of\x20the\x20line\x20it\x20is\x20space\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20index\x20==\x20length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20cleanDocCommentLine(line:\x20string,\x20jsDocStyleComment:\x20bool,\x20jsDocLineSpaceToRemove?:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nonSpaceIndex\x20=\x20Comment.consumeLeadingSpace(line,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nonSpaceIndex\x20!=\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20jsDocSpacesRemoved\x20=\x20nonSpaceIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(jsDocStyleComment\x20&&\x20line.charAt(nonSpaceIndex)\x20==\x20\x27*\x27)\x20{\x20//\x20remove\x20leading\x20*\x20in\x20case\x20of\x20jsDocComment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20startIndex\x20=\x20nonSpaceIndex\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nonSpaceIndex\x20=\x20Comment.consumeLeadingSpace(line,\x20startIndex,\x20jsDocLineSpaceToRemove);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nonSpaceIndex\x20!=\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jsDocSpacesRemoved\x20=\x20nonSpaceIndex\x20-\x20startIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar:\x20nonSpaceIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar:\x20line.charAt(line.length\x20-\x201)\x20==\x20\x22\x5cr\x22\x20?\x20line.length\x20-\x201\x20:\x20line.length,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jsDocSpacesRemoved:\x20jsDocSpacesRemoved\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20cleanJSDocComment(content:\x20string,\x20spacesToRemove?:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20docCommentLines:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20content\x20=\x20content.replace(\x22/**\x22,\x20\x22\x22);\x20//\x20remove\x20/**\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(content.length\x20>=\x202\x20&&\x20content.charAt(content.length\x20-\x201)\x20==\x20\x22/\x22\x20&&\x20content.charAt(content.length\x20-\x202)\x20==\x20\x22*\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20content\x20=\x20content.substring(0,\x20content.length\x20-\x202);\x20//\x20remove\x20last\x20*/\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lines\x20=\x20content.split(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inParamTag\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20l\x20=\x200;\x20l\x20<\x20lines.length;\x20l++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20line\x20=\x20lines[l];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cleanLinePos\x20=\x20Comment.cleanDocCommentLine(line,\x20true,\x20spacesToRemove);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!cleanLinePos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Whole\x20line\x20empty,\x20read\x20next\x20line\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20docCommentText\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevPos\x20=\x20cleanLinePos.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20line.indexOf(\x22@\x22,\x20cleanLinePos.minChar);\x200\x20<=\x20i\x20&&\x20i\x20<\x20cleanLinePos.limChar;\x20i\x20=\x20line.indexOf(\x22@\x22,\x20i\x20+\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20have\x20encoutered\x20@.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x20were\x20omitting\x20param\x20comment,\x20we\x20dont\x20have\x20to\x20do\x20anything\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20other\x20wise\x20the\x20content\x20of\x20the\x20text\x20till\x20@\x20tag\x20goes\x20as\x20doc\x20comment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wasInParamtag\x20=\x20inParamTag;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Parse\x20contents\x20next\x20to\x20@\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(line.indexOf(\x22param\x22,\x20i\x20+\x201)\x20==\x20i\x20+\x201\x20&&\x20Comment.isSpaceChar(line,\x20i\x20+\x206))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20It\x20is\x20param\x20tag.\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x20were\x20not\x20in\x20param\x20tag\x20earlier,\x20push\x20the\x20contents\x20from\x20prev\x20pos\x20of\x20the\x20tag\x20this\x20tag\x20start\x20as\x20docComment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!wasInParamtag)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20docCommentText\x20+=\x20line.substring(prevPos,\x20i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20New\x20start\x20of\x20contents\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevPos\x20=\x20i;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inParamTag\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(wasInParamtag)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Non\x20param\x20tag\x20start\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevPos\x20=\x20i;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inParamTag\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!inParamTag)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20docCommentText\x20+=\x20line.substring(prevPos,\x20cleanLinePos.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20line\x20to\x20comment\x20text\x20if\x20it\x20is\x20not\x20only\x20white\x20space\x20line\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newCleanPos\x20=\x20Comment.cleanDocCommentLine(docCommentText,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(newCleanPos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(spacesToRemove\x20==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20spacesToRemove\x20=\x20cleanLinePos.jsDocSpacesRemoved;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20docCommentLines.push(docCommentText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20docCommentLines.join(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20getDocCommentText(comments:\x20Comment[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20docCommentText:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20c\x20=\x200\x20;\x20c\x20<\x20comments.length;\x20c++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentText\x20=\x20comments[c].getDocCommentText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commentText\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20docCommentText.push(commentText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20docCommentText.join(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20getParameterDocCommentText(param:\x20string,\x20fncDocComments:\x20Comment[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fncDocComments.length\x20==\x200\x20||\x20!fncDocComments[0].isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20there\x20were\x20no\x20fnc\x20doc\x20comments\x20and\x20the\x20comment\x20is\x20not\x20block\x20comment\x20then\x20it\x20cannot\x20have\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20@param\x20comment\x20that\x20can\x20be\x20parsed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20fncDocComments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentContents\x20=\x20fncDocComments[i].content;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x20commentContents.indexOf(\x22@param\x22,\x200);\x200\x20<=\x20j;\x20j\x20=\x20commentContents.indexOf(\x22@param\x22,\x20j))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j\x20+=\x206;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!Comment.isSpaceChar(commentContents,\x20j))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20not\x20param\x20tag\x20but\x20a\x20tag\x20line\x20@paramxxxxx\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20param\x20tag.\x20Check\x20if\x20it\x20is\x20what\x20we\x20are\x20looking\x20for\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j\x20=\x20Comment.consumeLeadingSpace(commentContents,\x20j);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ignore\x20the\x20type\x20expression\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commentContents.charCodeAt(j)\x20==\x20LexCodeLC)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Consume\x20the\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20charCode\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20curlies\x20=\x201;\x20j\x20<\x20commentContents.length;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20charCode\x20=\x20commentContents.charCodeAt(j);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20{\x20character\x20means\x20we\x20need\x20to\x20find\x20another\x20}\x20to\x20match\x20the\x20found\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(charCode\x20==\x20LexCodeLC)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20curlies++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20}\x20char\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(charCode\x20==\x20LexCodeRC)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20curlies--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(curlies\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20do\x20not\x20have\x20any\x20more\x20}\x20to\x20match\x20the\x20type\x20expression\x20is\x20ignored\x20completely\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20there\x20are\x20more\x20{\x20to\x20be\x20matched\x20with\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Found\x20start\x20of\x20another\x20tag\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(charCode\x20==\x20LexCodeAtSign)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20End\x20of\x20the\x20comment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x20commentContents.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20End\x20of\x20the\x20tag,\x20go\x20onto\x20looking\x20for\x20next\x20tag\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(charCode\x20==\x20LexCodeAtSign)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j\x20=\x20Comment.consumeLeadingSpace(commentContents,\x20j\x20+\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Parameter\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(param\x20!=\x20commentContents.substr(j,\x20param.length)\x20||\x20!Comment.isSpaceChar(commentContents,\x20j\x20+\x20param.length))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20is\x20not\x20the\x20parameter\x20we\x20are\x20looking\x20for\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Found\x20the\x20parameter\x20we\x20were\x20looking\x20for\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j\x20=\x20Comment.consumeLeadingSpace(commentContents,\x20j\x20+\x20param.length);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endOfParam\x20=\x20commentContents.indexOf(\x22@\x22,\x20j);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramHelpString\x20=\x20commentContents.substring(j,\x20endOfParam\x20<\x200\x20?\x20commentContents.length\x20:\x20endOfParam);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Find\x20alignement\x20spaces\x20to\x20remove\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramSpacesToRemove:\x20number\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLineIndex\x20=\x20commentContents.substring(0,\x20j).lastIndexOf(\x22\x5cn\x22)\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(paramLineIndex\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(paramLineIndex\x20<\x20j\x20&&\x20commentContents.charAt(paramLineIndex\x20+\x201)\x20==\x20\x22\x5cr\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramLineIndex++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20startSpaceRemovalIndex\x20=\x20Comment.consumeLeadingSpace(commentContents,\x20paramLineIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(startSpaceRemovalIndex\x20!=\x20j\x20&&\x20commentContents.charAt(startSpaceRemovalIndex)\x20==\x20\x22*\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramSpacesToRemove\x20=\x20j\x20-\x20startSpaceRemovalIndex\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Clean\x20jsDocComment\x20and\x20return\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20Comment.cleanJSDocComment(paramHelpString,\x20paramSpacesToRemove);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20getDocCommentTextOfSignatures(signatures:\x20Signature[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20signatures.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signatureDocComment\x20=\x20TypeScript.Comment.getDocCommentText(signatures[i].declAST.getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signatureDocComment\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments.push(signatureDocComment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comments.join(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20DebuggerStatement\x20extends\x20Statement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(NodeType.Debugger);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(emitter:\x20Emitter,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingStart(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.writeLineToOutput(\x22debugger;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.recordSourceMappingEnd(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitParensAndCommentsInPlace(this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript.AstWalkerWithDetailCallback\x20{\x0a\x20\x20\x20\x20export\x20interface\x20AstWalkerDetailCallback\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20EmptyCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20EmptyExprCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TrueCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20FalseCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ThisCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20SuperCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20QStringCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20RegexCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NullCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ArrayLitCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ObjectLitCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20VoidCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20CommaCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20PosCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NegCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DeleteCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AwaitCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20InCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DotCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20FromCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20InstOfCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeofCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NumberLitCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NameCallback?\x20(pre,\x20identifierAst:\x20Identifier):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeRefCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20IndexCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20CallCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NewCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgAddCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgSubCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgDivCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgMulCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgModCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgAndCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgXorCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgOrCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgLshCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgRshCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgRs2Callback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20QMarkCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogOrCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogAndCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20OrCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20XorCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AndCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20EqCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NeCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20EqvCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NEqvCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LtCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LeCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20GtCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20GeCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20AddCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20SubCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20MulCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DivCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ModCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LshCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20RshCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20Rs2Callback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20NotCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogNotCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncPreCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DecPreCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncPostCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DecPostCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeAssertionCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20FuncDeclCallback?\x20(pre,\x20funcDecl:\x20FuncDecl):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20MemberCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20VarDeclCallback?\x20(pre,\x20varDecl:\x20VarDecl):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ArgDeclCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ReturnCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20BreakCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ContinueCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ThrowCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForInCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20IfCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20WhileCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DoWhileCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20BlockCallback?\x20(pre,\x20block:\x20Block):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20CaseCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20SwitchCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TryCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TryCatchCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20TryFinallyCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20FinallyCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20CatchCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ListCallback?\x20(pre,\x20astList:\x20ASTList):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ScriptCallback?\x20(pre,\x20script:\x20Script):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassDeclarationCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20InterfaceDeclarationCallback?\x20(pre,\x20interfaceDecl:\x20InterfaceDeclaration):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ModuleDeclarationCallback?\x20(pre,\x20moduleDecl:\x20ModuleDeclaration):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ImportDeclarationCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20WithCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LabelCallback?\x20(pre,\x20labelAST:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20LabeledStatementCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20EBStartCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20GotoEBCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20EndCodeCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20ErrorCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20CommentCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DebuggerCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20DefaultCallback?\x20(pre,\x20ast:\x20AST):\x20bool;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20walk(script:\x20Script,\x20callback:\x20AstWalkerDetailCallback):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20(cur:\x20AST,\x20parent:\x20AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20AstWalkerCallback(true,\x20cur,\x20callback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20post\x20=\x20(cur:\x20AST,\x20parent:\x20AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20AstWalkerCallback(false,\x20cur,\x20callback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20walker\x20=\x20TypeScript.getAstWalkerFactory().getWalker(pre,\x20post);\x0a\x20\x20\x20\x20\x20\x20\x20\x20walker.walk(script,\x20null);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20AstWalkerCallback(pre:\x20bool,\x20ast:\x20AST,\x20callback:\x20AstWalkerDetailCallback):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20See\x20if\x20the\x20Callback\x20needs\x20to\x20be\x20handled\x20using\x20specific\x20one\x20or\x20default\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20nodeType\x20=\x20ast.nodeType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20callbackString\x20=\x20(<any>NodeType)._map[nodeType]\x20+\x20\x22Callback\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callback[callbackString])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20callback[callbackString](pre,\x20ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callback.DefaultCallback)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20callback.DefaultCallback(pre,\x20ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20interface\x20IAstWalker\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20walk(ast:\x20AST,\x20parent:\x20AST):\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20options:\x20AstWalkOptions;\x0a\x20\x20\x20\x20\x20\x20\x20\x20state:\x20any;\x20//\x20user\x20state\x20object\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20AstWalkOptions\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20goChildren\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20goNextSibling\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reverseSiblings\x20=\x20false;\x20//\x20visit\x20siblings\x20in\x20reverse\x20execution\x20order\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20stopWalk(stop:bool\x20=\x20true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.goChildren\x20=\x20!stop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.goNextSibling\x20=\x20!stop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IAstWalkCallback\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20AST;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IAstWalkChildren\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20(preAst:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20class\x20AstWalker\x20implements\x20IAstWalker\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20private\x20childrenWalkers:\x20IAstWalkChildren[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20private\x20pre:\x20IAstWalkCallback,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20private\x20post:\x20IAstWalkCallback,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20options:\x20AstWalkOptions,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20state:\x20any)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20walk(ast:\x20AST,\x20parent:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preAst\x20=\x20this.pre(ast,\x20parent,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst\x20===\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.options.goChildren)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svGoSib\x20=\x20this.options.goNextSibling;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.options.goNextSibling\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Call\x20the\x20\x22walkChildren\x22\x20function\x20corresponding\x20to\x20\x22nodeType\x22.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[ast.nodeType](ast,\x20parent,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.options.goNextSibling\x20=\x20svGoSib;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20go\x20only\x20applies\x20to\x20children\x20of\x20node\x20issuing\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.options.goChildren\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.post)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20postAst\x20=\x20this.post(preAst,\x20parent,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(postAst\x20===\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postAst\x20=\x20preAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20postAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20preAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20AstWalkerFactory\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20childrenWalkers:\x20IAstWalkChildren[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.initChildrenWalkers();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20walk(ast:\x20AST,\x20pre:\x20IAstWalkCallback,\x20post?:\x20IAstWalkCallback,\x20options?:\x20AstWalkOptions,\x20state?:\x20any):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getWalker(pre,\x20post,\x20options,\x20state).walk(ast,\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getWalker(pre:\x20IAstWalkCallback,\x20post?:\x20IAstWalkCallback,\x20options?:\x20AstWalkOptions,\x20state?:\x20any):\x20IAstWalker\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getSlowWalker(pre,\x20post,\x20options,\x20state);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getSlowWalker(pre:\x20IAstWalkCallback,\x20post?:\x20IAstWalkCallback,\x20options?:\x20AstWalkOptions,\x20state?:\x20any):\x20IAstWalker\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!options)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20options\x20=\x20new\x20AstWalkOptions();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20AstWalker(this.childrenWalkers,\x20pre,\x20post,\x20options,\x20state);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20initChildrenWalkers():\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.None]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Empty]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.EmptyExpr]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.True]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.False]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.This]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Super]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.QString]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Regex]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Null]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ArrayLit]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ObjectLit]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Void]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Comma]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Pos]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Neg]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Delete]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Await]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.In]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Dot]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.From]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Is]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.InstOf]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Typeof]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.NumberLit]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Name]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.TypeRef]\x20=\x20ChildrenWalkers.walkTypeReferenceChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Index]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Call]\x20=\x20ChildrenWalkers.walkCallExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.New]\x20=\x20ChildrenWalkers.walkCallExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Asg]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgAdd]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgSub]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgDiv]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgMul]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgMod]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgAnd]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgXor]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgOr]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgLsh]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgRsh]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.AsgRs2]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ConditionalExpression]\x20=\x20ChildrenWalkers.walkTrinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.LogOr]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.LogAnd]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Or]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Xor]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.And]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Eq]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Ne]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Eqv]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.NEqv]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Lt]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Le]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Gt]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Ge]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Add]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Sub]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Mul]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Div]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Mod]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Lsh]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Rsh]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Rs2]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Not]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.LogNot]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.IncPre]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.DecPre]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.IncPost]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.DecPost]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.TypeAssertion]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.FuncDecl]\x20=\x20ChildrenWalkers.walkFuncDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Member]\x20=\x20ChildrenWalkers.walkBinaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.VarDecl]\x20=\x20ChildrenWalkers.walkBoundDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ArgDecl]\x20=\x20ChildrenWalkers.walkBoundDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Return]\x20=\x20ChildrenWalkers.walkReturnStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Break]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Continue]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Throw]\x20=\x20ChildrenWalkers.walkUnaryExpressionChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.For]\x20=\x20ChildrenWalkers.walkForStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ForIn]\x20=\x20ChildrenWalkers.walkForInStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.If]\x20=\x20ChildrenWalkers.walkIfStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.While]\x20=\x20ChildrenWalkers.walkWhileStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.DoWhile]\x20=\x20ChildrenWalkers.walkDoWhileStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Block]\x20=\x20ChildrenWalkers.walkBlockChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Case]\x20=\x20ChildrenWalkers.walkCaseStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Switch]\x20=\x20ChildrenWalkers.walkSwitchStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Try]\x20=\x20ChildrenWalkers.walkTryChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.TryCatch]\x20=\x20ChildrenWalkers.walkTryCatchChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.TryFinally]\x20=\x20ChildrenWalkers.walkTryFinallyChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Finally]\x20=\x20ChildrenWalkers.walkFinallyChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Catch]\x20=\x20ChildrenWalkers.walkCatchChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.List]\x20=\x20ChildrenWalkers.walkListChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Script]\x20=\x20ChildrenWalkers.walkScriptChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ClassDeclaration]\x20=\x20ChildrenWalkers.walkClassDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.InterfaceDeclaration]\x20=\x20ChildrenWalkers.walkTypeDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ModuleDeclaration]\x20=\x20ChildrenWalkers.walkModuleDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.ImportDeclaration]\x20=\x20ChildrenWalkers.walkImportDeclChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.With]\x20=\x20ChildrenWalkers.walkWithStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Label]\x20=\x20ChildrenWalkers.walkLabelChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.LabeledStatement]\x20=\x20ChildrenWalkers.walkLabeledStatementChildren;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.EBStart]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.GotoEB]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.EndCode]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Error]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Comment]\x20=\x20ChildrenWalkers.walkNone;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.childrenWalkers[NodeType.Debugger]\x20=\x20ChildrenWalkers.walkNone;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20the\x20code\x20is\x20up\x20to\x20date\x20with\x20the\x20enum\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20e\x20in\x20(<any>NodeType)._map)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<any>this.childrenWalkers)[e]\x20===\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22initWalkers\x20function\x20is\x20not\x20up\x20to\x20date\x20with\x20enum\x20content!\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20var\x20globalAstWalkerFactory:\x20AstWalkerFactory;\x0a\x0a\x20\x20\x20\x20export\x20function\x20getAstWalkerFactory():\x20AstWalkerFactory\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!globalAstWalkerFactory)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20globalAstWalkerFactory\x20=\x20new\x20AstWalkerFactory();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20globalAstWalkerFactory;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20module\x20ChildrenWalkers\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkNone(preAst:\x20ASTList,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Nothing\x20to\x20do\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkListChildren(preAst:\x20ASTList,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20preAst.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.reverseSiblings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20len\x20-\x201;\x20i\x20>=\x200;\x20i--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.members[i]\x20=\x20walker.walk(preAst.members[i],\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.members[i]\x20=\x20walker.walk(preAst.members[i],\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkUnaryExpressionChildren(preAst:\x20UnaryExpression,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.castTerm)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.castTerm\x20=\x20walker.walk(preAst.castTerm,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand\x20=\x20walker.walk(preAst.operand,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkBinaryExpressionChildren(preAst:\x20BinaryExpression,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.reverseSiblings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand2\x20=\x20walker.walk(preAst.operand2,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.operand1)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand1\x20=\x20walker.walk(preAst.operand1,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand1\x20=\x20walker.walk(preAst.operand1,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.operand2)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand2\x20=\x20walker.walk(preAst.operand2,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTypeReferenceChildren(preAst:\x20TypeReference,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.term)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.term\x20=\x20walker.walk(preAst.term,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkCallExpressionChildren(preAst:\x20CallExpression,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!walker.options.reverseSiblings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.target\x20=\x20walker.walk(preAst.target,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.arguments\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.arguments\x20=\x20<ASTList>\x20walker.walk(preAst.arguments,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((walker.options.reverseSiblings)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.target\x20=\x20walker.walk(preAst.target,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTrinaryExpressionChildren(preAst:\x20ConditionalExpression,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand1\x20=\x20walker.walk(preAst.operand1,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand2\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand2\x20=\x20walker.walk(preAst.operand2,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.operand3\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.operand3\x20=\x20walker.walk(preAst.operand3,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkFuncDeclChildren(preAst:\x20FuncDecl,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.name\x20=\x20<Identifier>walker.walk(preAst.name,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.arguments\x20&&\x20(preAst.arguments.members.length\x20>\x200)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.arguments\x20=\x20<ASTList>walker.walk(preAst.arguments,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.returnTypeAnnotation\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.returnTypeAnnotation\x20=\x20walker.walk(preAst.returnTypeAnnotation,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.bod\x20&&\x20(preAst.bod.members.length\x20>\x200)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.bod\x20=\x20<ASTList>walker.walk(preAst.bod,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkBoundDeclChildren(preAst:\x20BoundDecl,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.id)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.id\x20=\x20<Identifier>walker.walk(preAst.id,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.init\x20=\x20walker.walk(preAst.init,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.typeExpr)\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.typeExpr\x20=\x20walker.walk(preAst.typeExpr,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkReturnStatementChildren(preAst:\x20ReturnStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.returnExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.returnExpression\x20=\x20walker.walk(preAst.returnExpression,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkForStatementChildren(preAst:\x20ForStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.init\x20=\x20walker.walk(preAst.init,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.cond\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.cond\x20=\x20walker.walk(preAst.cond,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.incr\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.incr\x20=\x20walker.walk(preAst.incr,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkForInStatementChildren(preAst:\x20ForInStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.lval\x20=\x20walker.walk(preAst.lval,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.obj\x20=\x20walker.walk(preAst.obj,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkIfStatementChildren(preAst:\x20IfStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.cond\x20=\x20walker.walk(preAst.cond,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.thenBod\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.thenBod\x20=\x20walker.walk(preAst.thenBod,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.elseBod\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.elseBod\x20=\x20walker.walk(preAst.elseBod,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkWhileStatementChildren(preAst:\x20WhileStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.cond\x20=\x20walker.walk(preAst.cond,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkDoWhileStatementChildren(preAst:\x20DoWhileStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.cond\x20=\x20walker.walk(preAst.cond,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20(walker.options.goNextSibling))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkBlockChildren(preAst:\x20Block,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.statements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.statements\x20=\x20<ASTList>walker.walk(preAst.statements,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkCaseStatementChildren(preAst:\x20CaseStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.expr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.expr\x20=\x20walker.walk(preAst.expr,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20<ASTList>walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkSwitchStatementChildren(preAst:\x20SwitchStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.val)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.val\x20=\x20walker.walk(preAst.val,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.caseList)\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.caseList\x20=\x20<ASTList>walker.walk(preAst.caseList,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTryChildren(preAst:\x20Try,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTryCatchChildren(preAst:\x20TryCatch,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.tryNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.tryNode\x20=\x20<Try>walker.walk(preAst.tryNode,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.catchNode)\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.catchNode\x20=\x20<Catch>walker.walk(preAst.catchNode,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTryFinallyChildren(preAst:\x20TryFinally,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.tryNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.tryNode\x20=\x20walker.walk(preAst.tryNode,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.finallyNode\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.finallyNode\x20=\x20<Finally>walker.walk(preAst.finallyNode,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkFinallyChildren(preAst:\x20Finally,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkCatchChildren(preAst:\x20Catch,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.param)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.param\x20=\x20<VarDecl>walker.walk(preAst.param,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((preAst.body)\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkRecordChildren(preAst:\x20NamedDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.name\x20=\x20<Identifier>walker.walk(preAst.name,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling\x20&&\x20preAst.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.members\x20=\x20<ASTList>walker.walk(preAst.members,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkNamedTypeChildren(preAst:\x20TypeDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walkRecordChildren(preAst,\x20parent,\x20walker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkClassDeclChildren(preAst:\x20ClassDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walkNamedTypeChildren(preAst,\x20parent,\x20walker);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling\x20&&\x20preAst.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.extendsList\x20=\x20<ASTList>walker.walk(preAst.extendsList,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling\x20&&\x20preAst.implementsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.implementsList\x20=\x20<ASTList>walker.walk(preAst.implementsList,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkScriptChildren(preAst:\x20Script,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.bod\x20=\x20<ASTList>walker.walk(preAst.bod,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkTypeDeclChildren(preAst:\x20InterfaceDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walkNamedTypeChildren(preAst,\x20parent,\x20walker);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20walked\x20arguments\x20as\x20part\x20of\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling\x20&&\x20preAst.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.extendsList\x20=\x20<ASTList>walker.walk(preAst.extendsList,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling\x20&&\x20preAst.implementsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.implementsList\x20=\x20<ASTList>walker.walk(preAst.implementsList,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkModuleDeclChildren(preAst:\x20ModuleDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walkRecordChildren(preAst,\x20parent,\x20walker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkImportDeclChildren(preAst:\x20ImportDeclaration,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.id)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.id\x20=\x20<Identifier>walker.walk(preAst.id,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.alias)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.alias\x20=\x20walker.walk(preAst.alias,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkWithStatementChildren(preAst:\x20WithStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.expr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.expr\x20=\x20walker.walk(preAst.expr,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preAst.body\x20&&\x20walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.body\x20=\x20walker.walk(preAst.body,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkLabelChildren(preAst:\x20Label,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20Walk\x20\x22id\x22?\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20walkLabeledStatementChildren(preAst:\x20LabeledStatement,\x20parent:\x20AST,\x20walker:\x20IAstWalker):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.labels\x20=\x20<ASTList>walker.walk(preAst.labels,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(walker.options.goNextSibling)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAst.stmt\x20=\x20walker.walk(preAst.stmt,\x20preAst);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20class\x20Base64Format\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20encodedValues\x20=\x20\x27ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20encode(inValue:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inValue\x20<\x2064)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20encodedValues.charAt(inValue);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20TypeError(inValue\x20+\x20\x22:\x20not\x20a\x2064\x20based\x20value\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20decodeChar(inChar:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inChar.length\x20===\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20encodedValues.indexOf(inChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20TypeError(\x27\x22\x27\x20+\x20inChar\x20+\x20\x27\x22\x20must\x20have\x20length\x201\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Base64VLQFormat\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20encode(inValue:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20a\x20new\x20least\x20significant\x20bit\x20that\x20has\x20the\x20sign\x20of\x20the\x20value.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20negative\x20number\x20the\x20least\x20significant\x20bit\x20that\x20gets\x20added\x20to\x20the\x20number\x20has\x20value\x201\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20else\x20least\x20significant\x20bit\x20value\x20that\x20gets\x20added\x20is\x200\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20eg.\x20-1\x20changes\x20to\x20binary\x20:\x2001\x20[1]\x20=>\x203\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20+1\x20changes\x20to\x20binary\x20:\x2001\x20[0]\x20=>\x202\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inValue\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inValue\x20=\x20((-inValue)\x20<<\x201)\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inValue\x20=\x20inValue\x20<<\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Encode\x205\x20bits\x20at\x20a\x20time\x20starting\x20from\x20least\x20significant\x20bits\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20encodedStr\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20do\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentDigit\x20=\x20inValue\x20&\x2031;\x20//\x2011111\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inValue\x20=\x20inValue\x20>>\x205;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inValue\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20There\x20are\x20still\x20more\x20digits\x20to\x20decode,\x20set\x20the\x20msb\x20(6th\x20bit)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentDigit\x20=\x20currentDigit\x20|\x2032;\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20encodedStr\x20=\x20encodedStr\x20+\x20Base64Format.encode(currentDigit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20while\x20(inValue\x20>\x200);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20encodedStr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20decode(inString:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20negative\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20shift\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20inString.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20byte\x20=\x20Base64Format.decodeChar(inString[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20===\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Sign\x20bit\x20appears\x20in\x20the\x20LSBit\x20of\x20the\x20first\x20value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((byte\x20&\x201)\x20===\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20negative\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20(byte\x20>>\x201)\x20&\x2015;\x20//\x201111x\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result\x20|\x20((byte\x20&\x2031)\x20<<\x20shift);\x20//\x2011111\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20shift\x20+=\x20(i\x20==\x200)\x20?\x204\x20:\x205;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((byte\x20&\x2032)\x20===\x2032)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Continue\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20value:\x20negative\x20?\x20-(result)\x20:\x20result,\x20rest:\x20inString.substr(i\x20+\x201)\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x27Base64\x20value\x20\x22\x27\x20+\x20inString\x20+\x20\x27\x22\x20finished\x20with\x20a\x20continuation\x20bit\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20Binder\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20checker:\x20TypeChecker)\x20{\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveBaseTypeLinks(typeLinks:\x20TypeLink[],\x20scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20extendsList:\x20Type[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLinks)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList\x20=\x20new\x20Type[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20typeLinks.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList[i]\x20=\x20this.checker.resolveBaseTypeLink(typeLinks[i],\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20extendsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveBases(scope:\x20SymbolScope,\x20type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.extendsList\x20=\x20this.resolveBaseTypeLinks(type.extendsTypeLinks,\x20scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200,\x20len\x20=\x20type.extendsList.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20derivedIsClass\x20=\x20type.isClassInstance();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseIsClass\x20=\x20type.extendsList[i].isClassInstance();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.extendsList[i]\x20!=\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseRef\x20=\x20type.extendsTypeLinks[i].ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(derivedIsClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!baseIsClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22A\x20class\x20may\x20only\x20extend\x20other\x20classes,\x20\x22\x20+\x20type.extendsList[i].symbol.fullName()\x20+\x20\x22\x20is\x20not\x20a\x20class.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseIsClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22An\x20interface\x20may\x20only\x20extend\x20other\x20interfaces,\x20\x22\x20+\x20type.extendsList[i].symbol.fullName()\x20+\x20\x22\x20is\x20a\x20class.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.implementsList\x20=\x20this.resolveBaseTypeLinks(type.implementsTypeLinks,\x20scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.implementsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200,\x20len\x20=\x20type.implementsList.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20iface\x20=\x20type.implementsList[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseRef\x20=\x20type.implementsTypeLinks[i].ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(iface.isClassInstance())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(derivedIsClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22A\x20class\x20may\x20only\x20implement\x20an\x20interface;\x20\x22\x20+\x20iface.symbol.fullName()\x20+\x20\x22\x20is\x20a\x20class.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveSignatureGroup(signatureGroup:\x20SignatureGroup,\x20scope:\x20SymbolScope,\x20instanceType:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20supplyVar\x20=\x20!(signatureGroup.hasImplementation);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20signatureGroup.signatures.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20signatureGroup.signatures[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.resolveTypeLink(scope,\x20signature.returnType,\x20supplyVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLen\x20=\x20signature.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20paramLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bindSymbol(scope,\x20signature.parameters[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20that\x20last\x20parameter\x20has\x20an\x20array\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastParam\x20=\x20<ParameterSymbol>signature.parameters[paramLen\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lastParam.argsOffset\x20=\x20paramLen\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!lastParam.getType().isArray())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleErrorFromSym(lastParam,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22...\x20parameter\x20must\x20have\x20array\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lastParam.parameter.typeLink.type\x20=\x20this.checker.makeArrayType(lastParam.parameter.typeLink.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bindType(scope:\x20SymbolScope,\x20type:\x20Type,\x20instanceType:\x20Type):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bindType(scope,\x20instanceType,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.hasMembers())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20type.members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientMembers\x20=\x20type.ambientMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeMembers\x20=\x20type.getAllEnclosedTypes();\x20//\x20REVIEW:\x20Should\x20only\x20be\x20getting\x20exported\x20types?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTypeMembers\x20=\x20type.getAllAmbientEnclosedTypes();\x20//\x20REVIEW:\x20Should\x20only\x20be\x20getting\x20exported\x20types?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberScope\x20=\x20new\x20SymbolTableScope(members,\x20ambientMembers,\x20typeMembers,\x20ambientTypeMembers,\x20type.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20agg\x20=\x20new\x20SymbolAggregateScope(type.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevCurrentModDecl\x20=\x20this.checker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevBindStatus\x20=\x20this.checker.inBind;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20agg.addParentScope(memberScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20agg.addParentScope(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20<ModuleDeclaration>type.symbol.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.inBind\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bind(agg,\x20type.members.allMembers);\x20//\x20REVIEW:\x20Should\x20only\x20be\x20getting\x20exported\x20types?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bind(agg,\x20typeMembers.allMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bind(agg,\x20ambientMembers.allMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTypeMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bind(agg,\x20ambientTypeMembers.allMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20prevCurrentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.inBind\x20=\x20prevBindStatus;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.extendsTypeLinks)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveBases(scope,\x20type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveSignatureGroup(type.construct,\x20scope,\x20instanceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveSignatureGroup(type.call,\x20scope,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveSignatureGroup(type.index,\x20scope,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bindType(scope,\x20type.elementType,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bindSymbol(scope:\x20SymbolScope,\x20symbol:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol.bound)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevLocationInfo\x20=\x20this.checker.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.checker.units)\x20&&\x20(symbol.unitIndex\x20>=\x200)\x20&&\x20(symbol.unitIndex\x20<\x20this.checker.units.length))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20this.checker.units[symbol.unitIndex];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(symbol.kind())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20SymbolKind.Type:\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.flags\x20&\x20SymbolFlags.Bound)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol\x20=\x20<TypeSymbol>symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Bound;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Since\x20type\x20collection\x20happens\x20out\x20of\x20order,\x20a\x20dynamic\x20module\x20referenced\x20by\x20an\x20import\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20may\x20not\x20yet\x20be\x20in\x20scope\x20when\x20the\x20import\x20symbol\x20is\x20created.\x20\x20In\x20that\x20case,\x20we\x20need\x20to\x20search\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20out\x20the\x20module\x20symbol\x20now\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note\x20that\x20we\x27ll\x20also\x20want\x20to\x20do\x20this\x20in\x20resolveTypeMembers,\x20in\x20case\x20the\x20symbol\x20is\x20set\x20outside\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20context\x20of\x20a\x20given\x20module\x20\x20(E.g.,\x20an\x20outer\x20import\x20statement)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.aliasLink\x20&&\x20!typeSymbol.type\x20&&\x20typeSymbol.aliasLink.alias.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modPath\x20=\x20(<Identifier>typeSymbol.aliasLink.alias).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modSym\x20=\x20this.checker.findSymbolForDynamicModule(modPath,\x20this.checker.locationInfo.filename,\x20(id)\x20=>\x20scope.find(id,\x20false,\x20true));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.type\x20=\x20modSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.type\x20&&\x20typeSymbol.type\x20!=\x20this.checker.gloModType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bindType(scope,\x20typeSymbol.type,\x20typeSymbol.instanceType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20bind\x20expansions\x20on\x20the\x20parent\x20type\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.type.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20typeSymbol.expansions.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bindType(scope,\x20typeSymbol.expansions[i],\x20typeSymbol.instanceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20SymbolKind.Field:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.resolveTypeLink(scope,\x20(<FieldSymbol>symbol).field.typeLink,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20SymbolKind.Parameter:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.resolveTypeLink(scope,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ParameterSymbol>symbol).parameter.typeLink,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20prevLocationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.bound\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bind(scope:\x20SymbolScope,\x20table:\x20IHashTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table.map(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(key,\x20sym,\x20binder)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binder.bindSymbol(scope,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20DeclFileWriter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20onNewLine\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(private\x20declFile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20Write(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.onNewLine\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20WriteLine(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.onNewLine\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20Close()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20DeclarationEmitter\x20implements\x20AstWalkerWithDetailCallback.AstWalkerDetailCallback\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20declFile:\x20DeclFileWriter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20indenter\x20=\x20new\x20Indenter();\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20declarationContainerStack:\x20AST[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20isDottedModuleName:\x20bool[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20dottedModuleEmit:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20ignoreCallbackAst:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20singleDeclFile:\x20DeclFileWriter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20varListCount:\x20number\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getAstDeclarationContainer()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.declarationContainerStack[this.declarationContainerStack.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitDottedModuleName()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.isDottedModuleName.length\x20==\x200)\x20?\x20false\x20:\x20this.isDottedModuleName[this.isDottedModuleName.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20checker:\x20TypeChecker,\x20public\x20emitOptions:\x20EmitOptions,\x20public\x20errorReporter:\x20ErrorReporter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setDeclarationFile(file:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile\x20=\x20new\x20DeclFileWriter(file);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20Close()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Closing\x20files\x20could\x20result\x20in\x20exceptions,\x20report\x20them\x20if\x20they\x20occur\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitDeclarations(script:\x20TypeScript.Script):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20AstWalkerWithDetailCallback.walk(script,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getIndentString(declIndent?\x20=\x20false)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.minWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.indenter.getIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(this.getIndentString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20canEmitSignature(declFlags:\x20DeclFlags,\x20canEmitGlobalAmbientDecl?:\x20bool\x20=\x20true,\x20useDeclarationContainerTop?:\x20bool\x20=\x20true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(useDeclarationContainerTop)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20this.getAstDeclarationContainer();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20this.declarationContainerStack[this.declarationContainerStack.length\x20-\x202];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(container.nodeType\x20==\x20NodeType.ModuleDeclaration\x20&&\x20!hasFlag(declFlags,\x20DeclFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!canEmitGlobalAmbientDecl\x20&&\x20container.nodeType\x20==\x20NodeType.Script\x20&&\x20hasFlag(declFlags,\x20DeclFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20canEmitPrePostAstSignature(declFlags:\x20DeclFlags,\x20astWithPrePostCallback:\x20AST,\x20preCallback:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ignoreCallbackAst)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(this.ignoreCallbackAst\x20!=\x20astWithPrePostCallback,\x20\x22Ignore\x20Callback\x20AST\x20mismatch\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ignoreCallbackAst\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(preCallback\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!this.canEmitSignature(declFlags,\x20true,\x20preCallback))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ignoreCallbackAst\x20=\x20astWithPrePostCallback;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getDeclFlagsString(declFlags:\x20DeclFlags,\x20typeString:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20this.getIndentString();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Accessor\x20strings\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorString\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(declFlags,\x20DeclFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorString\x20=\x20\x22get\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(hasFlag(declFlags,\x20DeclFlags.SetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorString\x20=\x20\x22set\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Emit\x20export\x20only\x20for\x20global\x20export\x20statements.\x20The\x20container\x20for\x20this\x20would\x20be\x20dynamic\x20module\x20which\x20is\x20whole\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container\x20=\x20this.getAstDeclarationContainer();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(container.nodeType\x20==\x20NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag((<ModuleDeclaration>container).modFlags,\x20ModuleFlags.IsWholeFile)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(declFlags,\x20DeclFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22export\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Static/public/private/global\x20declare\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(declFlags,\x20DeclFlags.LocalStatic)\x20||\x20hasFlag(declFlags,\x20DeclFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22static\x20\x22\x20+\x20accessorString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(declFlags,\x20DeclFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22private\x20\x22\x20+\x20accessorString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(hasFlag(declFlags,\x20DeclFlags.Public))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22public\x20\x22\x20+\x20accessorString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorString\x20==\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20typeString\x20+\x20\x22\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20accessorString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitDeclFlags(declFlags:\x20DeclFlags,\x20typeString:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(this.getDeclFlagsString(declFlags,\x20typeString));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20canEmitTypeAnnotationSignature(declFlag:\x20DeclFlags\x20=\x20DeclFlags.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Private\x20declaration,\x20shouldnt\x20emit\x20type\x20any\x20time.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20!hasFlag(declFlag,\x20DeclFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20pushDeclarationContainer(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declarationContainerStack.push(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20popDeclarationContainer(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(ast\x20!=\x20this.getAstDeclarationContainer(),\x20\x27Declaration\x20container\x20mismatch\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declarationContainerStack.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitTypeNamesMember(memberName:\x20MemberName,\x20emitIndent?\x20:\x20bool\x20=\x20false)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberName.prefix\x20==\x20\x22{\x20\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitIndent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitIndent\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(memberName.prefix\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitIndent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(memberName.prefix);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitIndent\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberName.isString())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitIndent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write((<MemberNameString>memberName).text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ar\x20=\x20<MemberNameArray>memberName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20index\x20=\x200;\x20index\x20<\x20ar.entries.length;\x20index++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeNamesMember(ar.entries[index],\x20emitIndent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ar.delim\x20==\x20\x22;\x20\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberName.suffix\x20==\x20\x22}\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(memberName.suffix);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(memberName.suffix);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitTypeSignature(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20containingScope:\x20SymbolScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declarationContainerAst\x20=\x20this.getAstDeclarationContainer();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(declarationContainerAst.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ModuleDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.InterfaceDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declarationContainerAst.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containingScope\x20=\x20declarationContainerAst.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Script:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>declarationContainerAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(script.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containingScope\x20=\x20script.bod.enclosingScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ClassDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declarationContainerAst.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containingScope\x20=\x20declarationContainerAst.type.instanceType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22Unknown\x20containing\x20scope\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeNameMembers\x20=\x20type.getScopedTypeNameEx(containingScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeNamesMember(typeNameMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitComment(comment:\x20Comment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text\x20=\x20comment.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declFile.onNewLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!comment.isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(text[0]);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x201;\x20i\x20<\x20text.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(text[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comment.endsLine\x20||\x20!comment.isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitDeclarationComments(ast:\x20AST,\x20endLine?:\x20bool);\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitDeclarationComments(symbol:\x20Symbol,\x20endLine?:\x20bool);\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitDeclarationComments(astOrSymbol,\x20endLine\x20=\x20true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitOptions.emitComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declComments\x20=\x20<Comment[]>astOrSymbol.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declComments.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20declComments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitComment(declComments[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(endLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.declFile.onNewLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declFile.onNewLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20VarDeclCallback(pre:\x20bool,\x20varDecl:\x20VarDecl):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre\x20&&\x20this.canEmitSignature(ToDeclFlags(varDecl.varFlags),\x20false))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceMember\x20=\x20(this.getAstDeclarationContainer().nodeType\x20==\x20NodeType.InterfaceDeclaration);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!interfaceMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x20is\x20var\x20list\x20of\x20form\x20var\x20a,\x20b,\x20c\x20=\x20emit\x20it\x20only\x20if\x20count\x20>\x200\x20-\x20which\x20will\x20be\x20when\x20emitting\x20first\x20var\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x20is\x20var\x20list\x20of\x20form\x20\x20var\x20a\x20=\x20varList\x20count\x20will\x20be\x200\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(varDecl.varFlags),\x20\x22var\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCount\x20=\x20-this.varListCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(varDecl.id.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(varDecl.id.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.id.flags,\x20ASTFlags.OptionalName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22?\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr\x20&&\x20varDecl.typeExpr.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20varDecl.typeExpr.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(varDecl.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20(<FieldSymbol>varDecl.sym).getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Dont\x20emit\x20inferred\x20any\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20&&\x20this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.varFlags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20emitted\x20one\x20var\x20decl\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount\x20>\x200)\x20{\x20this.varListCount--;\x20}\x20else\x20if\x20(this.varListCount\x20<\x200)\x20{\x20this.varListCount++;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Write\x20;\x20or\x20,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20BlockCallback(pre:\x20bool,\x20block:\x20Block):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!block.isStatementBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCount\x20=\x20block.statements.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitArgDecl(argDecl:\x20ArgDecl,\x20funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(argDecl,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(argDecl.id.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argDecl.isOptionalArg())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22?\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((argDecl.typeExpr\x20||\x20argDecl.type\x20!=\x20this.checker.anyType)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(argDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20FuncDeclCallback(pre:\x20bool,\x20funcDecl:\x20FuncDecl):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.emitPropertyAccessorSignature(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isInterfaceMember\x20=\x20(this.getAstDeclarationContainer().nodeType\x20==\x20NodeType.InterfaceDeclaration);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type.construct\x20&&\x20funcDecl.type.construct.signatures.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type.call\x20&&\x20funcDecl.type.call.signatures.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20means\x20its\x20implementation\x20of\x20overload\x20signature.\x20do\x20not\x20emit\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!isInterfaceMember\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Private)\x20&&\x20funcDecl.type.call\x20&&\x20funcDecl.type.call.signatures.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Print\x20only\x20first\x20overload\x20of\x20private\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signatures\x20=\x20funcDecl.type.call.signatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20firstSignature\x20=\x20signatures[0].declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(firstSignature.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20a\x20implementation,\x20use\x20next\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20firstSignature\x20=\x20signatures[1].declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(firstSignature\x20!=\x20funcDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitSignature(ToDeclFlags(funcDecl.fncFlags),\x20false))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20funcDecl.getNameText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isInterfaceMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(funcDecl.fncFlags),\x20\x22function\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22new\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!funcDecl.isCallMember()\x20&&\x20!funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.name.flags,\x20ASTFlags.OptionalName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22?\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22[\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argsLen\x20=\x20funcDecl.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.variableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argsLen--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20argsLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argDecl\x20=\x20<ArgDecl>funcDecl.arguments.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitArgDecl(argDecl,\x20funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20<\x20(argsLen\x20-\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.variableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastArg\x20=\x20<ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments.members.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22,\x20...\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22...\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitArgDecl(lastArg,\x20funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22]\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isConstructor\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(funcDecl.returnTypeAnnotation\x20||\x20funcDecl.signature.returnType.type\x20!=\x20this.checker.anyType)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.fncFlags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(funcDecl.signature.returnType.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22;\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitBaseList(bases:\x20ASTList,\x20qual:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases\x20&&\x20(bases.members.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22\x20\x22\x20+\x20qual\x20+\x20\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20basesLen\x20=\x20bases.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20basesLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseExpr\x20=\x20bases.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseSymbol\x20=\x20baseExpr.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseType\x20=\x20baseExpr.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(baseType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitPropertyAccessorSignature(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorSymbol\x20=\x20<FieldSymbol>funcDecl.accessorSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSymbol.getter\x20&&\x20accessorSymbol.getter.declAST\x20!=\x20funcDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Setter\x20is\x20being\x20used\x20to\x20emit\x20the\x20type\x20info.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(accessorSymbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(accessorSymbol.flags),\x20\x22var\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(funcDecl.name.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propertyType\x20=\x20accessorSymbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.canEmitTypeAnnotationSignature(ToDeclFlags(accessorSymbol.flags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22\x20:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(propertyType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22;\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitClassMembersFromConstructorDefinition(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argsLen\x20=\x20funcDecl.arguments.members.length;\x20if\x20(funcDecl.variableArgList)\x20{\x20argsLen--;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20argsLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argDecl\x20=\x20<ArgDecl>funcDecl.arguments.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(argDecl.varFlags,\x20VarFlags.Property))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(argDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(argDecl.varFlags),\x20\x22var\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(argDecl.id.text);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argDecl.typeExpr\x20&&\x20this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.varFlags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitTypeSignature(argDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ClassDeclarationCallback(pre:\x20bool,\x20classDecl:\x20ClassDeclaration):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.varFlags),\x20classDecl,\x20pre))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20className\x20=\x20classDecl.name.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(classDecl.varFlags),\x20\x22class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitBaseList(classDecl.extendsList,\x20\x22extends\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitBaseList(classDecl.implementsList,\x20\x22implements\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x20{\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclarationContainer(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classDecl.constructorDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclarationContainer(classDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20InterfaceDeclarationCallback(pre:\x20bool,\x20interfaceDecl:\x20InterfaceDeclaration):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.varFlags),\x20interfaceDecl,\x20pre))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceName\x20=\x20interfaceDecl.name.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(interfaceDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(interfaceDecl.varFlags),\x20\x22interface\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(interfaceName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitBaseList(interfaceDecl.extendsList,\x20\x22extends\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x20{\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclarationContainer(interfaceDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclarationContainer(interfaceDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ImportDeclarationCallback(pre:\x20bool,\x20importDecl:\x20ImportDeclaration):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<Script>this.declarationContainerStack[0]).isExternallyVisibleSymbol(importDecl.id.sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(importDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(\x22import\x20\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(importDecl.id.text\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(importDecl.isDynamicImport)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22module\x20(\x22\x20+\x20importDecl.getAliasName()\x20+\x20\x22);\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(importDecl.getAliasName()\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitEnumSignature(moduleDecl:\x20ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitSignature(ToDeclFlags(moduleDecl.modFlags)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclFlags(ToDeclFlags(moduleDecl.modFlags),\x20\x22enum\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(moduleDecl.name.text\x20+\x20\x22\x20{\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersLen\x20=\x20moduleDecl.members.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x201;\x20j\x20<\x20membersLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberDecl:\x20AST\x20=\x20moduleDecl.members.members[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberDecl.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(memberDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine((<VarDecl>memberDecl).id.text\x20+\x20\x22,\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(memberDecl.nodeType\x20!=\x20NodeType.Asg,\x20\x22We\x20want\x20to\x20catch\x20this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22}\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ModuleDeclarationCallback(pre:\x20bool,\x20moduleDecl:\x20ModuleDeclaration):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(moduleDecl.modFlags,\x20ModuleFlags.IsWholeFile))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20dynamic\x20modules\x20and\x20we\x20are\x20going\x20to\x20outputing\x20single\x20file,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20we\x20need\x20to\x20change\x20the\x20declFile\x20because\x20dynamic\x20modules\x20are\x20always\x20emitted\x20to\x20their\x20corresponding\x20.d.ts\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(moduleDecl.modFlags,\x20ModuleFlags.IsDynamic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitOptions.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.singleDeclFile\x20=\x20this.declFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(this.indenter.indentAmt\x20==\x200,\x20\x22Indent\x20has\x20to\x20be\x200\x20when\x20outputing\x20new\x20file\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20new\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declareFileName\x20=\x20this.emitOptions.mapOutputFileName(stripQuotes(moduleDecl.name.sym.name),\x20TypeScriptCompiler.mapToDTSFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useUTF8InOutputfile\x20=\x20moduleDecl.containsUnicodeChar\x20||\x20(this.emitOptions.emitComments\x20&&\x20moduleDecl.containsUnicodeCharInComment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Creating\x20files\x20can\x20cause\x20exceptions,\x20report\x20them.\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile\x20=\x20new\x20DeclFileWriter(this.emitOptions.ioHost.createFile(declareFileName,\x20useUTF8InOutputfile));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclarationContainer(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitOptions.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(this.singleDeclFile\x20!=\x20this.declFile,\x20\x22singleDeclFile\x20cannot\x20be\x20null\x20as\x20we\x20are\x20going\x20to\x20revert\x20back\x20to\x20it\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(this.indenter.indentAmt\x20==\x200,\x20\x22Indent\x20has\x20to\x20be\x200\x20when\x20outputing\x20new\x20file\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Closing\x20files\x20could\x20result\x20in\x20exceptions,\x20report\x20them\x20if\x20they\x20occur\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile\x20=\x20this.singleDeclFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclarationContainer(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleDecl.isEnum())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitEnumSignature(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.modFlags),\x20moduleDecl,\x20pre))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitDottedModuleName())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dottedModuleEmit\x20+=\x20\x22.\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dottedModuleEmit\x20=\x20this.getDeclFlagsString(ToDeclFlags(moduleDecl.modFlags),\x20\x22module\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dottedModuleEmit\x20+=\x20moduleDecl.name.text;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isCurrentModuleDotted\x20=\x20(moduleDecl.members.members.length\x20==\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.members.members[0].nodeType\x20==\x20NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).modFlags,\x20ModuleFlags.Exported));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Module\x20is\x20dotted\x20only\x20if\x20it\x20does\x20not\x20have\x20doc\x20comments\x20for\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleDeclComments\x20=\x20moduleDecl.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isCurrentModuleDotted\x20=\x20isCurrentModuleDotted\x20&&\x20(moduleDeclComments\x20==\x20null\x20||\x20moduleDeclComments.length\x20==\x200);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.isDottedModuleName.push(isCurrentModuleDotted);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclarationContainer(moduleDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isCurrentModuleDotted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationComments(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.Write(this.dottedModuleEmit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitDottedModuleName())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclarationContainer(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.isDottedModuleName.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ScriptCallback(pre:\x20bool,\x20script:\x20Script):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20script.referencedFiles.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20referencePath\x20=\x20script.referencedFiles[i].path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declareFileName:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isRooted(referencePath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declareFileName\x20=\x20this.emitOptions.mapOutputFileName(referencePath,\x20TypeScriptCompiler.mapToDTSFileName)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declareFileName\x20=\x20getDeclareFilePath(script.referencedFiles[i].path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declFile.WriteLine(\x27///\x20<reference\x20path=\x22\x27\x20+\x20declareFileName\x20+\x20\x27\x22\x20/>\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclarationContainer(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclarationContainer(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20DefaultCallback(pre:\x20bool,\x20ast:\x20AST):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20!hasFlag(ast.flags,\x20ASTFlags.IsStatement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20module\x20CompilerDiagnostics\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20var\x20debug\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20interface\x20IDiagnosticWriter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Alert(output:\x20string):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20var\x20diagnosticWriter:\x20IDiagnosticWriter\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20var\x20analysisPass:\x20number\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20Alert(output:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(diagnosticWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20diagnosticWriter.Alert(output);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20debugPrint(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(debug)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Alert(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20assert(condition:\x20bool,\x20s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(debug)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!condition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Alert(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ILogger\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20information():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20debug():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20warning():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20error():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20fatal():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20log(s:\x20string):\x20void;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20NullLogger\x20implements\x20ILogger\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20information():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20debug():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20warning():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20error():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fatal():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20log(s:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20LoggerAdapter\x20implements\x20ILogger\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20_information:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20_debug:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20_warning:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20_error:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20_fatal:\x20bool;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20logger:\x20ILogger)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this._information\x20=\x20this.logger.information();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this._debug\x20=\x20this.logger.debug();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this._warning\x20=\x20this.logger.warning();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this._error\x20=\x20this.logger.error();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this._fatal\x20=\x20this.logger.fatal();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20information():\x20bool\x20{\x20return\x20this._information;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20debug():\x20bool\x20{\x20return\x20this._debug;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20warning():\x20bool\x20{\x20return\x20this._warning;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20error():\x20bool\x20{\x20return\x20this._error;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fatal():\x20bool\x20{\x20return\x20this._fatal;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20log(s:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BufferedLogger\x20implements\x20ILogger\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20logContents\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20information():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20debug():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20warning():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20error():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fatal():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20log(s:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logContents.push(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20timeFunction(logger:\x20ILogger,\x20funcDescription:\x20string,\x20func:\x20()\x20=>any):\x20any\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20start\x20=\x20+new\x20Date();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20func();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20end\x20=\x20+new\x20Date();\x0a\x20\x20\x20\x20\x20\x20\x20\x20logger.log(funcDescription\x20+\x20\x22\x20completed\x20in\x20\x22\x20+\x20(end\x20-\x20start)\x20+\x20\x22\x20msec\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20stringToLiteral(value:\x20string,\x20length:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20addChar\x20=\x20(index:\x20number)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ch\x20=\x20value.charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x09:\x20//\x20tab\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5ct\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x0a:\x20//\x20line\x20feed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5cn\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x0b:\x20//\x20vertical\x20tab\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5cv\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x0c:\x20//\x20form\x20feed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5cf\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x0d:\x20//\x20carriage\x20return\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5cr\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x22:\x20\x20//\x20double\x20quote\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5c\x5c\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x27:\x20//\x20single\x20quote\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5c\x5c\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200x5c:\x20//\x20Backslash\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22\x5c\x5c\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20value.charAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20tooLong\x20=\x20(value.length\x20>\x20length);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tooLong)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mid\x20=\x20length\x20>>\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20mid;\x20i++)\x20addChar(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20\x22(...)\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20value.length\x20-\x20mid;\x20i\x20<\x20value.length;\x20i++)\x20addChar(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20length\x20=\x20value.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20length;\x20i++)\x20addChar(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20enum\x20EmitContainer\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Prog,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Module,\x0a\x20\x20\x20\x20\x20\x20\x20\x20DynamicModule,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Class,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Constructor,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Function,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Args,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Interface,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20EmitState\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20column:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20line:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pretty:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inObjectLiteral:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20container:\x20EmitContainer;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.column\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pretty\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inObjectLiteral\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.container\x20=\x20EmitContainer.Prog;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20EmitOptions\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20minWhitespace:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20propagateConstants:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitComments:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20outputOption:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ioHost:\x20EmitterIOHost\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20outputMany:\x20bool\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20commonDirectoryPath\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(settings:\x20CompilationSettings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.minWhitespace\x20=\x20settings.minWhitespace;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.propagateConstants\x20=\x20settings.propagateConstants;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitComments\x20=\x20settings.emitComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outputOption\x20=\x20settings.outputOption;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mapOutputFileName(fileName:\x20string,\x20extensionChanger:\x20(fname:\x20string,\x20wholeFileNameReplaced:\x20bool)\x20=>\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20updatedFileName\x20=\x20fileName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.outputOption\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Replace\x20the\x20common\x20directory\x20path\x20with\x20the\x20option\x20specified\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20updatedFileName\x20=\x20fileName.replace(this.commonDirectoryPath,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20updatedFileName\x20=\x20this.outputOption\x20+\x20updatedFileName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20extensionChanger(updatedFileName,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20extensionChanger(this.outputOption,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Indenter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20indentStep\x20:\x20number\x20=\x204;\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20indentStepString\x20:\x20string\x20=\x20\x22\x20\x20\x20\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20indentStrings:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indentAmt:\x20number\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20increaseIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indentAmt\x20+=\x20Indenter.indentStep;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20decreaseIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indentAmt\x20-=\x20Indenter.indentStep;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20indentString\x20=\x20Indenter.indentStrings[this.indentAmt];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indentString\x20===\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indentString\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.indentAmt;\x20i\x20=\x20i\x20+\x20Indenter.indentStep)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indentString\x20+=\x20Indenter.indentStepString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Indenter.indentStrings[this.indentAmt]\x20=\x20indentString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20indentString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Emitter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prologueEmitted\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisClassNode:\x20TypeDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisFnc:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20moduleDeclList:\x20ModuleDeclaration[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20moduleName\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitState\x20=\x20new\x20EmitState();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indenter\x20=\x20new\x20Indenter();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientModule\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20modAliasId:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20firstModAlias:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20allSourceMappers:\x20SourceMapper[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceMapper:\x20SourceMapper\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20captureThisStmtString\x20=\x20\x22var\x20_this\x20=\x20this;\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20varListCountStack:\x20number[]\x20=\x20[0];\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20checker:\x20TypeChecker,\x20public\x20emittingFileName:\x20string,\x20public\x20outfile:\x20ITextWriter,\x20public\x20emitOptions:\x20EmitOptions,\x20public\x20errorReporter:\x20ErrorReporter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setSourceMappings(mapper:\x20SourceMapper)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allSourceMappers.push(mapper);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper\x20=\x20mapper;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeToOutput(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.Write(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20check\x20s\x20for\x20newline\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.column\x20+=\x20s.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeToOutputTrimmable(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.minWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20s\x20=\x20s.replace(/[\x5cs]*/g,\x20\x27\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeLineToOutput(s:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.minWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20c\x20=\x20s.charCodeAt(s.length\x20-\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!((c\x20==\x20LexCodeSpace)\x20||\x20(c\x20==\x20LexCodeSMC)\x20||\x20(c\x20==\x20LexCodeLBR)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x27\x20\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.WriteLine(s);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.column\x20=\x200\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.line++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeCaptureThisStatement(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(this.captureThisStmtString);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setInVarBlock(count:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCountStack[this.varListCountStack.length\x20-\x201]\x20=\x20count;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setInObjectLiteral(val:\x20bool):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20this.emitState.inObjectLiteral;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.inObjectLiteral\x20=\x20val;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setContainer(c:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20this.emitState.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.container\x20=\x20c;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getIndentString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.minWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.indenter.getIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(this.getIndentString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitCommentInPlace(comment:\x20Comment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text\x20=\x20comment.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hadNewLine\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comment.isBlockComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitState.column\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(text[0]);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(text.length\x20>\x201\x20||\x20comment.endsLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x201;\x20i\x20<\x20text.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(text[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadNewLine\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitState.column\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(text[0]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadNewLine\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hadNewLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitParensAndCommentsInPlace(ast:\x20AST,\x20pre:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments\x20=\x20pre\x20?\x20ast.preComments\x20:\x20ast.postComments;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20comments\x20should\x20be\x20printed\x20before\x20the\x20LParen,\x20but\x20after\x20the\x20RParen\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.isParenthesized\x20&&\x20!pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.emitComments\x20&&\x20comments\x20&&\x20comments.length\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20comments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitCommentInPlace(comments[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.isParenthesized\x20&&\x20pre)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20emit\x20accessor\x20pattern\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitObjectLiteral(content:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inObjectLiteral\x20=\x20this.setInObjectLiteral(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(content,\x20\x22,\x22,\x20TokenID.Comma,\x20true,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInObjectLiteral(inObjectLiteral);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitArrayLiteral(content:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22[\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(content)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(content,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20true,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22]\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitNew(target:\x20AST,\x20args:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22new\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeRef\x20=\x20<TypeReference>target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeRef.arrayCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22Array()\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(typeRef.term,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22()\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(target,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(args,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tryEmitConstant(dotExpr:\x20BinaryExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitOptions.propagateConstants)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propertyName\x20=\x20<Identifier>dotExpr.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(propertyName\x20&&\x20propertyName.sym\x20&&\x20propertyName.sym.isVariable())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(propertyName.sym.flags,\x20SymbolFlags.Constant))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(propertyName.sym.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20boundDecl\x20=\x20<BoundDecl>propertyName.sym.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(boundDecl.init\x20&&\x20(boundDecl.init.nodeType\x20==\x20NodeType.NumberLit))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20numLit\x20=\x20<NumberLiteral>boundDecl.init;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(numLit.value.toString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comment\x20=\x20\x22\x20/*\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comment\x20+=\x20propertyName.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comment\x20+=\x20\x22\x20*/\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitCall(callNode:\x20CallExpression,\x20target:\x20AST,\x20args:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitSuperCall(callNode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(callNode.flags,\x20ASTFlags.ClassBaseConstructorCall))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20!target.isParenthesized)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callNode.target.nodeType\x20==\x20NodeType.Super\x20&&\x20this.emitState.container\x20==\x20EmitContainer.Constructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_super.call\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(target,\x20TokenID.OpenParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20!target.isParenthesized)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callNode.target.nodeType\x20==\x20NodeType.Super\x20&&\x20this.emitState.container\x20==\x20EmitContainer.Constructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(args\x20&&\x20args.members.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(args,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20constructorCall\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorCall.members[0]\x20=\x20callNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitConstructorCalls(constructorCall,\x20this.thisClassNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitConstructorCalls(bases:\x20ASTList,\x20classDecl:\x20TypeDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20basesLen\x20=\x20bases.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20basesLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseExpr\x20=\x20bases.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseSymbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseExpr.nodeType\x20==\x20NodeType.Call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseSymbol\x20=\x20(<CallExpression>baseExpr).target.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseSymbol\x20=\x20baseExpr.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseName\x20=\x20baseSymbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseSymbol.declModule\x20!=\x20classDecl.type.symbol.declModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20baseSymbol.fullName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseExpr.nodeType\x20==\x20NodeType.Call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_super.call(this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args\x20=\x20(<CallExpression>baseExpr).arguments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(args\x20&&\x20(args.members.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(args,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseExpr.type\x20&&\x20(baseExpr.type.isClassInstance()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20parameterless\x20constructor\x20call;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(classDecl.name.actualText\x20+\x20\x22._super.constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//emitJavascript(baseExpr,TokenID.LParen,false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22.call(this)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitInnerFunction(funcDecl:\x20FuncDecl,\x20printName:\x20bool,\x20isMember:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bases:\x20ASTList,\x20hasSelfRef:\x20bool,\x20classDecl:\x20TypeDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20REVIEW:\x20The\x20code\x20below\x20causes\x20functions\x20to\x20get\x20pushed\x20to\x20a\x20newline\x20in\x20cases\x20where\x20they\x20shouldn\x27t\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20such\x20as:\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20\x20\x20\x20\x20Foo.prototype.bar\x20=\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20\x20\x20\x20\x20\x20\x20\x20\x20function()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20Once\x20we\x20start\x20emitting\x20comments,\x20we\x20should\x20pull\x20this\x20code\x20out\x20to\x20place\x20on\x20the\x20outer\x20context\x20where\x20the\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20is\x20used.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(funcDecl.preComments!=null\x20&&\x20funcDecl.preComments.length>0)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isClassConstructor\x20=\x20funcDecl.isConstructor\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasNonObjectBaseType\x20=\x20isClassConstructor\x20&&\x20hasFlag(this.thisClassNode.type.instanceType.typeFlags,\x20TypeFlags.HasBaseType)\x20&&\x20!hasFlag(this.thisClassNode.type.instanceType.typeFlags,\x20TypeFlags.HasBaseTypeOfObject);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classPropertiesMustComeAfterSuperCall\x20=\x20hasNonObjectBaseType\x20&&\x20hasFlag((<ClassDeclaration>this.thisClassNode).varFlags,\x20VarFlags.ClassSuperMustBeFirstCallInConstructor);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20have\x20no\x20way\x20of\x20knowing\x20if\x20the\x20current\x20function\x20is\x20used\x20as\x20an\x20expression\x20or\x20a\x20statement,\x20so\x20as\x20to\x20enusre\x20that\x20the\x20emitted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20JavaScript\x20is\x20always\x20valid,\x20add\x20an\x20extra\x20parentheses\x20for\x20unparenthesized\x20function\x20expressions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20shouldParenthesize\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.IsFunctionExpression)\x20&&\x20!funcDecl.isParenthesized\x20&&\x20!funcDecl.isAccessor()\x20&&\x20(hasFlag(funcDecl.flags,\x20ASTFlags.ExplicitSemicolon)\x20||\x20hasFlag(funcDecl.flags,\x20ASTFlags.AutomaticSemicolon));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(funcDecl,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(shouldParenthesize)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(funcDecl.isAccessor()\x20&&\x20(<FieldSymbol>funcDecl.accessorSymbol).isObjectLitField))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22function\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(printName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20funcDecl.getNameText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(id\x20&&\x20!funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argsLen\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg:\x20ArgDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20defaultArgs:\x20ArgDecl[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tempContainer\x20=\x20this.setContainer(EmitContainer.Args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argsLen\x20=\x20funcDecl.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20printLen\x20=\x20argsLen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.variableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printLen--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20printLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20<ArgDecl>funcDecl.arguments.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arg.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20defaultArgs.push(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(arg,\x20TokenID.OpenParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20<\x20(printLen\x20-\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContainer(tempContainer);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22)\x20{\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(\x22constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(funcDecl.isGetAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(\x22get_\x22\x20+\x20funcDecl.getNameText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(funcDecl.isSetAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(\x22set_\x22\x20+\x20funcDecl.getNameText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(funcDecl.getNameText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20default\x20args\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20defaultArgs.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20defaultArgs[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22if\x20(typeof\x20\x22\x20+\x20arg.id.actualText\x20+\x20\x22\x20===\x20\x5c\x22undefined\x5c\x22)\x20{\x20\x22);//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(arg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(arg.init,\x20TokenID.OpenParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x20}\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20((<ClassDeclaration>funcDecl.classDecl).varFlags\x20&\x20VarFlags.MustCaptureThis))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeCaptureThisStatement(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20!classPropertiesMustComeAfterSuperCall)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argsLen\x20=\x20funcDecl.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20argsLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20<ArgDecl>funcDecl.arguments.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((arg.varFlags\x20&\x20VarFlags.Property)\x20!=\x20VarFlags.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22\x20+\x20arg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(arg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20For\x20classes,\x20the\x20constructor\x20needs\x20to\x20be\x20explicitly\x20called\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitConstructorCalls(bases,\x20classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasSelfRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeCaptureThisStatement(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.variableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argsLen\x20=\x20funcDecl.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastArg\x20=\x20<ArgDecl>funcDecl.arguments.members[argsLen\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22var\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(lastArg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20=\x20[];\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22for\x20(\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22var\x20_i\x20=\x200;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_i\x20<\x20(arguments.length\x20-\x20\x22\x20+\x20(argsLen\x20-\x201)\x20+\x20\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22;\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_i++\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22)\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(lastArg.id.actualText\x20+\x20\x22[_i]\x20=\x20arguments[_i\x20+\x20\x22\x20+\x20(argsLen\x20-\x201)\x20+\x20\x22];\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(lastArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20a\x20class,\x20emit\x20the\x20uninitializedMembers,\x20first\x20emit\x20the\x20non-proto\x20class\x20body\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod)\x20&&\x20!classPropertiesMustComeAfterSuperCall)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nProps\x20=\x20(<ASTList>this.thisClassNode.members).members.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20nProps;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<ASTList>this.thisClassNode.members).members[i].nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>(<ASTList>this.thisClassNode.members).members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(varDecl.varFlags,\x20VarFlags.Static)\x20&&\x20varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptVarDecl(varDecl,\x20TokenID.Tilde);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitBareJavascriptStatements(funcDecl.bod,\x20classPropertiesMustComeAfterSuperCall);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(shouldParenthesize)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20extra\x20call\x20is\x20to\x20make\x20sure\x20the\x20caller\x27s\x20funcDecl\x20end\x20is\x20recorded,\x20since\x20caller\x20wont\x20be\x20able\x20to\x20record\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(funcDecl,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isMember\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//funcDecl.name\x20!=\x20null\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(funcDecl.fncFlags,\x20FncFlags.IsFunctionExpression)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Definition)\x20||\x20funcDecl.isConstructor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.IsFunctionExpression))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.flags,\x20ASTFlags.ExplicitSemicolon)\x20||\x20hasFlag(funcDecl.flags,\x20ASTFlags.AutomaticSemicolon))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20either\x20of\x20these\x20two\x20flags\x20are\x20set,\x20then\x20the\x20function\x20expression\x20is\x20a\x20statement.\x20Terminate\x20it.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///\x20TODO:\x20See\x20the\x20other\x20part\x20of\x20this\x20at\x20the\x20beginning\x20of\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(funcDecl.preComments!=null\x20&&\x20funcDecl.preComments.length>0)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptModule(moduleDecl:\x20ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20moduleDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isTSFile(modName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.name.setText(modName.substring(0,\x20modName.length\x20-\x203));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isSTRFile(modName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.name.setText(modName.substring(0,\x20modName.length\x20-\x204));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(moduleDecl.modFlags,\x20ModuleFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamicMod\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.IsDynamic);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevOutFile\x20=\x20this.outfile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevOutFileName\x20=\x20this.emittingFileName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevAllSourceMappers\x20=\x20this.allSourceMappers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevSourceMapper\x20=\x20this.sourceMapper;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevColumn\x20=\x20this.emitState.column;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevLine\x20=\x20this.emitState.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20this.setContainer(EmitContainer.Module);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svModuleName\x20=\x20this.moduleName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.moduleDeclList[this.moduleDeclList.length]\x20=\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isWholeFile\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.IsWholeFile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.moduleName\x20=\x20moduleDecl.name.actualText;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20prologue\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDynamicMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20create\x20the\x20new\x20outfile\x20for\x20this\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tsModFileName\x20=\x20stripQuotes(moduleDecl.name.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modFilePath\x20=\x20trimModName(tsModFileName)\x20+\x20\x22.js\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modFilePath\x20=\x20this.emitOptions.mapOutputFileName(modFilePath,\x20TypeScriptCompiler.mapToJSFileName);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitOptions.ioHost)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ensure\x20that\x20the\x20slashes\x20are\x20normalized\x20so\x20that\x20the\x20comparison\x20is\x20fair\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Note\x20that\x20modFilePath\x20is\x20normalized\x20to\x20forward\x20slashes\x20in\x20Parser.parse,\x20so\x20the\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20first\x20call\x20to\x20switchToForwardSlashes\x20is\x20technically\x20a\x20no-op,\x20but\x20it\x20will\x20prevent\x20us\x20from\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20regressing\x20if\x20the\x20parser\x20changes\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(switchToForwardSlashes(modFilePath)\x20!=\x20switchToForwardSlashes(this.emittingFileName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emittingFileName\x20=\x20modFilePath;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useUTF8InOutputfile\x20=\x20moduleDecl.containsUnicodeChar\x20||\x20(this.emitOptions.emitComments\x20&&\x20moduleDecl.containsUnicodeCharInComment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile\x20=\x20this.createFile(this.emittingFileName,\x20useUTF8InOutputfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevSourceMapper\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allSourceMappers\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMappingFile\x20=\x20this.createFile(this.emittingFileName\x20+\x20SourceMapper.MapFileExtension,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setSourceMappings(new\x20TypeScript.SourceMapper(tsModFileName,\x20this.emittingFileName,\x20this.outfile,\x20sourceMappingFile,\x20this.errorReporter));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.column\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.line\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(this.emitOptions.outputMany,\x20\x22Cannot\x20have\x20dynamic\x20modules\x20compiling\x20into\x20single\x20file\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContainer(EmitContainer.DynamicModule);\x20//\x20discard\x20the\x20previous\x20\x27Module\x27\x20container\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20{\x20//\x20AMD\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dependencyList\x20=\x20\x22[\x5c\x22require\x5c\x22,\x20\x5c\x22exports\x5c\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20importList\x20=\x20\x22require,\x20exports\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20importStatement:\x20ImportDeclaration\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20all\x20dependencies\x20are\x20quoted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20(<ModuleType>moduleDecl.mod).importedModules.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importStatement\x20=\x20(<ModuleType>moduleDecl.mod).importedModules[i]\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20imported\x20module\x20is\x20only\x20used\x20in\x20a\x20type\x20position,\x20do\x20not\x20add\x20it\x20as\x20a\x20requirement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(importStatement.id.sym\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!(<TypeSymbol>importStatement.id.sym).onlyReferencedAsTypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20<=\x20(<ModuleType>moduleDecl.mod).importedModules.length\x20-\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dependencyList\x20+=\x20\x22,\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importList\x20+=\x20\x22,\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importList\x20+=\x20\x22__\x22\x20+\x20importStatement.id.actualText\x20+\x20\x22__\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dependencyList\x20+=\x20importStatement.firstAliasedModToString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20emit\x20any\x20potential\x20amd\x20dependencies\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20moduleDecl.amdDependencies.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dependencyList\x20+=\x20\x22,\x20\x5c\x22\x22\x20+\x20moduleDecl.amdDependencies[i]\x20+\x20\x22\x5c\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dependencyList\x20+=\x20\x22]\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22define(\x22\x20+\x20dependencyList\x20+\x20\x22,\x22\x20+\x20\x22\x20function(\x22\x20+\x20importList\x20+\x20\x22)\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20//\x20Node\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22var\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(this.moduleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22function\x20(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(this.moduleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22)\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(this.moduleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20body\x20-\x20don\x27t\x20indent\x20for\x20Node\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isDynamicMod\x20||\x20moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleDecl.modFlags\x20&\x20ModuleFlags.MustCaptureThis)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeCaptureThisStatement(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(moduleDecl.members,\x20null,\x20TokenID.Semicolon,\x20true,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isDynamicMod\x20||\x20moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20epilogue\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDynamicMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20{\x20//\x20AMD\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22})\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20//\x20Node\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20close\x20the\x20module\x20outfile,\x20and\x20restore\x20the\x20old\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.outfile\x20!=\x20prevOutFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevSourceMapper\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allSourceMappers\x20=\x20prevAllSourceMappers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper\x20=\x20prevSourceMapper;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.column\x20=\x20prevColumn;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.line\x20=\x20prevLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile\x20=\x20prevOutFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emittingFileName\x20=\x20prevOutFileName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20containingMod:\x20ModuleDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleDecl.type\x20&&\x20moduleDecl.type.symbol.container\x20&&\x20moduleDecl.type.symbol.container.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containingMod\x20=\x20<ModuleDeclaration>moduleDecl.type.symbol.container.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentIsDynamic\x20=\x20containingMod\x20&&\x20hasFlag(containingMod.modFlags,\x20ModuleFlags.IsDynamic);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(temp\x20==\x20EmitContainer.Prog\x20&&\x20isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)(this.\x22\x20+\x20this.moduleName\x20+\x20\x22\x20||\x20(this.\x22\x20+\x20this.moduleName\x20+\x20\x22\x20=\x20{}));\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isExported\x20||\x20temp\x20==\x20EmitContainer.Prog)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dotMod\x20=\x20svModuleName\x20!=\x20\x22\x22\x20?\x20(parentIsDynamic\x20?\x20\x22exports\x22\x20:\x20svModuleName)\x20+\x20\x22.\x22\x20:\x20svModuleName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)(\x22\x20+\x20dotMod\x20+\x20this.moduleName\x20+\x20\x22\x20||\x20(\x22\x20+\x20dotMod\x20+\x20this.moduleName\x20+\x20\x22\x20=\x20{}));\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!isExported\x20&&\x20temp\x20!=\x20EmitContainer.Prog)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)(\x22\x20+\x20this.moduleName\x20+\x20\x22\x20||\x20(\x22\x20+\x20this.moduleName\x20+\x20\x22\x20=\x20{}));\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isWholeFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)();\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(temp\x20!=\x20EmitContainer.Prog\x20&&\x20isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentIsDynamic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22var\x20\x22\x20+\x20this.moduleName\x20+\x20\x22\x20=\x20exports.\x22\x20+\x20this.moduleName\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22var\x20\x22\x20+\x20this.moduleName\x20+\x20\x22\x20=\x20\x22\x20+\x20svModuleName\x20+\x20\x22.\x22\x20+\x20this.moduleName\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContainer(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.moduleName\x20=\x20svModuleName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.moduleDeclList.length--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitIndex(operand1:\x20AST,\x20operand2:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20this.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(operand1,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22[\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(operand2,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22]\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInObjectLiteral(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitStringLiteral(text:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20should\x20preserve\x20escape\x20etc.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20simplify\x20object\x20literal\x20simple\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptFunction(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Signature)\x20||\x20funcDecl.isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tempFnc\x20=\x20this.thisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20funcDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.setContainer(EmitContainer.Constructor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.setContainer(EmitContainer.Function);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bases:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasSelfRef\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcName\x20=\x20funcDecl.getNameText();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.emitState.inObjectLiteral\x20||\x20!funcDecl.isAccessor())\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((temp\x20!=\x20EmitContainer.Constructor)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((funcDecl.fncFlags\x20&\x20FncFlags.Method)\x20==\x20FncFlags.None)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tempLit\x20=\x20this.setInObjectLiteral(false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bases\x20=\x20this.thisClassNode.extendsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasSelfRef\x20=\x20Emitter.shouldCaptureThis(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Exported\x20|\x20FncFlags.ClassPropertyMethodExported)\x20&&\x20funcDecl.type.symbol.container\x20==\x20this.checker.gloMod\x20&&\x20!funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22\x20+\x20funcName\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(funcDecl,\x20false,\x20false,\x20bases,\x20hasSelfRef,\x20this.thisClassNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(funcDecl,\x20(funcDecl.name\x20&&\x20!funcDecl.name.isMissing()),\x20false,\x20bases,\x20hasSelfRef,\x20this.thisClassNode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInObjectLiteral(tempLit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContainer(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20tempFnc;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Definition))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPropertyAccessor(funcDecl,\x20this.thisClassNode.name.actualText,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(this.thisClassNode.name.actualText\x20+\x20\x22.\x22\x20+\x20funcName\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x20=\x20\x22\x20+\x20funcName\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.emitState.container\x20==\x20EmitContainer.Module\x20||\x20this.emitState.container\x20==\x20EmitContainer.DynamicModule)\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Exported\x20|\x20FncFlags.ClassPropertyMethodExported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20this.emitState.container\x20==\x20EmitContainer.Module\x20?\x20this.moduleName\x20:\x20\x22exports\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(modName\x20+\x20\x22.\x22\x20+\x20funcName\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x20=\x20\x22\x20+\x20funcName\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitAmbientVarDecl(varDecl:\x20VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(varDecl,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(varDecl.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(varDecl.init,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(varDecl,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20varListCount():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.varListCountStack[this.varListCountStack.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Emits\x20\x22var\x20\x22\x20if\x20it\x20is\x20allowed\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20emitVarDeclVar()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x20is\x20var\x20list\x20of\x20form\x20var\x20a,\x20b,\x20c\x20=\x20emit\x20it\x20only\x20if\x20count\x20>\x200\x20-\x20which\x20will\x20be\x20when\x20emitting\x20first\x20var\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x20is\x20var\x20list\x20of\x20form\x20\x20var\x20a\x20=\x20varList\x20count\x20will\x20be\x200\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount()\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22var\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInVarBlock(-this.varListCount());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20onEmitVar()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount()\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInVarBlock(this.varListCount()\x20-\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.varListCount()\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setInVarBlock(this.varListCount()\x20+\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptVarDecl(varDecl:\x20VarDecl,\x20tokenId:\x20TokenID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((varDecl.varFlags\x20&\x20VarFlags.Ambient)\x20==\x20VarFlags.Ambient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitAmbientVarDecl(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.onEmitVar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20varDecl.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasInitializer\x20=\x20(varDecl.init\x20!=\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(varDecl,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym\x20&&\x20sym.isMember()\x20&&\x20sym.container\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.container.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20(<TypeSymbol>sym.container).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isClass()\x20&&\x20(!hasFlag(sym.flags,\x20SymbolFlags.ModuleMember)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitState.container\x20!=\x20EmitContainer.Args)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(sym.flags,\x20SymbolFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(sym.container.name\x20+\x20\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(type.hasImplementation())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(sym.flags,\x20SymbolFlags.Exported)\x20&&\x20(sym.container\x20==\x20this.checker.gloMod\x20||\x20!hasFlag(sym.flags,\x20SymbolFlags.Property)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitVarDeclVar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.LocalStatic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitState.container\x20==\x20EmitContainer.DynamicModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22exports.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(this.moduleName\x20+\x20\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20function,\x20constructor,\x20method\x20etc.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenId\x20!=\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(sym.flags,\x20SymbolFlags.Exported)\x20&&\x20sym.container\x20==\x20this.checker.gloMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitVarDeclVar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenId\x20!=\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitVarDeclVar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(varDecl.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasInitializer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutputTrimmable(\x22\x20=\x20\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ensure\x20we\x20have\x20a\x20fresh\x20var\x20list\x20count\x20when\x20recursing\x20into\x20the\x20variable\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20initializer.\x20\x20We\x20don\x27t\x20want\x20our\x20current\x20list\x20of\x20variables\x20to\x20affect\x20how\x20we\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20emit\x20nested\x20variable\x20lists.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCountStack.push(0);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(varDecl.init,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varListCountStack.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.onEmitVar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenId\x20!=\x20TokenID.OpenParen))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.varListCount()\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(tokenId\x20!=\x20TokenID.For)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutputTrimmable(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(varDecl,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20declEnclosed(moduleDecl:\x20ModuleDeclaration):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleDecl\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.moduleDeclList.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.moduleDeclList[i]\x20==\x20moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptName(name:\x20Identifier,\x20addThis:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20name.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(name,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!name.isMissing())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(addThis\x20&&\x20(this.emitState.container\x20!=\x20EmitContainer.Args)\x20&&\x20sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20flag\x20global\x20module\x20with\x20marker\x20other\x20than\x20string\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.container\x20&&\x20(sym.container.name\x20!=\x20globalId))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(sym.flags,\x20SymbolFlags.Static)\x20&&\x20(hasFlag(sym.flags,\x20SymbolFlags.Property)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.declModule\x20&&\x20hasFlag(sym.declModule.modFlags,\x20ModuleFlags.IsDynamic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22exports.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(sym.container.name\x20+\x20\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(sym.kind()\x20==\x20SymbolKind.Field)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSym\x20=\x20<FieldSymbol>sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(fieldSym.flags,\x20SymbolFlags.ModuleMember))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym.container\x20!=\x20this.checker.gloMod)\x20&&\x20((hasFlag(sym.flags,\x20SymbolFlags.Property))\x20||\x20hasFlag(sym.flags,\x20SymbolFlags.Exported)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(sym.declModule.modFlags,\x20ModuleFlags.IsDynamic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22exports.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(sym.container.name\x20+\x20\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.isInstanceProperty())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitThis();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(sym.kind()\x20==\x20SymbolKind.Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.isInstanceProperty())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSym\x20=\x20<TypeSymbol>sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20typeSym.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.call\x20&&\x20!hasFlag(sym.flags,\x20SymbolFlags.ModuleMember))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitThis();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((sym.unitIndex\x20!=\x20this.checker.locationInfo.unitIndex)\x20||\x20(!this.declEnclosed(sym.declModule)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(sym.container.name\x20+\x20\x22.\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(sym.container\x20==\x20this.checker.gloMod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(sym.flags,\x20SymbolFlags.Exported)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(sym.flags,\x20SymbolFlags.Ambient)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20that\x20it\x27s\x20a\x20not\x20a\x20member\x20of\x20an\x20ambient\x20module...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!((sym.isType()\x20||\x20sym.isMember())\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.declModule\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(sym.declModule.modFlags,\x20ModuleFlags.Ambient))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitState.container\x20==\x20EmitContainer.Prog\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.declAST.nodeType\x20!=\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x27s\x20a\x20dynamic\x20module,\x20we\x20need\x20to\x20print\x20the\x20\x22require\x22\x20invocation\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.declAST.nodeType\x20==\x20NodeType.ModuleDeclaration\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(hasFlag((<ModuleDeclaration>sym.declAST).modFlags,\x20ModuleFlags.IsDynamic)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleDecl:\x20ModuleDeclaration\x20=\x20<ModuleDeclaration>sym.declAST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22__\x22\x20+\x20this.modAliasId\x20+\x20\x22__;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modPath\x20=\x20name.actualText;//(<ModuleDecl>moduleDecl.mod.symbol.declAST).name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20moduleDecl.mod.symbol.declAST\x20&&\x20hasFlag((<ModuleDeclaration>moduleDecl.mod.symbol.declAST).modFlags,\x20ModuleFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modPath\x20=\x20isAmbient\x20?\x20modPath\x20:\x20this.firstModAlias\x20?\x20this.firstModAlias\x20:\x20quoteBaseName(modPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modPath\x20=\x20isAmbient\x20?\x20modPath\x20:\x20(!isRelative(stripQuotes(modPath))\x20?\x20quoteStr(\x22./\x22\x20+\x20stripQuotes(modPath))\x20:\x20modPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22require(\x22\x20+\x20modPath\x20+\x20\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(name.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(name,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptStatements(stmts:\x20AST,\x20emitEmptyBod:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts.nodeType\x20!=\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasContents\x20=\x20(stmts\x20&&\x20(stmts.nodeType\x20!=\x20NodeType.List\x20||\x20((<ASTList>stmts).members.length\x20>\x200)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitEmptyBod\x20||\x20hasContents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasOnlyBlockStatement\x20=\x20((stmts.nodeType\x20==\x20NodeType.Block)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((stmts.nodeType\x20==\x20NodeType.List)\x20&&\x20((<ASTList>stmts).members.length\x20==\x201)\x20&&\x20((<ASTList>stmts).members[0].nodeType\x20==\x20NodeType.Block)));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(stmts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasOnlyBlockStatement)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(stmts,\x20null,\x20TokenID.Semicolon,\x20true,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasOnlyBlockStatement)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(stmts);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(stmts,\x20TokenID.Semicolon,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(emitEmptyBod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22{\x20}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitBareJavascriptStatements(stmts:\x20AST,\x20emitClassPropertiesAfterSuperCall:\x20bool\x20=\x20false)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20just\x20the\x20statements\x20without\x20enclosing\x20curly\x20braces\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts.nodeType\x20!=\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts.nodeType\x20==\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stmtList\x20=\x20<ASTList>stmts;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((stmtList.members.length\x20==\x202)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(stmtList.members[0].nodeType\x20==\x20NodeType.Block)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(stmtList.members[1].nodeType\x20==\x20NodeType.EndCode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(stmtList.members[0],\x20TokenID.Semicolon,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(stmts,\x20null,\x20TokenID.Semicolon,\x20true,\x20false,\x20emitClassPropertiesAfterSuperCall);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(stmts,\x20TokenID.Semicolon,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(stmts,\x20TokenID.Semicolon,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20recordSourceMappingNameStart(name:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20finalName\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20finalName\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(this.sourceMapper.currentNameIndex.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20finalName\x20=\x20this.sourceMapper.names[this.sourceMapper.currentNameIndex.length\x20-\x201]\x20+\x20\x22.\x22\x20+\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20are\x20currently\x20not\x20looking\x20for\x20duplicate\x20but\x20that\x20is\x20possible.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper.names.push(finalName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length\x20-\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20recordSourceMappingNameEnd()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper.currentNameIndex.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20recordSourceMappingStart(ast:\x20ASTSpan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper\x20&&\x20isValidAstNode(ast))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMapping\x20=\x20new\x20SourceMapping();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.start.emittedColumn\x20=\x20this.emitState.column;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.start.emittedLine\x20=\x20this.emitState.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20check\x20time\x20consumed\x20by\x20this\x20binary\x20search\x20(about\x20two\x20per\x20leaf\x20statement)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(lineCol,\x20ast.minChar,\x20this.checker.locationInfo.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.start.sourceColumn\x20=\x20lineCol.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.start.sourceLine\x20=\x20lineCol.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(lineCol,\x20ast.limChar,\x20this.checker.locationInfo.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.end.sourceColumn\x20=\x20lineCol.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.end.sourceLine\x20=\x20lineCol.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper.currentNameIndex.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.nameIndex\x20=\x20this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Set\x20parent\x20and\x20child\x20relationship\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20siblings\x20=\x20this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20siblings.push(sourceMapping);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20recordSourceMappingEnd(ast:\x20ASTSpan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper\x20&&\x20isValidAstNode(ast))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Pop\x20source\x20mapping\x20childs\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceMapper.currentMappings.pop();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Get\x20the\x20last\x20source\x20mapping\x20from\x20sibling\x20list\x20=\x20which\x20is\x20the\x20one\x20we\x20are\x20recording\x20end\x20for\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20siblings\x20=\x20this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMapping\x20=\x20siblings[siblings.length\x20-\x201];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.end.emittedColumn\x20=\x20this.emitState.column;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapping.end.emittedLine\x20=\x20this.emitState.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20Close()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.sourceMapper\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20SourceMapper.EmitSourceMapping(this.allSourceMappers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Closing\x20files\x20could\x20result\x20in\x20exceptions,\x20report\x20them\x20if\x20they\x20occur\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptList(ast:\x20AST,\x20delimiter:\x20string,\x20tokenId:\x20TokenID,\x20startLine:\x20bool,\x20onlyStatics:\x20bool,\x20emitClassPropertiesAfterSuperCall:\x20bool\x20=\x20false,\x20emitPrologue?\x20=\x20false,\x20requiresExtendsBlock?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20!=\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPrologue(emitPrologue);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(ast,\x20tokenId,\x20startLine);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20list\x20=\x20<ASTList>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(list.members.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(ast,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20list.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitPrologue)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20list\x20has\x20Strict\x20mode\x20flags,\x20emit\x20prologue\x20after\x20first\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20otherwise\x20emit\x20before\x20first\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20==\x201\x20||\x20!hasFlag(list.flags,\x20ASTFlags.StrictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPrologue(requiresExtendsBlock);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitPrologue\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20some\x20circumstances,\x20class\x20property\x20initializers\x20must\x20be\x20emitted\x20immediately\x20after\x20the\x20\x27super\x27\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20call\x20which,\x20in\x20these\x20cases,\x20must\x20be\x20the\x20first\x20statement\x20in\x20the\x20constructor\x20body\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20==\x201\x20&&\x20emitClassPropertiesAfterSuperCall)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20emit\x20any\x20parameter\x20properties\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20constructorDecl\x20=\x20(<ClassDeclaration>this.thisClassNode).constructorDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(constructorDecl\x20&&\x20constructorDecl.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argsLen\x20=\x20constructorDecl.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iArg\x20=\x200;\x20iArg\x20<\x20argsLen;\x20iArg++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20<BoundDecl>constructorDecl.arguments.members[iArg];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((arg.varFlags\x20&\x20VarFlags.Property)\x20!=\x20VarFlags.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22\x20+\x20arg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(arg.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nProps\x20=\x20(<ASTList>this.thisClassNode.members).members.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iMember\x20=\x200;\x20iMember\x20<\x20nProps;\x20iMember++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<ASTList>this.thisClassNode.members).members[iMember].nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(varDecl.varFlags,\x20VarFlags.Static)\x20&&\x20varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptVarDecl(varDecl,\x20TokenID.Tilde);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emitNode\x20=\x20list.members[i];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStaticDecl\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20hasFlag((<FuncDecl>emitNode).fncFlags,\x20FncFlags.Static))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20==\x20NodeType.VarDecl\x20&&\x20hasFlag((<VarDecl>emitNode).varFlags,\x20VarFlags.Static))\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(onlyStatics\x20?\x20!isStaticDecl\x20:\x20isStaticDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(emitNode,\x20tokenId,\x20startLine);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(delimiter\x20&&\x20(i\x20<\x20(len\x20-\x201)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(startLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(delimiter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(delimiter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(startLine\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20!=\x20NodeType.ModuleDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20!=\x20NodeType.InterfaceDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!((emitNode.nodeType\x20==\x20NodeType.VarDecl)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((((<VarDecl>emitNode).varFlags)\x20&\x20VarFlags.Ambient)\x20==\x20VarFlags.Ambient)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(((<VarDecl>emitNode).init)\x20==\x20null))\x20&&\x20this.varListCount()\x20>=\x200)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20!=\x20NodeType.Block\x20||\x20(<Block>emitNode).isStatementBlock)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20!=\x20NodeType.EndCode)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(emitNode.nodeType\x20!=\x20NodeType.FuncDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(ast,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20tokenId\x20is\x20the\x20id\x20the\x20preceding\x20token\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascript(ast:\x20AST,\x20tokenId:\x20TokenID,\x20startLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20simplify\x20rules\x20for\x20indenting\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(startLine\x20&&\x20(this.indenter.indentAmt\x20>\x200)\x20&&\x20(ast.nodeType\x20!=\x20NodeType.List)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(ast.nodeType\x20!=\x20NodeType.Block))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((ast.nodeType\x20!=\x20NodeType.InterfaceDeclaration)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!((ast.nodeType\x20==\x20NodeType.VarDecl)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((((<VarDecl>ast).varFlags)\x20&\x20VarFlags.Ambient)\x20==\x20VarFlags.Ambient)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(((<VarDecl>ast).init)\x20==\x20null))\x20&&\x20this.varListCount()\x20>=\x200)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(ast.nodeType\x20!=\x20NodeType.EndCode)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((ast.nodeType\x20!=\x20NodeType.FuncDecl)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.emitState.container\x20!=\x20EmitContainer.Constructor)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.emit(this,\x20tokenId,\x20startLine);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenId\x20==\x20TokenID.Semicolon)\x20&&\x20(ast.nodeType\x20<\x20NodeType.GeneralNode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitPropertyAccessor(funcDecl:\x20FuncDecl,\x20className:\x20string,\x20isProto:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(<FieldSymbol>funcDecl.accessorSymbol).hasBeenEmitted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorSymbol\x20=\x20<FieldSymbol>funcDecl.accessorSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22Object.defineProperty(\x22\x20+\x20className\x20+\x20(isProto\x20?\x20\x22.prototype,\x20\x5c\x22\x22\x20:\x20\x22,\x20\x5c\x22\x22)\x20+\x20funcDecl.name.actualText\x20+\x20\x22\x5c\x22\x22\x20+\x20\x22,\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSymbol.getter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20getter:\x20FuncDecl\x20=\x20<FuncDecl>accessorSymbol.getter.declAST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(getter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22get:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(getter,\x20false,\x20isProto,\x20null,\x20Emitter.shouldCaptureThis(getter),\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22,\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSymbol.setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20setter:\x20FuncDecl\x20=\x20<FuncDecl>accessorSymbol.setter.declAST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(setter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22set:\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(setter,\x20false,\x20isProto,\x20null,\x20Emitter.shouldCaptureThis(setter),\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22,\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22enumerable:\x20true,\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22configurable:\x20true\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22});\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(funcDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSymbol.hasBeenEmitted\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitPrototypeMember(member:\x20AST,\x20className:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(member.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>member;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPropertyAccessor(funcDecl,\x20className,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(className\x20+\x20\x22.prototype.\x22\x20+\x20funcDecl.getNameText()\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(funcDecl,\x20false,\x20true,\x20null,\x20Emitter.shouldCaptureThis(funcDecl),\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(member.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>member;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(className\x20+\x20\x22.prototype.\x22\x20+\x20varDecl.id.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(varDecl.init,\x20TokenID.Equals,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitAddBaseMethods(className:\x20string,\x20base:\x20Type,\x20classDecl:\x20TypeDeclaration):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(base.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseSymbol\x20=\x20base.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseName\x20=\x20baseSymbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseSymbol.declModule\x20!=\x20classDecl.type.symbol.declModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20baseSymbol.fullName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20base.members.allMembers.map(function(key,\x20s,\x20c)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym.kind()\x20==\x20SymbolKind.Type)\x20&&\x20(<TypeSymbol>sym).type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(sym.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(className\x20+\x20\x22.prototype.\x22\x20+\x20sym.name\x20+\x20\x22\x20=\x20\x22\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20+\x20\x22.prototype.\x22\x20+\x20sym.name\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(sym.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(base.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20base.extendsList.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitAddBaseMethods(className,\x20base.extendsList[i],\x20classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitJavascriptClass(classDecl:\x20ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(classDecl.varFlags,\x20VarFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svClassNode\x20=\x20this.thisClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20className\x20=\x20classDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(classDecl,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20this.setContainer(EmitContainer.Class);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(classDecl.varFlags,\x20VarFlags.Exported)\x20&&\x20classDecl.type.symbol.container\x20==\x20this.checker.gloMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this.\x22\x20+\x20className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22var\x20\x22\x20+\x20className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(hasFlag(classDecl.varFlags,\x20VarFlags.Exported)\x20&&\x20(temp\x20==\x20EmitContainer.Module\x20||\x20temp\x20==\x20EmitContainer.DynamicModule))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20var\x20modName\x20=\x20temp\x20==\x20EmitContainer.Module\x20?\x20this.moduleName\x20:\x20\x22exports\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.writeToOutput(\x22\x20=\x20\x22\x20+\x20modName\x20+\x20\x22.\x22\x20+\x20className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasBaseClass\x20=\x20classDecl.extendsList\x20&&\x20classDecl.extendsList.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseNameDecl:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseName:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasBaseClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20=\x20(function\x20(_super)\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20=\x20(function\x20()\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasBaseClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseNameDecl\x20=\x20classDecl.extendsList.members[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20baseNameDecl.nodeType\x20==\x20NodeType.Call\x20?\x20(<CallExpression>baseNameDecl).target\x20:\x20baseNameDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22__extends(\x22\x20+\x20className\x20+\x20\x22,\x20_super);\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20constrDecl\x20=\x20classDecl.constructorDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20output\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(constrDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20declared\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(classDecl.constructorDecl,\x20TokenID.OpenParen,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wroteProps\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20default\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22function\x20\x22\x20+\x20classDecl.name.actualText\x20+\x20\x22()\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameStart(\x22constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasBaseClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22_super.apply(this,\x20arguments);\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20wroteProps++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classDecl.varFlags\x20&\x20VarFlags.MustCaptureThis)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeCaptureThisStatement(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20(<ASTList>this.thisClassNode.members).members\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20output\x20initialized\x20properties\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(members[i].nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(varDecl.varFlags,\x20VarFlags.Static)\x20&&\x20varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptVarDecl(varDecl,\x20TokenID.Tilde);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20wroteProps++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(wroteProps)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersLen\x20=\x20classDecl.members.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20membersLen;\x20j++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberDecl:\x20AST\x20=\x20classDecl.members.members[j];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberDecl.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fn\x20=\x20<FuncDecl>memberDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(fn.fncFlags,\x20FncFlags.Method)\x20&&\x20!fn.isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(fn.fncFlags,\x20FncFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPrototypeMember(fn,\x20className);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20//\x20static\x20functions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fn.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPropertyAccessor(fn,\x20this.thisClassNode.name.actualText,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(fn)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(classDecl.name.actualText\x20+\x20\x22.\x22\x20+\x20fn.name.actualText\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitInnerFunction(fn,\x20(fn.name\x20&&\x20!fn.name.isMissing()),\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20null,\x20Emitter.shouldCaptureThis(fn),\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(memberDecl.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>memberDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Static))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20EMITREVIEW\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(classDecl.name.actualText\x20+\x20\x22.\x22\x20+\x20varDecl.id.actualText\x20+\x20\x22\x20=\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(varDecl.init,\x20TokenID.Equals,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20EMITREVIEW\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20Error(\x22We\x20want\x20to\x20catch\x20this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22return\x20\x22\x20+\x20className\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indenter.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingNameEnd();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl.endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasBaseClass)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(baseName,\x20TokenID.Tilde,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22);\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((temp\x20==\x20EmitContainer.Module\x20||\x20temp\x20==\x20EmitContainer.DynamicModule)\x20&&\x20hasFlag(classDecl.varFlags,\x20VarFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20temp\x20==\x20EmitContainer.Module\x20?\x20this.moduleName\x20:\x20\x22exports\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingStart(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(modName\x20+\x20\x22.\x22\x20+\x20className\x20+\x20\x22\x20=\x20\x22\x20+\x20className\x20+\x20\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.recordSourceMappingEnd(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitParensAndCommentsInPlace(classDecl,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContainer(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20svClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitPrologue(reqInherits:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.prologueEmitted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(reqInherits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prologueEmitted\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22var\x20__extends\x20=\x20this.__extends\x20||\x20function\x20(d,\x20b)\x20{\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20\x20\x20\x20function\x20__()\x20{\x20this.constructor\x20=\x20d;\x20}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20\x20\x20\x20__.prototype\x20=\x20b.prototype;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22\x20\x20\x20\x20d.prototype\x20=\x20new\x20__();\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(\x22};\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.mustCaptureGlobalThis)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prologueEmitted\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeLineToOutput(this.captureThisStmtString);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitSuperReference()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_super.prototype\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitSuperCall(callEx:\x20CallExpression):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.target.nodeType\x20==\x20NodeType.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dotNode\x20=\x20<BinaryExpression>callEx.target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(dotNode.operand1.nodeType\x20==\x20NodeType.Super)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascript(dotNode,\x20TokenID.OpenParen,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22.call(\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitThis();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.arguments\x20&&\x20callEx.arguments.members.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22,\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitJavascriptList(callEx.arguments,\x20\x22,\x20\x22,\x20TokenID.Comma,\x20false,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitThis()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc\x20&&\x20!this.thisFnc.isMethod()\x20&&\x20(!this.thisFnc.isConstructor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22_this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writeToOutput(\x22this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20static\x20shouldCaptureThis(func:\x20FuncDecl):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Super\x20calls\x20use\x20\x27this\x27\x20reference.\x20If\x20super\x20call\x20is\x20in\x20a\x20lambda,\x20\x27this\x27\x20value\x20needs\x20to\x20be\x20captured\x20in\x20the\x20parent.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20func.hasSelfReference()\x20||\x20func.hasSuperReferenceInFatArrowFunction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20createFile(fileName:\x20string,\x20useUTF8:\x20bool):\x20ITextWriter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.emitOptions.ioHost.createFile(fileName,\x20useUTF8);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20interface\x20ILineCol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20line:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20col:\x20number;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ErrorReporter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parser:\x20Parser\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checker:\x20TypeChecker\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lineCol\x20=\x20{\x20line:\x200,\x20col:\x200\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitAsComments\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasErrors\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushToErrorSink\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorSink:\x20string[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20outfile:\x20ITextWriter)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getCapturedErrors()\x20{\x20return\x20this.errorSink;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20freeCapturedErrors()\x20{\x20this.errorSink\x20=\x20[];\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20captureError(emsg:\x20string)\x20{\x20this.errorSink[this.errorSink.length]\x20=\x20emsg;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrOut(outerr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile\x20=\x20outerr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitAsComments\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitPrefix()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitAsComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.Write(\x22//\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.Write(this.checker.locationInfo.filename\x20+\x20\x22(\x22\x20+\x20this.lineCol.line\x20+\x20\x22,\x22\x20+\x20this.lineCol.col\x20+\x20\x22):\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writePrefix(ast:\x20AST):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setError(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineCol.line\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineCol.col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPrefix();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writePrefixFromSym(symbol:\x20Symbol):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20&&\x20this.checker.locationInfo.lineMap)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(this.lineCol,\x20symbol.location,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineCol.line\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineCol.col\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitPrefix();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setError(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.locationInfo.lineMap)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(this.lineCol,\x20ast.minChar,\x20this.checker.locationInfo.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reportError(ast:\x20AST,\x20message:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.pushToErrorSink)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.captureError(message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20&&\x20this.parser.errorRecovery\x20&&\x20this.parser.errorCallback)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20(ast.limChar\x20-\x20ast.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback(ast.minChar,\x20len,\x20message,\x20this.checker.locationInfo.unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writePrefix(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.WriteLine(message);\x20//\x20Right\x20after\x20the\x20semi-colon\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reportErrorFromSym(symbol:\x20Symbol,\x20message:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.pushToErrorSink)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.captureError(message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parser.errorRecovery\x20&&\x20this.parser.errorCallback)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback(symbol.location,\x20symbol.length,\x20message,\x20this.checker.locationInfo.unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.writePrefixFromSym(symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.WriteLine(message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitterError(ast:\x20AST,\x20message:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Emitter\x20errors\x20are\x20not\x20recoverable,\x20stop\x20immediately\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20Error(\x22EmitError\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20duplicateIdentifier(ast:\x20AST,\x20name:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Duplicate\x20identifier\x20\x27\x22\x20+\x20name\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20showRef(ast:\x20AST,\x20text:\x20string,\x20symbol:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20defLineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20multiple\x20def\x20locations\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.getSourceLineCol(defLineCol,\x20symbol.location);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22symbol\x20\x22\x20+\x20text\x20+\x20\x22\x20defined\x20at\x20(\x22\x20+\x20defLineCol.line\x20+\x20\x22,\x22\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20defLineCol.col\x20+\x20\x22)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unresolvedSymbol(ast:\x20AST,\x20name:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22The\x20name\x20\x27\x22\x20+\x20name\x20+\x20\x22\x27\x20does\x20not\x20exist\x20in\x20the\x20current\x20scope\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbolDoesNotReferToAValue(ast:\x20AST,\x20name:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22The\x20name\x20\x27\x22\x20+\x20name\x20+\x20\x22\x27\x20does\x20not\x20refer\x20to\x20a\x20value\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20styleError(ast:\x20AST,\x20msg:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bkThrow\x20=\x20this.pushToErrorSink;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushToErrorSink\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22STYLE:\x20\x22\x20+\x20msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushToErrorSink\x20=\x20bkThrow;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20simpleError(ast:\x20AST,\x20msg:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20simpleErrorFromSym(sym:\x20Symbol,\x20msg:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportErrorFromSym(sym,\x20msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20invalidSuperReference(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.simpleError(ast,\x20\x22Keyword\x20\x27super\x27\x20can\x20only\x20be\x20used\x20inside\x20a\x20class\x20instance\x20method\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20valueCannotBeModified(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.simpleError(ast,\x20\x22The\x20left-hand\x20side\x20of\x20an\x20assignment\x20expression\x20must\x20be\x20a\x20variable,\x20property\x20or\x20indexer\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20invalidCall(ast:\x20CallExpression,\x20nodeType:\x20number,\x20scope:\x20SymbolScope):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType\x20=\x20ast.target.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeName\x20=\x20targetType.getScopedTypeName(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType.construct\x20&&\x20(nodeType\x20==\x20NodeType.Call))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Value\x20of\x20type\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x20is\x20not\x20callable.\x20\x20Did\x20you\x20mean\x20to\x20include\x20\x27new\x27?\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catString\x20=\x20(nodeType\x20==\x20NodeType.Call)\x20?\x20\x22callable\x22\x20:\x20\x22newable\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Value\x20of\x20type\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x20is\x20not\x20\x22\x20+\x20catString);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indexLHS(ast:\x20BinaryExpression,\x20scope:\x20SymbolScope):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType\x20=\x20ast.operand1.type.getScopedTypeName(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20indexType\x20=\x20ast.operand2.type.getScopedTypeName(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.simpleError(ast,\x20\x22Value\x20of\x20type\x20\x27\x22\x20+\x20targetType\x20+\x20\x22\x27\x20is\x20not\x20indexable\x20by\x20type\x20\x27\x22\x20+\x20indexType\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20incompatibleTypes(ast:\x20AST,\x20t1:\x20Type,\x20t2:\x20Type,\x20op:\x20string,\x20scope:\x20SymbolScope,\x20comparisonInfo?:TypeComparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!t1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t1\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!t2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t2\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20reason\x20=\x20comparisonInfo\x20?\x20comparisonInfo.message\x20:\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(op)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Operator\x20\x27\x22\x20+\x20op\x20+\x20\x22\x27\x20cannot\x20be\x20applied\x20to\x20types\x20\x27\x22\x20+\x20t1.getScopedTypeName(scope)\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x27\x20and\x20\x27\x22\x20+\x20t2.getScopedTypeName(scope)\x20+\x20\x22\x27\x22\x20+\x20(reason\x20?\x20\x22:\x20\x22\x20+\x20reason\x20:\x20\x22\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Cannot\x20convert\x20\x27\x22\x20+\x20t1.getScopedTypeName(scope)\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x27\x20to\x20\x27\x22\x20+\x20t2.getScopedTypeName(scope)\x20+\x20\x22\x27\x22\x20+\x20(reason\x20?\x20\x22:\x20\x22\x20+\x20reason\x20:\x20\x22\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20expectedClassOrInterface(ast:\x20AST):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.simpleError(ast,\x20\x22Expected\x20var,\x20class,\x20interface,\x20or\x20module\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unaryOperatorTypeError(ast:\x20AST,\x20op:\x20string,\x20type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(ast,\x20\x22Operator\x20\x27\x22\x20+\x20op\x20+\x20\x22\x27\x20cannot\x20be\x20applied\x20to\x20type\x20\x27\x22\x20+\x20type.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20function\x20hasFlag(val:\x20number,\x20flag:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20(val\x20&\x20flag)\x20!=\x200;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20ErrorRecoverySet\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comma\x20=\x201,\x20//\x20Comma\x0a\x20\x20\x20\x20\x20\x20\x20\x20SColon\x20=\x201\x20<<\x201,\x20//\x20SColon\x0a\x20\x20\x20\x20\x20\x20\x20\x20Asg\x20=\x201\x20<<\x202,\x20//\x20Asg\x0a\x20\x20\x20\x20\x20\x20\x20\x20BinOp\x20=\x201\x20<<\x203,\x20//\x20Lsh,\x20Rsh,\x20Rs2,\x20Le,\x20Ge,\x20INSTANCEOF,\x20EQ,\x20NE,\x20Eqv,\x20NEqv,\x20LogAnd,\x20LogOr,\x20AsgMul,\x20AsgDiv\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20AsgMod,\x20AsgAdd,\x20AsgSub,\x20AsgLsh,\x20AsgRsh,\x20AsgRs2,\x20AsgAnd,\x20AsgXor,\x20AsgOr,\x20QMark,\x20Mult,\x20Div,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Pct,\x20GT,\x20LT,\x20And,\x20Xor,\x20Or\x0a\x20\x20\x20\x20\x20\x20\x20\x20RBrack\x20=\x201\x20<<\x204,\x20//\x20RBrack\x0a\x20\x20\x20\x20\x20\x20\x20\x20RCurly\x20=\x201\x20<<\x205,\x20//\x20RCurly\x0a\x20\x20\x20\x20\x20\x20\x20\x20RParen\x20=\x201\x20<<\x206,\x20//\x20RParen\x0a\x20\x20\x20\x20\x20\x20\x20\x20Dot\x20=\x201\x20<<\x207,\x20//\x20Dot\x0a\x20\x20\x20\x20\x20\x20\x20\x20Colon\x20=\x201\x20<<\x208,\x20//\x20Colon\x0a\x20\x20\x20\x20\x20\x20\x20\x20PrimType\x20=\x201\x20<<\x209,\x20//\x20number,\x20string,\x20bool\x0a\x20\x20\x20\x20\x20\x20\x20\x20AddOp\x20=\x201\x20<<\x2010,\x20//\x20Add,\x20Sub\x0a\x20\x20\x20\x20\x20\x20\x20\x20LCurly\x20=\x201\x20<<\x2011,\x20//\x20LCurly\x0a\x20\x20\x20\x20\x20\x20\x20\x20PreOp\x20=\x201\x20<<\x2012,\x20//\x20Tilde,\x20Bang,\x20Inc,\x20Dec\x0a\x20\x20\x20\x20\x20\x20\x20\x20RegExp\x20=\x201\x20<<\x2013,\x20//\x20RegExp\x0a\x20\x20\x20\x20\x20\x20\x20\x20LParen\x20=\x201\x20<<\x2014,\x20//\x20LParen\x0a\x20\x20\x20\x20\x20\x20\x20\x20LBrack\x20=\x201\x20<<\x2015,\x20//\x20LBrack\x0a\x20\x20\x20\x20\x20\x20\x20\x20Scope\x20=\x201\x20<<\x2016,\x20//\x20Scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20In\x20=\x201\x20<<\x2017,\x20//\x20IN\x0a\x20\x20\x20\x20\x20\x20\x20\x20SCase\x20=\x201\x20<<\x2018,\x20//\x20CASE,\x20DEFAULT\x0a\x20\x20\x20\x20\x20\x20\x20\x20Else\x20=\x201\x20<<\x2019,\x20//\x20ELSE\x0a\x20\x20\x20\x20\x20\x20\x20\x20Catch\x20=\x201\x20<<\x2020,\x20//\x20CATCH,\x20FINALLY\x0a\x20\x20\x20\x20\x20\x20\x20\x20Var\x20=\x201\x20<<\x2021,\x20//\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20Stmt\x20=\x201\x20<<\x2022,\x20//\x20BREAK,\x20RETURN,\x20THROW,\x20DEBUGGER,\x20FOR,\x20SWITCH,\x20DO,\x20IF,\x20TRY,\x20WITH\x0a\x20\x20\x20\x20\x20\x20\x20\x20While\x20=\x201\x20<<\x2023,\x20//\x20WHILE\x0a\x20\x20\x20\x20\x20\x20\x20\x20ID\x20=\x201\x20<<\x2024,\x20//\x20ID\x0a\x20\x20\x20\x20\x20\x20\x20\x20Prefix\x20=\x201\x20<<\x2025,\x20//\x20VOID,\x20DELETE,\x20TYPEOF,\x20AWAIT\x0a\x20\x20\x20\x20\x20\x20\x20\x20Literal\x20=\x201\x20<<\x2026,\x20//\x20IntCon,\x20FltCon,\x20StrCon\x0a\x20\x20\x20\x20\x20\x20\x20\x20RLit\x20=\x201\x20<<\x2027,\x20//\x20THIS,\x20TRUE,\x20FALSE,\x20NULL\x0a\x20\x20\x20\x20\x20\x20\x20\x20Func\x20=\x201\x20<<\x2028,\x20//\x20FUNCTION\x0a\x20\x20\x20\x20\x20\x20\x20\x20EOF\x20=\x201\x20<<\x2029,\x20//\x20EOF\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Name\x20this\x20something\x20clearer.\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScriptS\x20=\x201\x20<<\x2030,\x20//\x20PROPERTY,\x20PRIVATE,\x20STATIC,\x20INTERFACE,\x20CLASS,\x20MODULE,\x20EXPORT,\x20IMPORT\x0a\x20\x20\x20\x20\x20\x20\x20\x20ExprStart\x20=\x20SColon\x20|\x20AddOp\x20|\x20LCurly\x20|\x20PreOp\x20|\x20RegExp\x20|\x20LParen\x20|\x20LBrack\x20|\x20ID\x20|\x20Prefix\x20|\x20RLit\x20|\x20Func\x20|\x20Literal,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StmtStart\x20=\x20ExprStart\x20|\x20SColon\x20|\x20Var\x20|\x20Stmt\x20|\x20While\x20|\x20TypeScriptS,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Postfix\x20=\x20Dot\x20|\x20LParen\x20|\x20LBrack,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20AllowedElements\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ModuleDeclarations\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassDeclarations\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InterfaceDeclarations\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AmbientDeclarations\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Properties\x20=\x201\x20<<\x2011,\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20Global\x20=\x20ModuleDeclarations\x20|\x20ClassDeclarations\x20|\x20InterfaceDeclarations\x20|\x20AmbientDeclarations,\x0a\x20\x20\x20\x20\x20\x20\x20\x20QuickParse\x20=\x20Global\x20|\x20Properties,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20Modifiers\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Readonly\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Getter\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Setter\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20ASTFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ExplicitSemicolon\x20=\x201,\x20//\x20statment\x20terminated\x20by\x20an\x20explicit\x20semicolon\x0a\x20\x20\x20\x20\x20\x20\x20\x20AutomaticSemicolon\x20=\x201\x20<<\x201,\x20//\x20statment\x20terminated\x20by\x20an\x20automatic\x20semicolon\x0a\x20\x20\x20\x20\x20\x20\x20\x20Writeable\x20=\x201\x20<<\x202,\x20\x20//\x20node\x20is\x20lhs\x20that\x20can\x20be\x20modified\x0a\x20\x20\x20\x20\x20\x20\x20\x20Error\x20=\x201\x20<<\x203,\x20//\x20node\x20has\x20an\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20DotLHSPartial\x20=\x201\x20<<\x204,\x20//\x20node\x20is\x20the\x20lhs\x20of\x20an\x20incomplete\x20dot\x20expr\x20at\x20cursor\x0a\x20\x20\x20\x20\x20\x20\x20\x20DotLHS\x20=\x201\x20<<\x205,\x20//\x20node\x20is\x20the\x20lhs\x20of\x20a\x20dot\x20expr\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsStatement\x20=\x201\x20<<\x206,\x20//\x20node\x20is\x20a\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20StrictMode\x20=\x201\x20<<\x207,\x20//\x20node\x20is\x20in\x20the\x20strict\x20mode\x20environment\x0a\x20\x20\x20\x20\x20\x20\x20\x20PossibleOptionalParameter\x20=\x201\x20<<\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassBaseConstructorCall\x20=\x201\x20<<\x209,\x0a\x20\x20\x20\x20\x20\x20\x20\x20OptionalName\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20flag\x20is\x20to\x20mark\x20lambda\x20nodes\x20to\x20note\x20that\x20the\x20LParen\x20of\x20an\x20expression\x20has\x20already\x20been\x20matched\x20in\x20the\x20lambda\x20header.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20The\x20flag\x20is\x20used\x20to\x20communicate\x20this\x20piece\x20of\x20information\x20to\x20the\x20calling\x20parseTerm,\x20which\x20intern\x20will\x20remove\x20it.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20Once\x20we\x20have\x20a\x20better\x20way\x20to\x20associate\x20information\x20with\x20nodes,\x20this\x20flag\x20should\x20not\x20be\x20used.\x0a\x20\x20\x20\x20\x20\x20\x20\x20SkipNextRParen\x20=\x201\x20<<\x2011,\x20\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20DeclFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LocalStatic\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GetAccessor\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SetAccessor\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20ModuleFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LocalStatic\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GetAccessor\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SetAccessor\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsEnum\x20=\x201\x20<<\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ShouldEmitModuleDecl\x20=\x201\x20<<\x209,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsWholeFile\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsDynamic\x20=\x201\x20<<\x2011,\x0a\x20\x20\x20\x20\x20\x20\x20\x20MustCaptureThis\x20=\x201\x20<<\x2012,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20SymbolFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LocalStatic\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GetAccessor\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SetAccessor\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Property\x20=\x201\x20<<\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Readonly\x20=\x201\x20<<\x209,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ModuleMember\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InterfaceMember\x20=\x201\x20<<\x2011,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassMember\x20=\x201\x20<<\x2012,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BuiltIn\x20=\x201\x20<<\x2013,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeSetDuringScopeAssignment\x20=\x201\x20<<\x2014,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Constant\x20=\x201\x20<<\x2015,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Optional\x20=\x201\x20<<\x2016,\x0a\x20\x20\x20\x20\x20\x20\x20\x20RecursivelyReferenced\x20=\x201\x20<<\x2017,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Bound\x20=\x201\x20<<\x2018,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CompilerGenerated\x20=\x201\x20<<\x2019,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20VarFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LocalStatic\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GetAccessor\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SetAccessor\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AutoInit\x20=\x201\x20<<\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Property\x20=\x201\x20<<\x209,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Readonly\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Class\x20=\x201\x20<<\x2011,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassProperty\x20=\x201\x20<<\x2012,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassBodyProperty\x20=\x201\x20<<\x2013,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassConstructorProperty\x20=\x201\x20<<\x2014,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassSuperMustBeFirstCallInConstructor\x20=\x201\x20<<\x2015,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Constant\x20=\x201\x20<<\x2016,\x0a\x20\x20\x20\x20\x20\x20\x20\x20MustCaptureThis\x20=\x201\x20<<\x2017,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20FncFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exported\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ambient\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LocalStatic\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GetAccessor\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SetAccessor\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Definition\x20=\x201\x20<<\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Signature\x20=\x201\x20<<\x209,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Method\x20=\x201\x20<<\x2010,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasReturnExpression\x20=\x201\x20<<\x2011,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CallMember\x20=\x201\x20<<\x2012,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ConstructMember\x20=\x201\x20<<\x2013,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasSelfReference\x20=\x201\x20<<\x2014,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsFatArrowFunction\x20=\x201\x20<<\x2015,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IndexerMember\x20=\x201\x20<<\x2016,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsFunctionExpression\x20=\x201\x20<<\x2017,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassMethod\x20=\x201\x20<<\x2018,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassPropertyMethodExported\x20=\x201\x20<<\x2019,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasSuperReferenceInFatArrowFunction\x20=\x201\x20<<\x2020,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsPropertyBound\x20=\x201\x20<<\x2021,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20SignatureFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsIndexer\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsStringIndexer\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsNumberIndexer\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20ToDeclFlags(fncFlags:\x20FncFlags)\x20:\x20DeclFlags;\x0a\x20\x20\x20\x20export\x20function\x20ToDeclFlags(varFlags:\x20VarFlags)\x20:\x20DeclFlags;\x0a\x20\x20\x20\x20export\x20function\x20ToDeclFlags(symFlags:\x20SymbolFlags):\x20DeclFlags;\x0a\x20\x20\x20\x20export\x20function\x20ToDeclFlags(moduleFlags:\x20ModuleFlags):\x20DeclFlags;\x0a\x20\x20\x20\x20export\x20function\x20ToDeclFlags(fncOrVarOrSymbolOrModuleFlags:\x20any)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20<DeclFlags>fncOrVarOrSymbolOrModuleFlags;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TypeFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasImplementation\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasSelfReference\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20MergeResult\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsEnum\x20=\x201\x20<<\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BuildingName\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasBaseType\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20HasBaseTypeOfObject\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IsClass\x20=\x201\x20<<\x207,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TypeRelationshipFlags\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20SuccessfulComparison\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SourceIsNullTargetIsVoidOrUndefined\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20RequiredPropertyIsMissing\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncompatibleSignatures\x20=\x201\x20<<\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SourceSignatureHasTooManyParameters\x20=\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncompatibleReturnTypes\x20=\x201\x20<<\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncompatiblePropertyTypes\x20=\x201\x20<<\x205,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncompatibleParameterTypes\x20=\x201\x20<<\x206,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20CodeGenTarget\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20ES3\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ES5\x20=\x201,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20ModuleGenTarget\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Synchronous\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Asynchronous\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Local\x20=\x201\x20<<\x201,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Compiler\x20defaults\x20to\x20generating\x20ES5-compliant\x20code\x20for\x0a\x20\x20\x20\x20//\x20\x20-\x20getters\x20and\x20setters\x0a\x20\x20\x20\x20export\x20var\x20codeGenTarget:\x20CodeGenTarget\x20=\x20CodeGenTarget.ES3;\x0a\x0a\x20\x20\x20\x20export\x20var\x20moduleGenTarget:\x20ModuleGenTarget\x20=\x20ModuleGenTarget.Synchronous;\x0a\x0a\x20\x20\x20\x20export\x20var\x20optimizeModuleCodeGen\x20=\x20true;\x0a\x0a\x20\x20\x20\x20export\x20function\x20flagsToString(e,\x20flags:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x201;\x20i\x20<\x20(1\x20<<\x2031)\x20;\x20i\x20=\x20i\x20<<\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((flags\x20&\x20i)\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20in\x20e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(e[k]\x20==\x20i)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(builder.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder\x20+=\x20\x22|\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder\x20+=\x20k;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20builder;\x0a\x20\x20\x20\x20}\x0a\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20class\x20BlockIntrinsics\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prototype\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toLocaleString\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20valueOf\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasOwnProperty\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20propertyIsEnumerable\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isPrototypeOf\x20=\x20undefined;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20initialize\x20the\x20\x27constructor\x27\x20field\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this[\x22constructor\x22]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IHashTable\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20getAllKeys():\x20string[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20add(key:\x20string,\x20data):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20addOrUpdate(key:\x20string,\x20data):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20map(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20void\x20,\x20context):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20every(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20some(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context):\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20count():\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20lookup(key:\x20string):\x20any;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20StringHashTable\x20implements\x20IHashTable\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20itemCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20table\x20=\x20<any>(<any>\x20new\x20BlockIntrinsics());\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllKeys():\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20in\x20this.table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.table[k]\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result[result.length]\x20=\x20k;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20add(key:\x20string,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.table[key]\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[key]\x20=\x20data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.itemCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addOrUpdate(key:\x20string,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.table[key]\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[key]\x20=\x20data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[key]\x20=\x20data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.itemCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20map(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20void\x20,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20in\x20this.table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20data\x20=\x20this.table[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(data\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fn(k,\x20this.table[k],\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20every(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20in\x20this.table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20data\x20=\x20this.table[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(data\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!fn(k,\x20this.table[k],\x20context))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20some(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20in\x20this.table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20data\x20=\x20this.table[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(data\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fn(k,\x20this.table[k],\x20context))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20count():\x20number\x20{\x20return\x20this.itemCount;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lookup(key:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20data\x20=\x20this.table[key];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(data\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20The\x20resident\x20table\x20is\x20expected\x20to\x20reference\x20the\x20same\x20table\x20object,\x20whereas\x20the\x20\x0a\x20\x20\x20\x20//\x20transientTable\x20may\x20reference\x20different\x20objects\x20over\x20time\x0a\x20\x20\x20\x20//\x20REVIEW:\x20\x20WARNING:\x20\x20For\x20performance\x20reasons,\x20neither\x20the\x20primary\x20nor\x20secondary\x20table\x20may\x20be\x20null\x0a\x20\x20\x20\x20export\x20class\x20DualStringHashTable\x20implements\x20IHashTable\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20insertPrimary\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20primaryTable:\x20IHashTable,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20secondaryTable:\x20IHashTable)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllKeys():\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20add(key:\x20string,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.insertPrimary)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.add(key,\x20data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.secondaryTable.add(key,\x20data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addOrUpdate(key:\x20string,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.insertPrimary)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.addOrUpdate(key,\x20data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.secondaryTable.addOrUpdate(key,\x20data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20map(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20void\x20,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.primaryTable.map(fn,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.secondaryTable.map(fn,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20every(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.every(fn,\x20context)\x20&&\x20this.secondaryTable.every(fn,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20some(fn:\x20(k:\x20string,\x20v,\x20c)\x20=>\x20bool,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.some(fn,\x20context)\x20||\x20this.secondaryTable.some(fn,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20count()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.primaryTable.count()\x20+\x20this.secondaryTable.count();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lookup(key:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20data\x20=\x20this.primaryTable.lookup(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(data\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.secondaryTable.lookup(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20numberHashFn(key:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20c2\x20=\x200x27d4eb2d;\x20//\x20a\x20prime\x20or\x20an\x20odd\x20constant\x0a\x20\x20\x20\x20\x20\x20\x20\x20key\x20=\x20(key\x20^\x2061)\x20^\x20(key\x20>>>\x2016);\x0a\x20\x20\x20\x20\x20\x20\x20\x20key\x20=\x20key\x20+\x20(key\x20<<\x203);\x0a\x20\x20\x20\x20\x20\x20\x20\x20key\x20=\x20key\x20^\x20(key\x20>>>\x204);\x0a\x20\x20\x20\x20\x20\x20\x20\x20key\x20=\x20key\x20*\x20c2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20key\x20=\x20key\x20^\x20(key\x20>>>\x2015);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20key;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20combineHashes(key1:\x20number,\x20key2:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20key2\x20^\x20((key1\x20>>\x205)\x20+\x20key1);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20HashEntry\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20next:\x20HashEntry;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20key,\x20public\x20data)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20HashTable\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20itemCount:\x20number\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20table\x20=\x20new\x20HashEntry[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20size:\x20number,\x20public\x20hashFn:\x20(key)\x20=>number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20equalsFn:\x20(key1,\x20key2)\x20=>bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i:\x20number\x20=\x200;\x20i\x20<\x20this.size;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[i]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20add(key,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20current:\x20HashEntry;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20entry:\x20HashEntry\x20=\x20new\x20HashEntry(key,\x20data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20val:\x20number\x20=\x20this.hashFn(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20val\x20=\x20val\x20%\x20this.size;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(current\x20=\x20this.table[val];\x20current\x20!=\x20null\x20;\x20current\x20=\x20current.next)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.equalsFn(key,\x20current.key))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20entry.next\x20=\x20this.table[val];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[val]\x20=\x20entry;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.itemCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20remove(key)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20current:\x20HashEntry;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20val:\x20number\x20=\x20this.hashFn(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20val\x20=\x20val\x20%\x20this.size;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevEntry:\x20HashEntry\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(current\x20=\x20this.table[val];\x20current\x20!=\x20null\x20;\x20current\x20=\x20current.next)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.equalsFn(key,\x20current.key))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20current.data;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.itemCount--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevEntry)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevEntry.next\x20=\x20current.next;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.table[val]\x20=\x20current.next;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevEntry\x20=\x20current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20count():\x20number\x20{\x20return\x20this.itemCount;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lookup(key)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20current:\x20HashEntry;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20val:\x20number\x20=\x20this.hashFn(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20val\x20=\x20val\x20%\x20this.size;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(current\x20=\x20this.table[val];\x20current\x20!=\x20null\x20;\x20current\x20=\x20current.next)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.equalsFn(key,\x20current.key))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(current.data);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Simple\x20Hash\x20table\x20with\x20list\x20of\x20keys\x20and\x20values\x20matching\x20each\x20other\x20at\x20the\x20given\x20index\x0a\x20\x20\x20\x20export\x20class\x20SimpleHashTable\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20keys\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20values\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lookup(key,\x20findValue?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20searchArray\x20=\x20this.keys;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(findValue)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20searchArray\x20=\x20this.values;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20searchArray.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(searchArray[i]\x20==\x20key)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20key:\x20this.keys[i],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20data:\x20this.values[i],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20add(key,\x20data):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lookupData\x20=\x20this.lookup(key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lookupData)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.keys[this.keys.length]\x20=\x20key;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.values[this.values.length]\x20=\x20data;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20class\x20IncrementalParser\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20astLogger:\x20AstLogger;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(private\x20logger:\x20TypeScript.ILogger)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.astLogger\x20=\x20new\x20AstLogger(this.logger);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20\x22null\x22\x20if\x20\x22editRange\x22\x20cannot\x20be\x20safely\x20determined\x20to\x20be\x20inside\x20a\x20single\x20scope.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getEnclosingScopeContextIfSingleScopeEdit(previousScript:\x20Script,\x20scriptId:\x20string,\x20newSourceText:\x20ISourceText,\x20editRange:\x20ScriptEditRange):\x20EnclosingScopeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22checkEditsInsideSingleScope(\x5c\x22\x22\x20+\x20scriptId\x20+\x20\x22\x5c\x22)\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(editRange\x20===\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22editRange\x20should\x20be\x20valid\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(editRange.isUnknown())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20edit\x20range\x20is\x20unknown\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scope1\x20=\x20TypeScript.findEnclosingScopeAt(this.logger,\x20previousScript,\x20newSourceText,\x20editRange.minChar,\x20false/*isMemberCompletion*/);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scope2\x20=\x20TypeScript.findEnclosingScopeAt(this.logger,\x20previousScript,\x20newSourceText,\x20editRange.limChar,\x20false/*isMemberCompletion*/);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope1\x20==\x20null\x20||\x20scope2\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20containing\x20scopes\x20cannot\x20be\x20determined\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20only\x20support\x20changes\x20within\x20a\x20single\x20containing\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope1.scopeStartAST\x20!==\x20scope2.scopeStartAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20edit\x20overlaps\x202\x20disctint\x20scopes\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newScopeLength\x20=\x20scope1.scopeStartAST.limChar\x20-\x20scope1.scopeStartAST.minChar\x20+\x20editRange.delta;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(newScopeLength\x20<=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20scope\x20has\x20been\x20entirely\x20removed\x20from\x20new\x20source\x20text\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20scope1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20attemptIncrementalUpdateUnit(previousScript:\x20Script,\x20scriptId:\x20string,\x20newSourceText:\x20ISourceText,\x20editRange:\x20ScriptEditRange):\x20UpdateUnitResult\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22attemptIncrementalUpdateUnit(\x5c\x22\x22\x20+\x20scriptId\x20+\x20\x22\x5c\x22)\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(editRange\x20===\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22editRange\x20should\x20be\x20valid\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scope1\x20=\x20this.getEnclosingScopeContextIfSingleScopeEdit(previousScript,\x20scriptId,\x20newSourceText,\x20editRange);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope1\x20===\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newScopeLength\x20=\x20scope1.scopeStartAST.limChar\x20-\x20scope1.scopeStartAST.minChar\x20+\x20editRange.delta;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Heuristic:\x20if\x20the\x20range\x20to\x20reparse\x20is\x20too\x20big,\x20bail\x20out.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20because\x20a\x20full\x20parse\x20will\x20be\x20faster\x20than\x20an\x20incremental\x20parse\x20followed\x20by\x20all\x20the\x20necessary\x20fix-ups\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(newScopeLength\x20>=\x20newSourceText.getLength()\x20/\x202)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20range\x20of\x20scope\x20to\x20reparse\x20(\x22\x20+\x20newScopeLength\x20+\x20\x22\x20characters)\x20is\x20greater\x20than\x20half\x20the\x20size\x20of\x20the\x20source\x20text\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Capture\x20parsing\x20errors\x20so\x20that\x20they\x20are\x20part\x20of\x20\x22updateResult\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parseErrors:\x20TypeScript.ErrorEntry[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20errorCapture\x20=\x20function(minChar:\x20number,\x20charLen:\x20number,\x20message:\x20string,\x20unitIndex:\x20number):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseErrors.push(new\x20TypeScript.ErrorEntry(unitIndex,\x20minChar,\x20minChar\x20+\x20charLen,\x20message));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quickParseResult\x20=\x20TypeScript.quickParse(this.logger,\x20scope1.scopeStartAST,\x20newSourceText,\x20scope1.scopeStartAST.minChar,\x20scope1.scopeStartAST.minChar\x20+\x20newScopeLength,\x20errorCapture);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(quickParseResult.endLexState\x20!=\x20TypeScript.LexState.Start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20scope\x20contains\x20unterminated\x20comment\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scriptFragment\x20=\x20quickParseResult.Script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scriptFragment.vars.members.length\x20!==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20defines\x20variables\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(scriptFragment.scopes.members.length\x20!==\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20defines\x20more\x20than\x20one\x20scope\x20(or\x20none)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20detects\x20adding\x20close\x20curlies,\x20since\x20they\x20have\x20the\x20side\x20effect\x20of\x20having\x20the\x20parser\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20parse\x20more\x20members\x20in\x20the\x20scope\x20range.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scriptFragment.bod.members.length\x20!==\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20defines\x20more\x20than\x20one\x20scope\x20(or\x20none)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldScope\x20=\x20scope1.scopeStartAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newScope\x20=\x20scriptFragment.bod.members[0];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(oldScope.nodeType\x20!=\x20newScope.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20does\x20not\x20define\x20the\x20same\x20scope\x20type\x20as\x20the\x20existing\x20scope\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(<any>oldScope).leftCurlyCount\x20||\x20!(<any>oldScope).rightCurlyCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20sopce\x20doesn\x27t\x20have\x20left/right\x20curly\x20count\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<any>oldScope).leftCurlyCount\x20!==\x20(<any>newScope).leftCurlyCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20contains\x20more\x20(or\x20fewer)\x20left\x20curly\x20braces\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<any>oldScope).rightCurlyCount\x20!==\x20(<any>newScope).rightCurlyCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20source\x20text\x20contains\x20more\x20(or\x20fewer)\x20right\x20curly\x20braces\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(newScope.minChar\x20!==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20function\x20declaration\x20does\x20not\x20start\x20at\x20position\x200\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(newScope.limChar\x20!==\x20newScopeLength)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22\x20\x20Bailing\x20out\x20because\x20new\x20function\x20declaration\x20does\x20not\x20end\x20at\x20the\x20new\x20end\x20position\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeScript.UpdateUnitResult.singleScopeEdits(previousScript,\x20scriptFragment,\x20oldScope,\x20newScope,\x20editRange,\x20parseErrors);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mergeTrees(updateResult:\x20UpdateUnitResult):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.timeFunction(this.logger,\x20\x22mergeTrees()\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20editRange\x20=\x20new\x20ScriptEditRange(updateResult.scope1.minChar,\x20updateResult.scope1.limChar,\x20updateResult.editRange.delta);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Update\x20positions\x20in\x20current\x20ast\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.applyDeltaPosition(updateResult.script1,\x20editRange.limChar,\x20editRange.delta);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Update\x20positions\x20in\x20new\x20(partial)\x20ast\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.applyDeltaPosition(updateResult.script2,\x200,\x20editRange.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Merge\x20linemaps\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mergeLocationInfo(updateResult.script1,\x20updateResult.script2,\x20editRange);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20Replace\x20old\x20AST\x20for\x20scope\x20with\x20new\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.replaceAST(updateResult.script1,\x20updateResult.scope1,\x20updateResult.scope2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20replaceAST(script:\x20TypeScript.AST,\x20oldAst:\x20TypeScript.AST,\x20newAst:\x20TypeScript.AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20TypeScript.IAstWalker)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur\x20===\x20oldAst)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Transfer\x20comments\x20ownership\x20to\x20new\x20AST.\x20We\x20need\x20this\x20because\x20when\x20\x22quick\x20parsing\x22\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20new\x20AST,\x20we\x20don\x27t\x20take\x20into\x20account\x20the\x20text\x20before\x20and\x20after\x20the\x20\x22minChar/limChar\x22\x20pair\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20of\x20the\x20scope,\x20which\x20don\x27t\x20include\x20pre/post-comments.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20newAst.preComments\x20=\x20cur.preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20newAst.postComments\x20=\x20cur.postComments;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22replaced\x20old\x20AST\x20node\x20with\x20new\x20one\x20in\x20script\x20AST\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.stopWalk();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20newAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Avoid\x20visiting\x20sub-trees\x20outside\x20of\x20the\x20edit\x20range\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(TypeScript.isValidAstNode(cur))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur.limChar\x20<\x20oldAst.minChar\x20||\x20cur.minChar\x20>\x20oldAst.limChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(script,\x20pre);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20mergeLocationInfo(script:\x20TypeScript.Script,\x20partial:\x20TypeScript.Script,\x20editRange:\x20ScriptEditRange)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20merger\x20these\x20fields,\x20as\x20the\x20original\x20script\x20has\x20the\x20right\x20values\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//script.locationInfo.unitIndex\x20=\x20partial.locationInfo.unitIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//script.locationInfo.filename\x20=\x20partial.locationInfo.filename;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineMap1\x20=\x20script.locationInfo.lineMap;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineMap2\x20=\x20partial.locationInfo.lineMap;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.logger.information())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22lineMap1\x20(before):\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.astLogger.logLinemap(lineMap1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22lineMap2\x20(quick\x20parse):\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.astLogger.logLinemap(lineMap2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22EditRange=\x22\x20+\x20editRange);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Skip\x20entries\x20<\x20minChar\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i1\x20=\x202;\x20//\x20lineMap[0]\x20is\x20always\x20undefined,\x20lineMap[1]\x20is\x20always\x200.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i2\x20=\x202;\x20//\x20lineMap[0]\x20is\x20always\x20undefined,\x20lineMap[1]\x20is\x20always\x200.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len1\x20=\x20lineMap1.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len2\x20=\x20lineMap2.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(i1\x20<\x20len1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lineMap1[i1]\x20<=\x20editRange.minChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Nothing\x20to\x20do\x20for\x20this\x20entry,\x20since\x20it\x27s\x20before\x20the\x20range\x20of\x20the\x20change\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(lineMap1[i1]\x20>=\x20editRange.limChar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Apply\x20delta\x20to\x20this\x20entry,\x20since\x20it\x27s\x20outside\x20the\x20range\x20of\x20the\x20change\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineMap1[i1]\x20+=\x20editRange.delta;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i2\x20<\x20len2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20a\x20new\x20entry\x20to\x20lineMap1\x20corresponding\x20to\x20lineMap2\x20in\x20new\x20range\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineMap1.splice(i1,\x200,\x20lineMap2[i2]\x20+\x20editRange.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20len1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i2++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20/*\x20i2\x20>=\x20len\x202\x20*/\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Remove\x20this\x20entry,\x20since\x20there\x20is\x20no\x20corresponding\x20entry\x20in\x20the\x20new\x20map\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineMap1.splice(i1,\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20len1--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Merge\x20the\x20remaining\x20entries\x20in\x20lineMap2\x20while\x20maintaing\x20the\x20constraint\x20that\x20a\x20lineMap\x20is\x20sorted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i2\x20<\x20len2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20i1\x20>=\x20len1\x20&&\x20i2\x20<\x20len2\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lineMap1[len1\x20-\x201]\x20>=\x20(lineMap2[i2]\x20+\x20editRange.minChar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20lineMap2\x20needs\x20to\x20be\x20merged\x20within\x20lineMap1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1\x20=\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(i1\x20<\x20len1\x20&&\x20i2\x20<\x20len2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lineMap1[i1]\x20<\x20(lineMap2[i2]\x20+\x20editRange.minChar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineMap1.splice(i1,\x200,\x20lineMap2[i2]\x20+\x20editRange.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20len1++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i2++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Append\x20all\x20the\x20remaining\x20entries\x20in\x20lineMap2\x20to\x20the\x20end\x20of\x20lineMap1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20i2\x20<\x20len2;\x20i2++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineMap1.push(lineMap2[i2]\x20+\x20editRange.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.logger.information())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.logger.log(\x22lineMap1\x20(after\x20merge):\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.astLogger.logLinemap(lineMap1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20applyDeltaPosition(ast:\x20TypeScript.AST,\x20start:\x20number,\x20delta:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applyDelta\x20=\x20(ast:\x20TypeScript.AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.minChar\x20!==\x20-1\x20&&\x20ast.minChar\x20>=\x20start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20+=\x20delta;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.limChar\x20!==\x20-1\x20&&\x20ast.limChar\x20>=\x20start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20+=\x20delta;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applyDeltaToComments\x20=\x20(comments:\x20TypeScript.Comment[])\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments\x20&&\x20comments.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20comments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applyDelta(comments[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pre\x20=\x20function(cur:\x20TypeScript.AST,\x20parent:\x20TypeScript.AST,\x20walker:\x20TypeScript.IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20*Before*\x20applying\x20delta\x20to\x20this,\x20check\x20if\x20we\x20need\x20to\x20go\x20to\x20children\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur.limChar\x20!==\x20-1\x20&&\x20cur.limChar\x20<\x20start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x20//\x20Done\x20with\x20applying\x20Delta\x20for\x20this\x20sub-tree\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Apply\x20delta\x20to\x20this\x20node\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applyDelta(cur);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applyDeltaToComments(cur.preComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applyDeltaToComments(cur.postComments);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(ast,\x20pre);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0ainterface\x20IResolvedFile\x20{\x0a\x20\x20\x20\x20content:\x20string;\x0a\x20\x20\x20\x20path:\x20string;\x0a}\x0a\x0ainterface\x20IFileWatcher\x20{\x0a\x20\x20\x20\x20close():\x20void;\x0a}\x0a\x0ainterface\x20IIO\x20{\x0a\x20\x20\x20\x20readFile(path:\x20string):\x20string;\x0a\x20\x20\x20\x20writeFile(path:\x20string,\x20contents:\x20string):\x20void;\x0a\x20\x20\x20\x20createFile(path:\x20string,\x20useUTF8?:\x20bool):\x20ITextWriter;\x0a\x20\x20\x20\x20deleteFile(path:\x20string):\x20void;\x0a\x20\x20\x20\x20dir(path:\x20string,\x20re?:\x20RegExp,\x20options?:\x20{\x20recursive?:\x20bool;\x20}):\x20string[];\x0a\x20\x20\x20\x20fileExists(path:\x20string):\x20bool;\x0a\x20\x20\x20\x20directoryExists(path:\x20string):\x20bool;\x0a\x20\x20\x20\x20createDirectory(path:\x20string):\x20void;\x0a\x20\x20\x20\x20resolvePath(path:\x20string):\x20string;\x0a\x20\x20\x20\x20dirName(path:\x20string):\x20string;\x0a\x20\x20\x20\x20findFile(rootPath:\x20string,\x20partialFilePath:\x20string):\x20IResolvedFile;\x0a\x20\x20\x20\x20print(str:\x20string):\x20void;\x0a\x20\x20\x20\x20printLine(str:\x20string):\x20void;\x0a\x20\x20\x20\x20arguments:\x20string[];\x0a\x20\x20\x20\x20stderr:\x20ITextWriter;\x0a\x20\x20\x20\x20stdout:\x20ITextWriter;\x0a\x20\x20\x20\x20watchFile(filename:\x20string,\x20callback:\x20(string)\x20=>\x20void\x20):\x20IFileWatcher;\x0a\x20\x20\x20\x20run(source:\x20string,\x20filename:\x20string):\x20void;\x0a\x20\x20\x20\x20getExecutingFilePath():\x20string;\x0a\x20\x20\x20\x20quit(exitCode?:\x20number);\x0a}\x0a\x0amodule\x20IOUtils\x20{\x0a\x20\x20\x20\x20//\x20Creates\x20the\x20directory\x20including\x20its\x20parent\x20if\x20not\x20already\x20present\x0a\x20\x20\x20\x20function\x20createDirectoryStructure(ioHost:\x20IIO,\x20dirName:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ioHost.directoryExists(dirName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentDirectory\x20=\x20ioHost.dirName(dirName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentDirectory\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createDirectoryStructure(ioHost,\x20parentDirectory);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20ioHost.createDirectory(dirName);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Creates\x20a\x20file\x20including\x20its\x20directory\x20structure\x20if\x20not\x20already\x20present\x0a\x20\x20\x20\x20export\x20function\x20createFileAndFolderStructure(ioHost:\x20IIO,\x20fileName:\x20string,\x20useUTF8?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20ioHost.resolvePath(fileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20dirName\x20=\x20ioHost.dirName(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20createDirectoryStructure(ioHost,\x20dirName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ioHost.createFile(path,\x20useUTF8);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20throwIOError(message:\x20string,\x20error:\x20Error)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20errorMessage\x20=\x20message;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(error\x20&&\x20error.message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorMessage\x20+=\x20(\x22\x20\x22\x20+\x20error.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(errorMessage);\x0a\x20\x20\x20\x20}\x0a}\x0a\x0a//\x20Declare\x20dependencies\x20needed\x20for\x20all\x20supported\x20hosts\x0adeclare\x20class\x20Enumerator\x20{\x0a\x20\x20\x20\x20public\x20atEnd():\x20bool;\x0a\x20\x20\x20\x20public\x20moveNext();\x0a\x20\x20\x20\x20public\x20item():\x20any;\x0a\x20\x20\x20\x20constructor\x20(o:\x20any);\x0a}\x0adeclare\x20function\x20setTimeout(callback:\x20()\x20=>void\x20,\x20ms?:\x20number);\x0adeclare\x20var\x20require:\x20any;\x0adeclare\x20module\x20process\x20{\x0a\x20\x20\x20\x20export\x20var\x20argv:\x20string[];\x0a\x20\x20\x20\x20export\x20var\x20platform:\x20string;\x0a\x20\x20\x20\x20export\x20function\x20on(event:\x20string,\x20handler:\x20(any)\x20=>\x20void\x20):\x20void;\x0a\x20\x20\x20\x20export\x20module\x20stdout\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20write(str:\x20string);\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20export\x20module\x20stderr\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20function\x20write(str:\x20string);\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20export\x20module\x20mainModule\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20export\x20var\x20filename:\x20string;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20export\x20function\x20exit(exitCode?:\x20number);\x0a}\x0a\x0avar\x20IO\x20=\x20(function()\x20{\x0a\x0a\x20\x20\x20\x20//\x20Create\x20an\x20IO\x20object\x20for\x20use\x20inside\x20WindowsScriptHost\x20hosts\x0a\x20\x20\x20\x20//\x20Depends\x20on\x20WSCript\x20and\x20FileSystemObject\x0a\x20\x20\x20\x20function\x20getWindowsScriptHostIO():\x20IIO\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20fso\x20=\x20new\x20ActiveXObject(\x22Scripting.FileSystemObject\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20streamObjectPool\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20getStreamObject():\x20any\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(streamObjectPool.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20streamObjectPool.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20ActiveXObject(\x22ADODB.Stream\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20releaseStreamObject(obj:\x20any)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObjectPool.push(obj);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20args\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20WScript.Arguments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args[i]\x20=\x20WScript.Arguments.Item(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20readFile:\x20function(path)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20streamObj\x20=\x20getStreamObject();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Open();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Type\x20=\x202;\x20//\x20Text\x20data\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Charset\x20=\x20\x27x-ansi\x27;\x20//\x20Assume\x20we\x20are\x20reading\x20ansi\x20text\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.LoadFromFile(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bomChar\x20=\x20streamObj.ReadText(2);\x20//\x20Read\x20the\x20BOM\x20char\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Position\x20=\x200;\x20//\x20Position\x20has\x20to\x20be\x20at\x200\x20before\x20changing\x20the\x20encoding\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((bomChar.charCodeAt(0)\x20==\x200xFE\x20&&\x20bomChar.charCodeAt(1)\x20==\x200xFF)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20||\x20(bomChar.charCodeAt(0)\x20==\x200xFF\x20&&\x20bomChar.charCodeAt(1)\x20==\x200xFE))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Charset\x20=\x20\x27unicode\x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(bomChar.charCodeAt(0)\x20==\x200xEF\x20&&\x20bomChar.charCodeAt(1)\x20==\x200xBB)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Charset\x20=\x20\x27utf-8\x27;\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Read\x20the\x20whole\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20str\x20=\x20streamObj.ReadText(-1\x20/*\x20read\x20from\x20the\x20current\x20position\x20to\x20EOS\x20*/);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20releaseStreamObject(streamObj);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<string>str;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Error\x20reading\x20file\x20\x5c\x22\x22\x20+\x20path\x20+\x20\x22\x5c\x22.\x22,\x20err);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20writeFile:\x20function(path,\x20contents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20file\x20=\x20this.createFile(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20file.Write(contents);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20file.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fileExists:\x20function(path:\x20string):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fso.FileExists(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvePath:\x20function(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fso.GetAbsolutePathName(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dirName:\x20function(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fso.GetParentFolderName(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20findFile:\x20function(rootPath:\x20string,\x20partialFilePath:\x20string):\x20IResolvedFile\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20fso.GetAbsolutePathName(rootPath)\x20+\x20\x22/\x22\x20+\x20partialFilePath;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fso.FileExists(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20content\x20=\x20this.readFile(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20content:\x20content,\x20path:\x20path\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//Tools.CompilerDiagnostics.debugPrint(\x22Could\x20not\x20find\x20\x22\x20+\x20path\x20+\x20\x22,\x20trying\x20parent\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rootPath\x20=\x20fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rootPath\x20==\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x20=\x20fso.BuildPath(rootPath,\x20partialFilePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20deleteFile:\x20function(path:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fso.FileExists(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fso.DeleteFile(path,\x20true);\x20//\x20true:\x20delete\x20read-only\x20files\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20delete\x20file\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createFile:\x20function\x20(path,\x20useUTF8?)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20streamObj\x20=\x20getStreamObject();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Charset\x20=\x20useUTF8\x20?\x20\x27utf-8\x27\x20:\x20\x27x-ansi\x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Open();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Write:\x20function\x20(str)\x20{\x20streamObj.WriteText(str,\x200);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WriteLine:\x20function\x20(str)\x20{\x20streamObj.WriteText(str,\x201);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Close:\x20function()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.SaveToFile(path,\x202);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(saveError)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20write\x20to\x20file\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20saveError);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20finally\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(streamObj.State\x20!=\x200\x20/*adStateClosed*/)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20streamObj.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20releaseStreamObject(streamObj);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(creationError)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20write\x20to\x20file\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20creationError);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20directoryExists:\x20function(path)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<bool>fso.FolderExists(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createDirectory:\x20function(path)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.directoryExists(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fso.CreateFolder(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20create\x20directory\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dir:\x20function(path,\x20spec?,\x20options?)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20options\x20=\x20options\x20||\x20<{\x20recursive?:\x20bool;\x20}>{};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20filesInFolder(folder,\x20root):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paths\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fc:\x20Enumerator;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(options.recursive)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fc\x20=\x20new\x20Enumerator(folder.subfolders);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20!fc.atEnd()\x20;\x20fc.moveNext())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paths\x20=\x20paths.concat(filesInFolder(fc.item(),\x20root\x20+\x20\x22/\x22\x20+\x20fc.item().Name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fc\x20=\x20new\x20Enumerator(folder.files);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20!fc.atEnd()\x20;\x20fc.moveNext())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!spec\x20||\x20fc.item().Name.match(spec))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paths.push(root\x20+\x20\x22/\x22\x20+\x20fc.item().Name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20paths;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20folder\x20=\x20fso.GetFolder(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paths\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20filesInFolder(folder,\x20path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20print:\x20function(str)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WScript.StdOut.Write(str);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printLine:\x20function(str)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WScript.Echo(str);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arguments:\x20<string[]>args,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stderr:\x20WScript.StdErr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stdout:\x20WScript.StdOut,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20watchFile:\x20null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20run:\x20function(source,\x20filename)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20eval(source);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Error\x20while\x20executing\x20file\x20\x27\x22\x20+\x20filename\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getExecutingFilePath:\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20WScript.ScriptFullName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quit:\x20function\x20(exitCode?\x20:\x20number\x20=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WScript.Quit(exitCode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20//\x20Create\x20an\x20IO\x20object\x20for\x20use\x20inside\x20Node.js\x20hosts\x0a\x20\x20\x20\x20//\x20Depends\x20on\x20\x27fs\x27\x20and\x20\x27path\x27\x20modules\x0a\x20\x20\x20\x20function\x20getNodeIO():\x20IIO\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20_fs\x20=\x20require(\x27fs\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20_path\x20=\x20require(\x27path\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20_module\x20=\x20require(\x27module\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20readFile:\x20function(file)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20buffer\x20=\x20_fs.readFileSync(file);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(buffer[0])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xFE:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(buffer[1]\x20==\x200xFF)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20utf16-be.\x20Reading\x20the\x20buffer\x20as\x20big\x20endian\x20is\x20not\x20supported,\x20so\x20convert\x20it\x20to\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Little\x20Endian\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((i\x20+\x201)\x20<\x20buffer.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20buffer[i]\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20buffer[i]\x20=\x20buffer[i\x20+\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20buffer[i\x20+\x201]\x20=\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i\x20+=\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20buffer.toString(\x22ucs2\x22,\x202);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xFF:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(buffer[1]\x20==\x200xFE)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20utf16-le\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20buffer.toString(\x22ucs2\x22,\x202);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xEF:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(buffer[1]\x20==\x200xBB)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20utf-8\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20buffer.toString(\x22utf8\x22,\x203);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Default\x20behaviour\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20buffer.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Error\x20reading\x20file\x20\x5c\x22\x22\x20+\x20file\x20+\x20\x22\x5c\x22.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20writeFile:\x20<(path:\x20string,\x20contents:\x20string)\x20=>\x20void\x20>_fs.writeFileSync,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20deleteFile:\x20function(path)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.unlinkSync(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20delete\x20file\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fileExists:\x20function(path):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20_fs.existsSync(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createFile:\x20function(path,\x20useUTF8?)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20mkdirRecursiveSync(path)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stats\x20=\x20_fs.statSync(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stats.isFile())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22\x5c\x22\x22\x20+\x20path\x20+\x20\x22\x5c\x22\x20exists\x20but\x20isn\x27t\x20a\x20directory.\x22,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(stats.isDirectory())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mkdirRecursiveSync(_path.dirname(path));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.mkdirSync(path,\x200775);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mkdirRecursiveSync(_path.dirname(path));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fd\x20=\x20_fs.openSync(path,\x20\x27w\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20write\x20to\x20file\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Write:\x20function(str)\x20{\x20_fs.writeSync(fd,\x20str);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WriteLine:\x20function(str)\x20{\x20_fs.writeSync(fd,\x20str\x20+\x20\x27\x5cr\x5cn\x27);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Close:\x20function()\x20{\x20_fs.closeSync(fd);\x20fd\x20=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dir:\x20function\x20dir(path,\x20spec?,\x20options?)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20options\x20=\x20options\x20||\x20<{\x20recursive?:\x20bool;\x20}>{};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20filesInFolder(folder:\x20string):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paths\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20files\x20=\x20_fs.readdirSync(folder);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20files.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stat\x20=\x20_fs.statSync(folder\x20+\x20\x22/\x22\x20+\x20files[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(options.recursive\x20&&\x20stat.isDirectory())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paths\x20=\x20paths.concat(filesInFolder(folder\x20+\x20\x22/\x22\x20+\x20files[i]));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(stat.isFile()\x20&&\x20(!spec\x20||\x20files[i].match(spec)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paths.push(folder\x20+\x20\x22/\x22\x20+\x20files[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20paths;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20filesInFolder(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createDirectory:\x20function(path:\x20string):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.directoryExists(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.mkdirSync(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20IOUtils.throwIOError(\x22Couldn\x27t\x20create\x20directory\x20\x27\x22\x20+\x20path\x20+\x20\x22\x27.\x22,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20directoryExists:\x20function(path:\x20string):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20_fs.existsSync(path)\x20&&\x20_fs.lstatSync(path).isDirectory();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvePath:\x20function(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20_path.resolve(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dirName:\x20function(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20_path.dirname(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20findFile:\x20function(rootPath:\x20string,\x20partialFilePath):\x20IResolvedFile\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20rootPath\x20+\x20\x22/\x22\x20+\x20partialFilePath;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(_fs.existsSync(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20content\x20=\x20this.readFile(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20content:\x20content,\x20path:\x20path\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//Tools.CompilerDiagnostics.debugPrint((\x22Could\x20not\x20find\x20\x22\x20+\x20path)\x20+\x20\x22,\x20trying\x20parent\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentPath\x20=\x20_path.resolve(rootPath,\x20\x22..\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Node\x20will\x20just\x20continue\x20to\x20repeat\x20the\x20root\x20path,\x20rather\x20than\x20return\x20null\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rootPath\x20===\x20parentPath)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rootPath\x20=\x20parentPath;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x20=\x20_path.resolve(rootPath,\x20partialFilePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20print:\x20function(str)\x20{\x20process.stdout.write(str)\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printLine:\x20function(str)\x20{\x20process.stdout.write(str\x20+\x20\x27\x5cn\x27)\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arguments:\x20process.argv.slice(2),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stderr:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Write:\x20function(str)\x20{\x20process.stderr.write(str);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WriteLine:\x20function(str)\x20{\x20process.stderr.write(str\x20+\x20\x27\x5cn\x27);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Close:\x20function()\x20{\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stdout:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Write:\x20function(str)\x20{\x20process.stdout.write(str);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20WriteLine:\x20function(str)\x20{\x20process.stdout.write(str\x20+\x20\x27\x5cn\x27);\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Close:\x20function()\x20{\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20watchFile:\x20function(filename:\x20string,\x20callback:\x20(string)\x20=>\x20void\x20):\x20IFileWatcher\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20firstRun\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20processingChange\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fileChanged:\x20any\x20=\x20function(curr,\x20prev)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!firstRun)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(curr.mtime\x20<\x20prev.mtime)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.unwatchFile(filename,\x20fileChanged);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!processingChange)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20processingChange\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callback(filename);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20setTimeout(function()\x20{\x20processingChange\x20=\x20false;\x20},\x20100);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20firstRun\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.watchFile(filename,\x20{\x20persistent:\x20true,\x20interval:\x20500\x20},\x20fileChanged);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fileChanged();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20filename:\x20filename,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20close:\x20function()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_fs.unwatchFile(filename,\x20fileChanged);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20run:\x20function(source,\x20filename)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20require.main.filename\x20=\x20filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20require.main.paths\x20=\x20_module._nodeModulePaths(_path.dirname(_fs.realpathSync(filename)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20require.main._compile(source,\x20filename);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getExecutingFilePath:\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20process.mainModule.filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quit:\x20process.exit\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20if\x20(typeof\x20ActiveXObject\x20===\x20\x22function\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20getWindowsScriptHostIO();\x0a\x20\x20\x20\x20else\x20if\x20(typeof\x20require\x20===\x20\x22function\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20getNodeIO();\x0a\x20\x20\x20\x20else\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x20//\x20Unsupported\x20host\x0a})();\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20//\x20Note:\x20Any\x20addition\x20to\x20the\x20NodeType\x20should\x20also\x20be\x20supported\x20with\x20addition\x20to\x20AstWalkerDetailCallback\x0a\x20\x20\x20\x20export\x20enum\x20NodeType\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Empty,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EmptyExpr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20True,\x0a\x20\x20\x20\x20\x20\x20\x20\x20False,\x0a\x20\x20\x20\x20\x20\x20\x20\x20This,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Super,\x0a\x20\x20\x20\x20\x20\x20\x20\x20QString,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Regex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ArrayLit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ObjectLit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Void,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comma,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Pos,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Neg,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Delete,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Await,\x0a\x20\x20\x20\x20\x20\x20\x20\x20In,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Dot,\x0a\x20\x20\x20\x20\x20\x20\x20\x20From,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Is,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InstOf,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Typeof,\x0a\x20\x20\x20\x20\x20\x20\x20\x20NumberLit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Name,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Index,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Call,\x0a\x20\x20\x20\x20\x20\x20\x20\x20New,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Asg,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgAdd,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgSub,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgDiv,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgMul,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgMod,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgAnd,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgXor,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgOr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgLsh,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgRsh,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsgRs2,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ConditionalExpression,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogOr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogAnd,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Or,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Xor,\x0a\x20\x20\x20\x20\x20\x20\x20\x20And,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Eq,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ne,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Eqv,\x0a\x20\x20\x20\x20\x20\x20\x20\x20NEqv,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Lt,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Le,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Gt,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Ge,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Add,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Sub,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Mul,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Div,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Mod,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Lsh,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Rsh,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Rs2,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Not,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogNot,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncPre,\x0a\x20\x20\x20\x20\x20\x20\x20\x20DecPre,\x0a\x20\x20\x20\x20\x20\x20\x20\x20IncPost,\x0a\x20\x20\x20\x20\x20\x20\x20\x20DecPost,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeAssertion,\x0a\x20\x20\x20\x20\x20\x20\x20\x20FuncDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Member,\x0a\x20\x20\x20\x20\x20\x20\x20\x20VarDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ArgDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Return,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Break,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Continue,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Throw,\x0a\x20\x20\x20\x20\x20\x20\x20\x20For,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForIn,\x0a\x20\x20\x20\x20\x20\x20\x20\x20If,\x0a\x20\x20\x20\x20\x20\x20\x20\x20While,\x0a\x20\x20\x20\x20\x20\x20\x20\x20DoWhile,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Block,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Case,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Switch,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Try,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TryCatch,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TryFinally,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Finally,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Catch,\x0a\x20\x20\x20\x20\x20\x20\x20\x20List,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Script,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ClassDeclaration,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InterfaceDeclaration,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ModuleDeclaration,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ImportDeclaration,\x0a\x20\x20\x20\x20\x20\x20\x20\x20With,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Label,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LabeledStatement,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EBStart,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GotoEB,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EndCode,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Error,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Debugger,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GeneralNode\x20=\x20FuncDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LastAsg\x20=\x20AsgRs2,\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x22io.ts\x22\x20/>\x0a\x0ainterface\x20IOptions\x20{\x0a\x20\x20\x20\x20name?:\x20string;\x0a\x20\x20\x20\x20flag?:\x20bool;\x0a\x20\x20\x20\x20short?:\x20string;\x0a\x20\x20\x20\x20usage?:\x20string;\x0a\x20\x20\x20\x20set?:\x20(s:\x20string)\x20=>\x20void;\x0a\x20\x20\x20\x20type?:\x20string;\x0a\x20\x20\x20\x20experimental?:\x20bool;\x0a}\x0a\x0aclass\x20OptionsParser\x20{\x0a\x20\x20\x20\x20private\x20DEFAULT_SHORT_FLAG\x20=\x20\x22-\x22;\x0a\x20\x20\x20\x20private\x20DEFAULT_LONG_FLAG\x20=\x20\x22--\x22;\x0a\x0a\x20\x20\x20\x20//\x20Find\x20the\x20option\x20record\x20for\x20the\x20given\x20string.\x20Returns\x20null\x20if\x20not\x20found.\x0a\x20\x20\x20\x20private\x20findOption(arg:\x20string)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.options.length;\x20i++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arg\x20===\x20this.options[i].short\x20||\x20arg\x20===\x20this.options[i].name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.options[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20unnamed:\x20string[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20public\x20options:\x20IOptions[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20constructor\x20(public\x20host:\x20IIO)\x20{\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20printUsage()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22Syntax:\x20\x20\x20tsc\x20[options]\x20[file\x20..]\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22Examples:\x20tsc\x20hello.ts\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tsc\x20--out\x20foo.js\x20foo.ts\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tsc\x20@args.txt\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22Options:\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20output\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20maxLength\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.options\x20=\x20this.options.sort(function(a,\x20b)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aName\x20=\x20a.name.toLowerCase();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bName\x20=\x20b.name.toLowerCase();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(aName\x20>\x20bName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(aName\x20<\x20bName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Build\x20up\x20output\x20array\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.options.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20option\x20=\x20this.options[i];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(option.experimental)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!option.usage)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20usageString\x20=\x20\x22\x20\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20option.type\x20?\x20\x22\x20\x22\x20+\x20option.type.toUpperCase()\x20:\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(option.short)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usageString\x20+=\x20this.DEFAULT_SHORT_FLAG\x20+\x20option.short\x20+\x20type\x20+\x20\x22,\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usageString\x20+=\x20this.DEFAULT_LONG_FLAG\x20+\x20option.name\x20+\x20type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20output.push([usageString,\x20option.usage]);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(usageString.length\x20>\x20maxLength)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20maxLength\x20=\x20usageString.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20output.push([\x22\x20\x20@<file>\x22,\x20\x22Insert\x20command\x20line\x20options\x20and\x20files\x20from\x20a\x20file.\x22]);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Print\x20padded\x20output\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20output.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(output[i][0]\x20+\x20(new\x20Array(maxLength\x20-\x20output[i][0].length\x20+\x203)).join(\x22\x20\x22)\x20+\x20output[i][1]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20option(name:\x20string,\x20config:\x20IOptions,\x20short?:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!config)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20config\x20=\x20<any>short;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20short\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.name\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.short\x20=\x20short;\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.flag\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.options.push(config);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20flag(name:\x20string,\x20config:\x20IOptions,\x20short?:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!config)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20config\x20=\x20<any>short;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20short\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.name\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.short\x20=\x20short;\x0a\x20\x20\x20\x20\x20\x20\x20\x20config.flag\x20=\x20true\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.options.push(config);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Parse\x20an\x20arguments\x20string\x0a\x20\x20\x20\x20public\x20parseString(argString:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20position\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20tokens\x20=\x20argString.match(/\x5cs+|\x22|[^\x5cs\x22]+/g);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20peek()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tokens[position];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20consume()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tokens[position++];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20consumeQuotedString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20value\x20=\x20\x27\x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consume();\x20//\x20skip\x20opening\x20quote.\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20token\x20=\x20peek();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(token\x20&&\x20token\x20!==\x20\x27\x22\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consume();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20+=\x20token;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20token\x20=\x20peek();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consume();\x20//\x20skip\x20ending\x20quote;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20args:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentArg\x20=\x20\x27\x27;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(position\x20<\x20tokens.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20token\x20=\x20peek();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(token\x20===\x20\x27\x22\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentArg\x20+=\x20consumeQuotedString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(token.match(/\x5cs/))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(currentArg.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.push(currentArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentArg\x20=\x20\x27\x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consume();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consume();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentArg\x20+=\x20token;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(currentArg.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.push(currentArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.parse(args);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Parse\x20arguments\x20as\x20they\x20come\x20from\x20the\x20platform:\x20split\x20into\x20arguments.\x0a\x20\x20\x20\x20public\x20parse(args:\x20string[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20position\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20function\x20consume()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20args[position++];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(position\x20<\x20args.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20current\x20=\x20consume();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20match\x20=\x20current.match(/^(--?|@)(.*)/);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20value\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(match)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(match[1]\x20===\x20\x27@\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseString(this.host.readFile(match[2]));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20match[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20option\x20=\x20this.findOption(arg);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(option\x20===\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22Unknown\x20option\x20\x27\x22\x20+\x20arg\x20+\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.host.printLine(\x22Use\x20the\x20\x27--help\x27\x20flag\x20to\x20see\x20options\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!option.flag)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20consume();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20option.set(value);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.unnamed.push(current);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TypeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20NoTypes\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ArraySuffix\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Primitive\x20=\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Named\x20=\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AllSimpleTypes\x20=\x20Primitive\x20|\x20Named,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AllTypes\x20=\x20Primitive\x20|\x20Named\x20|\x20ArraySuffix,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20ParseState\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StartScript,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StartStatementList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StartStatement,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StartFncDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20FncDeclName,\x0a\x20\x20\x20\x20\x20\x20\x20\x20FncDeclArgs,\x0a\x20\x20\x20\x20\x20\x20\x20\x20FncDeclReturnType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForInit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForInitAfterVar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ForCondStart,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EndStmtList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EndScript,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IStatementInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20stmt:\x20Statement;\x0a\x20\x20\x20\x20\x20\x20\x20\x20labels:\x20ASTList;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ILambdaArgumentContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20preProcessedLambdaArgs:\x20AST;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20QuickParseResult\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20Script:\x20Script,\x20public\x20endLexState:\x20LexState)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Parser\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20varLists:\x20ASTList[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20scopeLists:\x20ASTList[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20staticsLists:\x20ASTList[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20scanner:\x20IScanner\x20=\x20new\x20Scanner();\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20currentToken:\x20Token\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20needTerminator\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20consolidate\x20these\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20inFunction\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20inInterfaceDecl\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentClassDecl:\x20NamedDeclaration\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20inFncDecl\x20=\x20false;\x20\x20//\x20this\x20is\x20only\x20for\x20FuncDecls\x20-\x20not\x20constructors,\x20like\x20inFnc\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20anonId\x20=\x20new\x20Identifier(\x22_anonymous\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20style_requireSemi\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20style_funcInLoop\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20incremental\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorRecovery\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20outfile:\x20ITextWriter\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorCallback:\x20(minChar:\x20number,\x20charLen:\x20number,\x20message:\x20string,\x20unit:\x20number)\x20=>void\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20state:\x20ParseState\x20=\x20ParseState.StartStatementList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20ambientModule\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20ambientClass\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20topLevel\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20allowImportDeclaration\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20currentUnitIndex\x20=\x20(-1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20prevIDTok:\x20Token\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20statementInfoStack:\x20IStatementInfo[]\x20=\x20new\x20IStatementInfo[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20hasTopLevelImportOrExport\x20=\x20false;\x20//\x20for\x20imports,\x20only\x20true\x20if\x20it\x27s\x20a\x20dynamic\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20strictMode\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20nestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20prevExpr:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20currentClassDefinition:\x20ClassDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parsingClassConstructorDefinition\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parsingDeclareFile\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20amdDependencies:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inferPropertiesFromThisAssignment\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20requiresExtendsBlock\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20resetStmtStack()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.statementInfoStack\x20=\x20new\x20IStatementInfo[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20inLoop()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x20this.statementInfoStack.length\x20-\x201;\x20j\x20>=\x200;\x20j--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.statementInfoStack[j].stmt.isLoop())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20pushStmt(stmt:\x20Statement,\x20labels:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20allocate\x20here\x20to\x20avoid\x20always\x20storing\x20this\x20information\x20in\x20statements\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20info\x20=\x20{\x20stmt:\x20stmt,\x20labels:\x20labels\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.statementInfoStack.push(info);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20popStmt():\x20IStatementInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.statementInfoStack.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20resolveJumpTarget(jump:\x20Jump):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolvedTarget\x20=\x20AST.getResolvedIdentifierName(jump.target);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.statementInfoStack.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20len\x20-\x201;\x20i\x20>=\x200;\x20i--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20info\x20=\x20this.statementInfoStack[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(jump.target)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(info.labels\x20&&\x20(info.labels.members.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200,\x20labLen\x20=\x20info.labels.members.length;\x20j\x20<\x20labLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20label\x20=\x20<Label>info.labels.members[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(label.id.text\x20==\x20resolvedTarget)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jump.setResolvedTarget(this,\x20info.stmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(info.stmt.isLoop())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jump.setResolvedTarget(this,\x20info.stmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((info.stmt.nodeType\x20==\x20NodeType.Switch)\x20&&\x20(jump.nodeType\x20==\x20NodeType.Break))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jump.setResolvedTarget(this,\x20info.stmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20luck\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(jump.target)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22could\x20not\x20find\x20enclosing\x20statement\x20with\x20label\x20\x22\x20+\x20jump.target);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(jump.nodeType\x20==\x20NodeType.Break)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22break\x20statement\x20requires\x20enclosing\x20loop\x20or\x20switch\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22continue\x20statement\x20requires\x20enclosing\x20loop\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrorRecovery(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile\x20=\x20outfile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorRecovery\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getSourceLineCol(lineCol:\x20ILineCol,\x20minChar:\x20number):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(lineCol,\x20minChar,\x20this.scanner.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20createRef(text:\x20string,\x20hasEscapeSequence:\x20bool,\x20minChar:\x20number):\x20Identifier\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20new\x20Identifier(text,\x20hasEscapeSequence);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20reportParseStyleError(message:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22STYLE:\x20\x22\x20+\x20message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reportParseError(message:\x20string,\x20startPos\x20=\x20this.scanner.startPos,\x20pos\x20=\x20this.scanner.pos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20Math.max(1,\x20pos\x20-\x20startPos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorCallback)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorCallback(startPos,\x20len,\x20message,\x20this.currentUnitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.getSourceLineCol(lineCol,\x20startPos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.outfile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.WriteLine(\x22//\x20\x22\x20+\x20this.fname\x20+\x20\x22\x20(\x22\x20+\x20lineCol.line\x20+\x20\x22,\x22\x20+\x20lineCol.col\x20+\x20\x22):\x20\x22\x20+\x20message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20SyntaxError(this.fname\x20+\x20\x22\x20(\x22\x20+\x20this.scanner.line\x20+\x20\x22,\x22\x20+\x20this.scanner.col\x20+\x20\x22):\x20\x22\x20+\x20message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20checkNextToken(tokenId:\x20TokenID,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20errorText:\x20string\x20=\x20null):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(tokenId,\x20errorRecoverySet,\x20errorText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20skip(errorRecoverySet:\x20ErrorRecoverySet)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|=\x20ErrorRecoverySet.EOF;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ersTok\x20=\x20ErrorRecoverySet.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tokenInfo\x20=\x20lookupToken(this.currentToken.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ersTok\x20=\x20tokenInfo.ers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pendingRightCurlies\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(((ersTok\x20&\x20errorRecoverySet)\x20==\x20ErrorRecoverySet.None)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20&&\x20(pendingRightCurlies\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pendingRightCurlies++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pendingRightCurlies--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ersTok\x20=\x20ErrorRecoverySet.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tokenInfo\x20=\x20lookupToken(this.currentToken.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ersTok\x20=\x20tokenInfo.ers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20regex\x20rescan\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20checkCurrentToken(tokenId:\x20TokenID,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20errorText:\x20string\x20=\x20null):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorText\x20=\x20errorText\x20==\x20null\x20?\x20(\x22Expected\x20\x27\x22\x20+\x20tokenTable[tokenId].text\x20+\x20\x22\x27\x22)\x20:\x20errorText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(errorText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20pushDeclLists()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.staticsLists.push(new\x20ASTList());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varLists.push(new\x20ASTList());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scopeLists.push(new\x20ASTList());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20popDeclLists()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.staticsLists.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.varLists.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scopeLists.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20topVarList()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.varLists[this.varLists.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20topScopeList()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scopeLists[this.scopeLists.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20topStaticsList()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.staticsLists[this.staticsLists.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseComment(comment:\x20CommentToken)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20c:\x20Comment\x20=\x20new\x20Comment(comment.value,\x20comment.isBlock,\x20comment.endsLine);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20c.minChar\x20=\x20comment.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20c.limChar\x20=\x20comment.startPos\x20+\x20comment.value.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.getSourceLineCol(lineCol,\x20c.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20c.minLine\x20=\x20lineCol.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.getSourceLineCol(lineCol,\x20c.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20c.limLine\x20=\x20lineCol.line;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!comment.isBlock\x20&&\x20comment.value.length\x20>\x203\x20&&\x20comment.value.substring(0,\x203)\x20==\x20\x22///\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dependencyPath\x20=\x20getAdditionalDependencyPath(comment.value);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(dependencyPath)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.amdDependencies.push(dependencyPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(getImplicitImport(comment.value))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasTopLevelImportOrExport\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20c;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseCommentsInner(comments:\x20CommentToken[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentASTs:\x20Comment[]\x20=\x20new\x20Comment[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20comments.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commentASTs.push(this.parseComment(comments[i]));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20commentASTs;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments\x20=\x20this.scanner.getComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseCommentsInner(comments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseCommentsForLine(line:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments\x20=\x20this.scanner.getCommentsForLine(line);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseCommentsInner(comments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20combineComments(comment1:\x20Comment[],\x20comment2:\x20Comment[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comment1\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comment2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(comment2\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comment1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comment1.concat(comment2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseEnumDecl(errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers):\x20ModuleDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Enum\x20declaration\x20requires\x20identifier\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ID);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.minChar\x20=\x20membersMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mapDecl\x20=\x20new\x20VarDecl(new\x20Identifier(\x22_map\x22),\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mapDecl.varFlags\x20|=\x20VarFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mapDecl.varFlags\x20|=\x20VarFlags.Private;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Is\x20this\x20still\x20necessary?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mapDecl.varFlags\x20|=\x20(VarFlags.Property\x20|\x20VarFlags.Public);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mapDecl.init\x20=\x20new\x20UnaryExpression(NodeType.ArrayLit,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.append(mapDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastValue:\x20NumberLiteral\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberName:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberValue:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20postComments\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToIDName(this.currentToken))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifer\x20of\x20enum\x20member\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postComments\x20=\x20this.parseComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberValue\x20=\x20this.parseExpr(errorRecoverySet,\x20OperatorPrecedence.Comma,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lastValue\x20=\x20<NumberLiteral>memberValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20memberValue.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lastValue\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberValue\x20=\x20new\x20NumberLiteral(0);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lastValue\x20=\x20<NumberLiteral>memberValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberValue\x20=\x20new\x20NumberLiteral(lastValue.value\x20+\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lastValue\x20=\x20<NumberLiteral>memberValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20map:\x20BinaryExpression\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20BinaryExpression(NodeType.Asg,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20BinaryExpression(NodeType.Index,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20Identifier(\x22_map\x22),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberValue),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20StringLiteral(\x27\x22\x27\x20+\x20memberName.actualText\x20+\x20\x27\x22\x27));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.append(map);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20member\x20=\x20new\x20VarDecl(memberName,\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.init\x20=\x20memberValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note:\x20Leave\x20minChar,\x20limChar\x20as\x20\x22-1\x22\x20on\x20typeExpr\x20as\x20this\x20is\x20a\x20parsing\x20artifact.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.typeExpr\x20=\x20new\x20TypeReference(this.createRef(name.actualText,\x20name.hasEscapeSequence,\x20-1),\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.varFlags\x20|=\x20(VarFlags.Readonly\x20|\x20VarFlags.Property);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberValue.nodeType\x20==\x20NodeType.NumberLit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.varFlags\x20|=\x20VarFlags.Constant;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.append(member);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.postComments\x20=\x20postComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20all\x20enum\x20members\x20are\x20exported\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.varFlags\x20|=\x20VarFlags.Exported;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.postComments\x20=\x20this.combineComments(member.postComments,\x20this.parseCommentsForLine(this.scanner.prevLine));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20(convertTokToIDName(this.currentToken)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endingToken\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20endingToken.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20endingToken.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modDecl\x20=\x20new\x20ModuleDeclaration(name,\x20members,\x20this.topVarList(),\x20this.topScopeList(),\x20endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modDecl.modFlags\x20|=\x20ModuleFlags.IsEnum;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclLists();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modDecl.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modDecl.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseDottedName(enclosedList:\x20AST[]):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosedList[enclosedList.length]\x20=\x20id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseDottedName(enclosedList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22need\x20identifier\x20after\x20\x27.\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20is\x20much\x20more\x20lenient\x20than\x20the\x20spec\x20-\x20we\x27re\x20basically\x20just\x20checking\x20to\x20see\x20if\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20path\x20is\x20rooted\x20or\x20contains\x20an\x20extension,\x20not\x20if\x20it\x20could\x20potentially\x20be\x20a\x20bogus\x20file\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20isValidImportPath(importPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importPath\x20=\x20stripQuotes(importPath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!importPath\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importPath.indexOf(\x27:\x27)\x20!=\x20-1\x20||\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importPath.indexOf(\x27\x5c\x5c\x27)\x20!=\x20-1\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//(importPath.indexOf(\x27.\x27)\x20!=\x20-1\x20&&\x20importPath.charAt(0)\x20!=\x20\x27.\x27)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importPath.charAt(0)\x20==\x20\x27/\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseImportDeclaration(errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers):\x20ImportDeclaration\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20alias:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20importDecl:\x20ImportDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamicImport\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Identifier\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifer\x20after\x20\x27import\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Equals,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ID);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aliasPreComments\x20=\x20this.parseComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Identifier\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Module)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.StringLiteral\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Identifier\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.StringLiteral)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.topLevel)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasTopLevelImportOrExport\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!this.allowImportDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Import\x20declaration\x20of\x20external\x20module\x20is\x20permitted\x20only\x20in\x20global\x20or\x20top\x20level\x20dynamic\x20modules\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aliasText\x20=\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.isValidImportPath((<Identifier>alias).text))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Invalid\x20import\x20path\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isDynamicImport\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.preComments\x20=\x20aliasPreComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Assignment,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.preComments\x20=\x20aliasPreComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ID);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(alias)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Assignment,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x20//\x20Include\x20semicolon\x20if\x20needed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20module\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.limChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alias.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20alias.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importDecl\x20=\x20new\x20ImportDeclaration(name,\x20alias);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importDecl.isDynamicImport\x20=\x20isDynamicImport;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importDecl.limChar\x20=\x20limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20importDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseModuleDecl(errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers,\x20preComments:\x20Comment[]):\x20ModuleDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svAmbient\x20=\x20this.ambientModule;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svTopLevel\x20=\x20this.topLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.topLevel\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20svAmbient\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientModule\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosedList:\x20AST[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamicMod\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20(this.currentToken.tokenId\x20==\x20TokenID.StringLiteral)\x20||\x20(!isPrimitiveTypeToken(this.currentToken)\x20&&\x20convertTokToID(this.currentToken,\x20this.strictMode)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nameText\x20=\x20this.currentToken.getText();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.StringLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isDynamicMod\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.ambientModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Only\x20ambient\x20dynamic\x20modules\x20may\x20have\x20string\x20literal\x20names\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!svTopLevel)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Dynamic\x20modules\x20may\x20not\x20be\x20nested\x20within\x20other\x20modules\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Module\x20name\x20missing\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20Identifier(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x22fake\x22\x20position\x20of\x20where\x20the\x20ID\x20would\x20be\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosedList\x20=\x20new\x20AST[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseDottedName(enclosedList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(name\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleBody\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bodyMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ID);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(svTopLevel\x20&&\x20isDynamicMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allowImportDeclaration\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allowImportDeclaration\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseStatementList(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x20moduleBody,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20/*sourceElements:*/\x20true,\x20/*noLeadingCase:*/\x20true,\x20AllowedElements.Global,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleBody.minChar\x20=\x20bodyMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleBody.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endingToken\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20endingToken.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20endingToken.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleDecl:\x20ModuleDeclaration;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allowImportDeclaration\x20=\x20svTopLevel;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosedList\x20&&\x20(enclosedList.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20enclosedList.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20innerName\x20=\x20<Identifier>enclosedList[len\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20innerDecl\x20=\x20new\x20ModuleDeclaration(innerName,\x20moduleBody,\x20this.topVarList(),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.topScopeList(),\x20endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.preComments\x20=\x20preComments;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.modFlags\x20|=\x20ModuleFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.modFlags\x20|=\x20ModuleFlags.Exported;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20will\x20also\x20possibly\x20need\x20to\x20re-parent\x20comments\x20as\x20well\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.limChar\x20=\x20limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outerModBod:\x20ASTList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x20len\x20-\x202;\x20i\x20>=\x200;\x20i--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.append(innerDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerName\x20=\x20<Identifier>enclosedList[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl\x20=\x20new\x20ModuleDeclaration(innerName,\x20outerModBod,\x20new\x20ASTList(),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20ASTList(),\x20endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.minChar\x20=\x20innerDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.limChar\x20=\x20innerDecl.limChar\x20=\x20limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.modFlags\x20|=\x20ModuleFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20innerDecl.modFlags\x20|=\x20ModuleFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.append(innerDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerModBod.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl\x20=\x20new\x20ModuleDeclaration(<Identifier>name,\x20outerModBod,\x20new\x20ASTList(),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20ASTList(),\x20endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl\x20=\x20new\x20ModuleDeclaration(<Identifier>name,\x20moduleBody,\x20this.topVarList(),\x20this.topScopeList(),\x20endingToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20svAmbient\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.modFlags\x20|=\x20ModuleFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(svAmbient\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.modFlags\x20|=\x20ModuleFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDynamicMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.modFlags\x20|=\x20ModuleFlags.IsDynamic;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientModule\x20=\x20svAmbient;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.topLevel\x20=\x20svTopLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.limChar\x20=\x20moduleBody.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTypeReferenceTail(errorRecoverySet:\x20ErrorRecoverySet,\x20minChar:\x20number,\x20term:\x20AST):\x20TypeReference\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20TypeReference(term,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenBracket)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.arrayCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBracket,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LBrack);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Consider\x20renaming\x20to\x20parseTypeName.\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseNamedType(errorRecoverySet:\x20ErrorRecoverySet,\x20minChar:\x20number,\x20term:\x20AST,\x20tail:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20curpos\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20allow\x20reserved\x20words\x20if\x20immediately\x20after\x20a\x20new\x20line\x20and\x20error\x20recovery\x20is\x20enabled\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20((!this.errorRecovery\x20||\x20!this.scanner.lastTokenHadNewline())\x20&&\x20convertTokToID(this.currentToken,\x20this.strictMode)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20op2\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20op2.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20op2.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dotNode\x20=\x20new\x20BinaryExpression(NodeType.Dot,\x20term,\x20op2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dotNode.minChar\x20=\x20term.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dotNode.limChar\x20=\x20op2.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseNamedType(errorRecoverySet,\x20minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20dotNode,\x20tail);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22need\x20identifier\x20after\x20\x27.\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20term.flags\x20|=\x20ASTFlags.DotLHS;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20set\x20\x22limChar\x22\x20to\x20be\x20slightly\x20innacurate\x20for\x20completion\x20list\x20behavior\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20(last\x20AST\x20node\x20from\x20\x22quickParse\x22\x20will\x20match\x20DotLHS\x20and\x20be\x20at\x20end\x20of\x20file\x20position)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20to\x20match\x20the\x20behavior\x20of\x20TokenId.Dot\x20processing\x20in\x20parsePostfixOperators.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20term.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20term;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20eop2\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20eop2.minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20eop2.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20edotNode\x20=\x20new\x20BinaryExpression(NodeType.Dot,\x20term,\x20eop2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20edotNode.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20edotNode.minChar\x20=\x20term.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20edotNode.limChar\x20=\x20eop2.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseNamedType(errorRecoverySet,\x20minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20edotNode,\x20tail);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tail)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseTypeReferenceTail(errorRecoverySet,\x20minChar,\x20term);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20term;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Reconsider\x20renaming\x20this\x20to\x20parseType\x20to\x20match\x20the\x20grammar.\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTypeReference(errorRecoverySet:\x20ErrorRecoverySet,\x20allowVoid:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isConstructorMember\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Void:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!allowVoid)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22void\x20not\x20a\x20valid\x20type\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Intentional\x20fall-through\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Any:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Number:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Bool:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.String:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text\x20=\x20tokenTable[this.currentToken.tokenId].text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20predefinedIdentifier\x20=\x20new\x20Identifier(text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20predefinedIdentifier.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20predefinedIdentifier.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseTypeReferenceTail(errorRecoverySet,\x20minChar,\x20predefinedIdentifier);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Identifier:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ident\x20=\x20this.createRef(this.currentToken.getText(),\x20(<IdentifierToken>this.currentToken).hasEscapeSequence,\x20minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ident.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseNamedType(errorRecoverySet,\x20minChar,\x20ident,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenBrace:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseObjectType(minChar,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.New:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20can\x27t\x20use\x20chkCurrentTok,\x20since\x20we\x20don\x27t\x20want\x20to\x20advance\x20the\x20token\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27(\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isConstructorMember\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20fall\x20through...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenParen:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20(\x20formals\x20)\x20=>\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20formals\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20variableArgList\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFormalParameterList(errorRecoverySet\x20|\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals,\x20false,\x20true,\x20false,\x20false,\x20false,\x20false,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.EqualsGreaterThan,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20returnType\x20=\x20this.parseTypeReference(errorRecoverySet,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20new\x20FuncDecl(null,\x20null,\x20false,\x20formals,\x20null,\x20null,\x20null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20NodeType.FuncDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.returnTypeAnnotation\x20=\x20returnType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.variableArgList\x20=\x20variableArgList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Signature;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isConstructorMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.ConstructMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22_construct\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.classDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseTypeReferenceTail(errorRecoverySet,\x20minChar,\x20funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20type\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20etr\x20=\x20new\x20TypeReference(null,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etr.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etr.minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etr.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20etr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseObjectType(minChar:\x20number,\x20errorRecoverySet:\x20ErrorRecoverySet):\x20TypeReference\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.minChar\x20=\x20minChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInInterfaceDecl\x20=\x20this.inInterfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inInterfaceDecl\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseTypeMemberList(errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inInterfaceDecl\x20=\x20prevInInterfaceDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x27re\x20parsing\x20an\x20ObjectType,\x20but\x20we\x20give\x20a\x20NodeType\x20of\x20Interface\x20here.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl\x20=\x20new\x20InterfaceDeclaration(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.anonId,\x20members,\x20/*extends:*/\x20null,\x20/*implementsL*/\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.limChar\x20=\x20members.limChar;\x20\x20\x20\x20//\x20\x22}\x22\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseTypeReferenceTail(errorRecoverySet,\x20minChar,\x20interfaceDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseFunctionBlock(errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements:\x20AllowedElements,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentModifiers:\x20Modifiers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bodMinChar:\x20number):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartStatementList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20savedInFunction\x20=\x20this.inFunction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFunction\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseStatementList(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly\x20|\x20ErrorRecoverySet.StmtStart,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod,\x20/*sourceElements:*/\x20true,\x20/*noLeadingCase:*/\x20false,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.minChar\x20=\x20bodMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFunction\x20=\x20savedInFunction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ec\x20=\x20new\x20EndCode();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ec.minChar\x20=\x20bod.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ec.limChar\x20=\x20ec.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.append(ec);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseFunctionStatements(errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isConstructor:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isMethod:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements:\x20AllowedElements,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20requiresSignature:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentModifiers:\x20Modifiers)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20start\x20new\x20statement\x20stack\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svStmtStack\x20=\x20this.statementInfoStack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resetStmtStack();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bod:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wasShorthand\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAnonLambda\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar:\x20number;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x20require\x20a\x20signature,\x20but\x20they\x20provided\x20a\x20block,\x20then\x20give\x20an\x20error,\x20but\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20still\x20consume\x20the\x20block.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Function\x20declarations\x20are\x20not\x20permitted\x20within\x20interfaces,\x20ambient\x20modules\x20or\x20classes\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bodMinChar\x20=\x20this.scanner.startPos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFunctionBlock(errorRecoverySet,\x20allowedElements,\x20parentModifiers,\x20bod,\x20bodMinChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20there\x27s\x20also\x20a\x20semicolon,\x20then\x20just\x20skip\x20over\x20it.\x20\x20We\x20don\x27t\x20want\x20to\x20report\x20an\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20additional\x20error\x20here.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Semicolon,\x20errorRecoverySet,\x20\x22Expected\x20\x27;\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bodMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.EqualsGreaterThan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27=>\x27\x20may\x20not\x20be\x20used\x20for\x20class\x20methods\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20wasShorthand\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(wasShorthand\x20&&\x20this.currentToken.tokenId\x20!=\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20retExpr\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Assignment,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20retStmt\x20=\x20new\x20ReturnStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.returnExpression\x20=\x20retExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.minChar\x20=\x20retExpr.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.limChar\x20=\x20retExpr.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.minChar\x20=\x20bodMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.append(retStmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isAnonLambda\x20=\x20wasShorthand;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFunctionBlock(errorRecoverySet,\x20allowedElements,\x20parentModifiers,\x20bod,\x20bodMinChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20new\x20FuncDecl(name,\x20bod,\x20isConstructor,\x20args,\x20this.topVarList(),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.topScopeList(),\x20this.topStaticsList(),\x20NodeType.FuncDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeList\x20=\x20this.topScopeList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scopeList.append(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20staticFuncDecl\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!wasShorthand\x20||\x20isAnonLambda)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAnonLambda)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IsFatArrowFunction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IsFatArrowFunction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken\x20=\x20new\x20ASTSpan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken.minChar\x20=\x20bod.members[0].minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.endingToken.limChar\x20=\x20bod.members[0].limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.limChar\x20=\x20limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Definition;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.statementInfoStack\x20=\x20svStmtStack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20transformAnonymousArgsIntoFormals(formals:\x20ASTList,\x20argList:\x20AST)\x20:\x20bool\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20translateBinExOperand\x20=\x20(operand:\x20AST)\x20:\x20bool\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(operand.nodeType\x20==\x20NodeType.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.transformAnonymousArgsIntoFormals(formals,\x20operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(operand.nodeType\x20==\x20NodeType.Name\x20||\x20operand.nodeType\x20==\x20NodeType.Asg)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20opArg\x20=\x20operand.nodeType\x20==\x20NodeType.Asg\x20?\x20(<BinaryExpression>operand).operand1\x20:\x20operand;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20new\x20ArgDecl(<Identifier>opArg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.preComments\x20=\x20opArg.preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.postComments\x20=\x20opArg.postComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.minChar\x20=\x20operand.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.limChar\x20=\x20operand.limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(opArg.flags,\x20ASTFlags.PossibleOptionalParameter))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.isOptional\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(operand.nodeType\x20==\x20NodeType.Asg)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.init\x20=\x20(<BinaryExpression>operand).operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals.append(arg);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20arg.isOptional\x20||\x20arg.init;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Invalid\x20lambda\x20argument\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argList.nodeType\x20==\x20NodeType.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commaList\x20=\x20<BinaryExpression>\x20argList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commaList.operand1.isParenthesized)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Invalid\x20lambda\x20argument\x22,\x20commaList.operand1.minChar,\x20commaList.operand1.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commaList.operand2.isParenthesized)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Invalid\x20lambda\x20argument\x22,\x20commaList.operand2.minChar,\x20commaList.operand2.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isOptional\x20=\x20translateBinExOperand(commaList.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isOptional\x20=\x20translateBinExOperand(commaList.operand2)\x20||\x20isOptional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20isOptional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20translateBinExOperand(argList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseFormalParameterList(errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isClassConstr:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isSig:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isIndexer:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isGetter:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isSetter:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isLambda:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preProcessedLambdaArgs:\x20AST,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20expectClosingRParen:\x20bool):\x20bool\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals.minChar\x20=\x20this.scanner.startPos;\x20//\x20\x27(\x27\x20or\x20\x27[\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isIndexer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!isLambda)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RParen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sawEllipsis\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20firstArg\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasOptional\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20haveFirstArgID\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20preProcessedLambdaArgs\x20is\x20\x22true\x22,\x20we\x20either\x20have\x20a\x20typeless\x20argument\x20list,\x20or\x20we\x20have\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20a\x20single\x20identifier\x20node\x20and\x20the\x20current\x20token\x20is\x20the\x20\x27:\x27\x20before\x20a\x20typereference\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isLambda\x20&&\x20preProcessedLambdaArgs\x20&&\x20preProcessedLambdaArgs.nodeType\x20!=\x20NodeType.EmptyExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasOptional\x20=\x20this.transformAnonymousArgsIntoFormals(formals,\x20preProcessedLambdaArgs);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20haveFirstArgID\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20munchedArg\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argFlags\x20=\x20VarFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argMinChar\x20=\x20this.scanner.startPos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inferPropertiesFromThisAssignment\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.This)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isClassConstr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Instance\x20property\x20declarations\x20using\x20\x27this\x27\x20may\x20only\x20be\x20used\x20in\x20class\x20constructors\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x20//\x20consume\x20the\x20\x27.\x27\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argFlags\x20|=\x20(VarFlags.Public\x20|\x20VarFlags.Property);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentClassDefinition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.varFlags\x20|=\x20VarFlags.ClassSuperMustBeFirstCallInConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Public)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argFlags\x20|=\x20(VarFlags.Public\x20|\x20VarFlags.Property);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentClassDefinition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.varFlags\x20|=\x20VarFlags.ClassSuperMustBeFirstCallInConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Private)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argFlags\x20|=\x20(VarFlags.Private\x20|\x20VarFlags.Property);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentClassDefinition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.varFlags\x20|=\x20VarFlags.ClassSuperMustBeFirstCallInConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Static\x20&&\x20isClassConstr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Static\x20properties\x20can\x20not\x20be\x20declared\x20as\x20parameter\x20properties\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argFlags\x20!=\x20VarFlags.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isClassConstr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22only\x20constructor\x20parameters\x20can\x20be\x20properties\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isModifier(this.currentToken))\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Multiple\x20modifiers\x20may\x20not\x20be\x20applied\x20to\x20parameters\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inferPropertiesFromThisAssignment\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.This)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isClassConstr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Instance\x20property\x20declarations\x20using\x20\x27this\x27\x20may\x20only\x20be\x20used\x20in\x20class\x20constructors\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x20//\x20consume\x20the\x20\x27.\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.DotDotDot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sawEllipsis\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27...\x27\x20parameters\x20require\x20both\x20a\x20parameter\x20name\x20and\x20an\x20array\x20type\x20annotation\x20to\x20be\x20specified\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sawEllipsis\x20=\x20false;\x20//\x20Do\x20not\x20treat\x20this\x20parameter\x20as\x20vararg\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argId:\x20Identifier\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!haveFirstArgID\x20&&\x20(this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argId\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argId.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argId.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(haveFirstArgID\x20||\x20argId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20munchedArg\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg:\x20ArgDecl\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(haveFirstArgID\x20&&\x20formals.members.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20<ArgDecl>formals.members[formals.members.length\x20-\x201];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arg.isOptional)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasOptional\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20new\x20ArgDecl(argId);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isGetter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20getters\x20may\x20not\x20take\x20any\x20arguments\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSetter\x20&&\x20!firstArg)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20setters\x20may\x20only\x20take\x20one\x20argument\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.minChar\x20=\x20argMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Question)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.isOptional\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasOptional\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20this.parseTypeReference(errorRecoverySet,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20for\x20default\x20parameter\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20In\x20the\x20case\x20of\x20a\x20typed\x20reference,\x20assume\x20that\x20parseTypeReference\x20or\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20of\x20its\x20children\x20in\x20the\x20call\x20graph\x20advanced\x20tok\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSig)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Arguments\x20in\x20signatures\x20may\x20not\x20have\x20default\x20values\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasOptional\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.init\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20false,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasOptional\x20&&\x20!arg.isOptionalArg()\x20&&\x20!sawEllipsis)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Optional\x20parameters\x20may\x20only\x20be\x20followed\x20by\x20other\x20optional\x20parameters\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sawEllipsis\x20&&\x20arg.isOptionalArg())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Varargs\x20may\x20not\x20be\x20optional\x20or\x20have\x20default\x20parameters\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sawEllipsis\x20&&\x20!type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ellipsis\x20is\x20missing\x20a\x20type\x20definition\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27...\x27\x20parameters\x20require\x20both\x20a\x20parameter\x20name\x20and\x20an\x20array\x20type\x20annotation\x20to\x20be\x20specified\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Ok\x20for\x20lambdas?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.typeExpr\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg.varFlags\x20|=\x20argFlags;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!haveFirstArgID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals.append(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20haveFirstArgID\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20firstArg\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((munchedArg)\x20&&\x20(!sawEllipsis))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Unexpected\x20\x27,\x27\x20in\x20argument\x20list\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isIndexer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBracket,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly\x20|\x20ErrorRecoverySet.SColon);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(expectClosingRParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly\x20|\x20ErrorRecoverySet.SColon);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formals.limChar\x20=\x20this.scanner.lastTokenLimChar();\x20//\x20\x27)\x27\x20or\x20\x27]\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sawEllipsis;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseFncDecl(errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isDecl:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20requiresSignature:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isMethod:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20methodName:\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indexer:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isStatic:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20markedAsAmbient:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers:\x20Modifiers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lambdaArgContext:\x20ILambdaArgumentContext,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20expectClosingRParen:\x20bool):\x20AST\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInConstr\x20=\x20this.parsingClassConstructorDefinition;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnMin\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevNestingLevel\x20=\x20this.nestingLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isLambda\x20=\x20!!lambdaArgContext;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!this.style_funcInLoop)\x20&&\x20this.inLoop())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseStyleError(\x22function\x20declaration\x20in\x20loop\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isMethod\x20&&\x20!isStatic\x20&&\x20!indexer\x20&&\x20!lambdaArgContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20past\x20function\x20keyword\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartFncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Identifier)\x20&&\x20(!convertTokToID(this.currentToken,\x20this.strictMode)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Function\x20declaration\x20must\x20include\x20identifier\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20=\x20prevNestingLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20IncompleteAST(fnMin,\x20this.scanner.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(methodName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20methodName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.FncDeclName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args:\x20ASTList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20variableArgList\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isOverload\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGetter\x20=\x20hasFlag(modifiers,\x20Modifiers.Getter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isSetter\x20=\x20hasFlag(modifiers,\x20Modifiers.Setter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20||\x20(indexer\x20&&\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenBracket))\x20||\x20(lambdaArgContext\x20&&\x20(lambdaArgContext.preProcessedLambdaArgs\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.DotDotDot)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20arg\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20variableArgList\x20=\x20this.parseFormalParameterList(errorRecoverySet,\x20args,\x20false,\x20requiresSignature,\x20indexer,\x20isGetter,\x20isSetter,\x20isLambda,\x20lambdaArgContext\x20?\x20lambdaArgContext.preProcessedLambdaArgs\x20:\x20null,\x20expectClosingRParen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.FncDeclArgs;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20returnType:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Setter))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20setters\x20may\x20not\x20declare\x20a\x20return\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnType\x20=\x20this.parseTypeReference(errorRecoverySet,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indexer\x20&&\x20args.members.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Index\x20signatures\x20require\x20a\x20parameter\x20type\x20to\x20be\x20specified\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.FncDeclReturnType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isLambda\x20&&\x20this.currentToken.tokenId\x20!=\x20TokenID.EqualsGreaterThan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27=>\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Currently,\x20it\x27s\x20imperative\x20that\x20ambient\x20functions\x20*not*\x20be\x20marked\x20as\x20overloads.\x20\x20At\x20some\x20point,\x20we\x20may\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20want\x20to\x20unify\x20the\x20two\x20concepts\x20internally\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDecl\x20&&\x20!(this.parsingDeclareFile\x20||\x20markedAsAmbient)\x20&&\x20(!isMethod\x20||\x20!(this.ambientModule\x20||\x20this.ambientClass\x20||\x20this.inInterfaceDecl))\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isOverload\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isDecl\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20requiresSignature\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svInFncDecl\x20=\x20this.inFncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFncDecl\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl:\x20FuncDecl\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFunctionStatements(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name,\x20/*isConstructor:*/\x20false,\x20isMethod,\x20args,\x20AllowedElements.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar,\x20requiresSignature,\x20Modifiers.None);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFncDecl\x20=\x20svInFncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.variableArgList\x20=\x20variableArgList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isOverload\x20=\x20isOverload;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requiresSignature)\x20{\x20//\x20REVIEW:\x20What\x27s\x20the\x20point\x20of\x20this?\x20\x20Why\x20not\x20just\x20use\x20\x27Signature\x27\x20instead\x20of\x20\x27Definition\x27?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Definition;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indexer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IndexerMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.returnTypeAnnotation\x20=\x20returnType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Method;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20all\x20class\x20property\x20methods\x20are\x20currently\x20exported\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.ClassPropertyMethodExported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20=\x20prevNestingLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20=\x20prevInConstr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20convertToTypeReference(ast:\x20AST):\x20TypeReference\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20TypeReference;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ast.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.TypeRef:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<TypeReference>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Name:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20new\x20TypeReference(ast,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.minChar\x20=\x20ast.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.limChar\x20=\x20ast.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Index:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20expr\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20this.convertToTypeReference(expr.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(result)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.arrayCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.minChar\x20=\x20expr.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.limChar\x20=\x20expr.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20etr\x20=\x20<TypeReference>new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20etr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseArgList(errorRecoverySet:\x20ErrorRecoverySet):\x20ASTList\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args:\x20ASTList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.minChar\x20=\x20this.scanner.startPos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20skip\x20left\x20paren\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!==\x20TokenID.CloseParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(args.members.length\x20>\x200xffff)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22max\x20number\x20of\x20args\x20exceeded\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20this.parseExpr(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20/*allowIn:*/\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.append(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20args;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseBaseList(extendsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implementsList:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isClass:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20keyword\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentList\x20=\x20extendsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(keyword)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.Implements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentList\x20=\x20implementsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Extends\x20&&\x20!this.requiresExtendsBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.requiresExtendsBlock\x20=\x20isClass;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20keyword\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseName:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20<Identifier>this.parseNamedType(errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar,\x20baseName,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20base\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName.minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseName.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Base\x20classes\x20may\x20only\x20be\x20initialized\x20via\x20a\x20\x27super\x27\x20call\x20within\x20the\x20constructor\x20body\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Interfaces\x20may\x20not\x20be\x20extended\x20with\x20a\x20call\x20expression\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentList.append(baseName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isClass\x20&&\x20currentList\x20==\x20extendsList\x20&&\x20extendsList.members.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22A\x20class\x20may\x20only\x20extend\x20one\x20other\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Extends)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Implements))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Extends\x20&&\x20!this.requiresExtendsBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.requiresExtendsBlock\x20=\x20isClass;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentList\x20=\x20extendsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20keyword\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseClassDecl(errorRecoverySet:\x20ErrorRecoverySet,\x20minChar:\x20number,\x20modifiers:\x20Modifiers):\x20ClassDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Readonly)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22const\x20modifier\x20is\x20implicit\x20for\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20mark\x20the\x20class\x20as\x20ambient,\x20as\x20necessary\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classIsMarkedAsAmbient\x20=\x20this.parsingDeclareFile\x20||\x20(modifiers\x20&\x20Modifiers.Ambient)\x20!=\x20Modifiers.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svAmbientClass\x20=\x20this.ambientClass;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientClass\x20=\x20classIsMarkedAsAmbient;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20grab\x20the\x20class\x27s\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20(!isPrimitiveTypeToken(this.currentToken)\x20&&\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22class\x20missing\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20extendsList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20implementsList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20requiresSignature\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Extends)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Implements))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implementsList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseBaseList(extendsList,\x20implementsList,\x20errorRecoverySet,\x20/*isClass:*/\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Note\x20that\x20we\x20don\x27t\x20set\x20this\x20as\x20the\x20current\x20class\x20decl\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classDecl\x20=\x20new\x20ClassDeclaration(name,\x20new\x20ASTList(),\x20extendsList,\x20implementsList);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition\x20=\x20classDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20parse\x20the\x20classes\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseClassElements(classDecl,\x20errorRecoverySet,\x20modifiers);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientModule\x20||\x20this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.varFlags\x20|=\x20VarFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.varFlags\x20|=\x20VarFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.varFlags\x20|=\x20VarFlags.Class;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientClass\x20=\x20svAmbientClass;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseClassElements(classDecl:\x20ClassDeclaration,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20parentModifiers:\x20Modifiers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modifiers\x20=\x20parentModifiers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resetModifiers\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel++;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentMemberMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wasGetOrSetId\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(!(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.EndOfFile))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scanNext\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicOrPrivateFlags\x20=\x20Modifiers.Public\x20|\x20Modifiers.Private;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20modifiers\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Get)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Getter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Duplicate\x20\x27get\x27\x20declaration\x20in\x20class\x20body\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Getter\x20already\x20marked\x20as\x20a\x20setter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Getter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Set)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Duplicate\x20\x27set\x27\x20declaration\x20in\x20class\x20body\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Getter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Setter\x20already\x20marked\x20as\x20a\x20getter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Setter;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Private)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20publicOrPrivateFlags)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Multiple\x20modifiers\x20may\x20not\x20be\x20applied\x20to\x20class\x20members\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Public)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20publicOrPrivateFlags)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Multiple\x20modifiers\x20may\x20not\x20be\x20applied\x20to\x20class\x20members\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Static)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Static)\x20{\x20//\x20only\x20check\x20for\x20double\x20instances\x20of\x20static\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Multiple\x20modifiers\x20may\x20not\x20be\x20applied\x20to\x20class\x20members\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20//\x20constructors\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Constructor)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20parentModifiers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Constructors\x20may\x20not\x20have\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseClassConstructorDeclaration(currentMemberMinChar,\x20errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x20//\x20parsing\x20functions\x20advances\x20the\x20token\x20for\x20us\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resetModifiers\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20//\x20member\x20declarations\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(wasGetOrSetId\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Identifier\x20||\x20convertTokToIDName(this.currentToken))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idText\x20=\x20wasGetOrSetId\x20?\x20((modifiers\x20&\x20Modifiers.Getter)\x20?\x20\x22get\x22\x20:\x20\x22set\x22)\x20:\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20wasGetOrSetId\x20?\x20new\x20Identifier(idText)\x20:\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20unset\x20the\x20get/set\x20bit,\x20if\x20we\x27re\x20using\x20it\x20for\x20an\x20id\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(wasGetOrSetId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20=\x20modifiers\x20^\x20((modifiers\x20&\x20Modifiers.Getter)\x20?\x20Modifiers.Getter\x20:\x20Modifiers.Setter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20wasGetOrSetId\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseClassMemberFunctionDeclaration(id,\x20currentMemberMinChar,\x20errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x20//\x20parsing\x20functions\x20advances\x20the\x20token\x20for\x20us\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Getter\x20||\x20modifiers\x20&\x20Modifiers.Setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20must\x20be\x20functions\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20this.parseClassMemberVariableDeclaration(id,\x20currentMemberMinChar,\x20false,\x20errorRecoverySet,\x20modifiers);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init\x20&&\x20varDecl.init.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(varDecl.init\x20&&\x20varDecl.init.nodeType\x20==\x20NodeType.ObjectLit\x20&&\x20this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init.flags\x20|=\x20ASTFlags.AutomaticSemicolon;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27;\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resetModifiers\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20//\x20catch\x20errant\x20uses\x20of\x20\x27super\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Super)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Base\x20class\x20initializers\x20must\x20be\x20the\x20first\x20statement\x20in\x20a\x20class\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!wasGetOrSetId\x20&&\x20((modifiers\x20&\x20Modifiers.Getter)\x20||\x20(modifiers\x20&\x20Modifiers.Setter))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20||\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20||\x20(this.currentToken.tokenId\x20==\x20TokenID.Semicolon)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20catch\x20a\x20\x27get\x27\x20or\x20\x27set\x27\x20used\x20as\x20an\x20identifier\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20wasGetOrSetId\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanNext\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20//\x20mark\x20anything\x20else\x20as\x20an\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20{\x20//\x20jettison\x20semicolons\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Unexpected\x20\x27\x22\x20+\x20this.currentToken.getText()\x20+\x20\x22\x27\x20in\x20class\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resetModifiers\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scanNext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resetModifiers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20=\x20parentModifiers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentMemberMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resetModifiers\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersLimChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.endingToken\x20=\x20new\x20ASTSpan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.endingToken.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.endingToken.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20a\x20class\x20with\x20an\x20empty\x20body,\x20consume\x20any\x20\x27dangling\x27\x20inner\x20comments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.currentClassDefinition.members.members.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel--;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.members.minChar\x20=\x20membersMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.members.limChar\x20=\x20membersLimChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.limChar\x20=\x20membersLimChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseClassConstructorDeclaration(minChar:\x20number,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args:\x20ASTList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20variableArgList\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x20//\x20scan\x20past\x20the\x20\x27constructor\x27\x20token\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20variableArgList\x20=\x20this.parseFormalParameterList(errorRecoverySet,\x20args,\x20true,\x20isAmbient,\x20false,\x20false,\x20false,\x20false,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(args.members.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastArg\x20=\x20args.members[args.members.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20requiresSignature\x20=\x20isAmbient\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Semicolon;\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20args.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg\x20=\x20<ArgDecl>\x20args.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(arg.varFlags,\x20VarFlags.Property))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Overload\x20or\x20ambient\x20signatures\x20may\x20not\x20specify\x20parameter\x20properties\x22,\x20arg.minChar,\x20arg.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.constructorNestingLevel\x20=\x20this.nestingLevel\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20constructorFuncDecl\x20=\x20this.parseFunctionStatements(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x20this.currentClassDefinition.name,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20/*isConstructor:*/\x20true,\x20/*isMethod:*/\x20false,\x20args,\x20AllowedElements.Properties,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar,\x20requiresSignature,\x20modifiers);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.preComments\x20=\x20preComments;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requiresSignature\x20&&\x20!isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.isOverload\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.variableArgList\x20=\x20variableArgList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.returnTypeAnnotation\x20=\x20this.convertToTypeReference(this.currentClassDefinition.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.classDecl\x20=\x20this.currentClassDefinition;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.fncFlags\x20|=\x20FncFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requiresSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.fncFlags\x20|=\x20FncFlags.Signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.fncFlags\x20|=\x20FncFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentClassDefinition.constructorDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isAmbient\x20&&\x20!this.currentClassDefinition.constructorDecl.isSignature()\x20&&\x20!constructorFuncDecl.isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Duplicate\x20constructor\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient\x20||\x20!constructorFuncDecl.isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.constructorDecl\x20=\x20constructorFuncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Should\x20we\x20have\x20a\x20separate\x20flag\x20for\x20class\x20constructors?\x20\x20(Constructors\x20are\x20not\x20methods)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20constructorFuncDecl.fncFlags\x20|=\x20FncFlags.ClassMethod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length]\x20=\x20constructorFuncDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20constructorFuncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseClassMemberVariableDeclaration(text:\x20Identifier,\x20minChar:\x20number,\x20isDeclaredInConstructor:\x20bool,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20new\x20VarDecl(text,\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.preComments\x20=\x20this.parseComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.typeExpr\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseTypeReference(errorRecoverySet\x20|\x20ErrorRecoverySet.Asg\x20|\x20ErrorRecoverySet.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr\x20&&\x20varDecl.typeExpr.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeExpr\x20=\x20(<TypeReference>varDecl.typeExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeExpr.term\x20&&\x20typeExpr.term.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeExpr.term.preComments\x20=\x20varDecl.preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22context\x20does\x20not\x20permit\x20variable\x20initializer\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20note\x20assignment\x20for\x20language\x20service\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20true,\x20TypeContext.NoTypes);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20varDecl.init.limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20member\x20initializers\x20on\x20instance\x20properties\x20require\x20that\x20super\x20be\x20invoked\x20as\x20the\x20first\x20call\x20within\x20the\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(modifiers\x20&\x20Modifiers.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.varFlags\x20|=\x20VarFlags.ClassSuperMustBeFirstCallInConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Static)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isStatic\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Private)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Property;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDeclaredInConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.ClassConstructorProperty;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isDeclaredInConstructor\x20&&\x20!isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.ClassBodyProperty;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.knownMemberNames[text.actualText]\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isDeclaredInConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length]\x20=\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseClassMemberFunctionDeclaration(methodName:\x20Identifier,\x20minChar:\x20number,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wasAccessorID\x20=\x20this.prevIDTok\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAccessor\x20=\x20hasFlag(modifiers,\x20Modifiers.Getter)\x20||\x20hasFlag(modifiers,\x20Modifiers.Setter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(modifiers,\x20Modifiers.Static);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|=\x20ErrorRecoverySet.RParen;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAccessor\x20&&\x20(modifiers\x20&\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20may\x20not\x20be\x20declared\x20in\x20ambient\x20classes\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Why\x20bother\x20passing\x20in\x20isAmbient\x20for\x20both\x20requiresSignature\x20and\x20isAmbient?\x20\x20Shouldn\x27t\x20just\x20saying\x20its\x20ambient\x20suffice?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast:\x20AST\x20=\x20this.parseFncDecl(errorRecoverySet,\x20true,\x20isAmbient,\x20true,\x20methodName,\x20false,\x20isStatic,\x20isAmbient,\x20modifiers,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Error)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.bod\x20!==\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.limChar\x20=\x20funcDecl.bod.limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Private)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAccessor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20verify\x20return-type\x20annotations\x20and\x20arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Getter))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.GetAccessor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22get\x22\x20+\x20funcDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.SetAccessor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22set\x22\x20+\x20funcDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22,\x20funcDecl.minChar,\x20funcDecl.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.ClassMethod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.knownMemberNames[methodName.actualText]\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length]\x20=\x20funcDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTypeMember(errorRecoverySet:\x20ErrorRecoverySet):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propertyDecl\x20=\x20this.parsePropertyDeclaration(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet,\x20Modifiers.Public,\x20/*requireSignature:*/\x20true,\x20/*isStatic:*/\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(propertyDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propertyDecl.minChar\x20=\x20minChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(propertyDecl.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Semicolon,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20propertyDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTypeMemberList(errorRecoverySet:\x20ErrorRecoverySet,\x20members:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|=\x20ErrorRecoverySet.TypeScriptS;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.CloseBrace:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.EndOfFile:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20code\x20looks\x20suspect.\x20\x20If\x20parseTypeMember\x20returns\x20null,\x20then\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20won\x27t\x20we\x20just\x20infinite\x20loop?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20element\x20=\x20this.parseTypeMember(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(element)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.append(element);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseInterfaceDecl(errorRecoverySet:\x20ErrorRecoverySet,\x20modifiers:\x20Modifiers):\x20InterfaceDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20(!isPrimitiveTypeToken(this.currentToken)\x20&&\x20convertTokToID(this.currentToken,\x20this.strictMode)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22interface\x20missing\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20extendsList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20implementsList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.Extends\x20||\x20this.currentToken.tokenId\x20===\x20TokenID.Implements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.Implements)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27extends\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implementsList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsList.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseBaseList(extendsList,\x20implementsList,\x20errorRecoverySet,\x20/*isClass:*/\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20membersMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.minChar\x20=\x20membersMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInInterfaceDecl\x20=\x20this.inInterfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inInterfaceDecl\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseTypeMemberList(errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inInterfaceDecl\x20=\x20prevInInterfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20According\x20to\x20the\x20grammar,\x20an\x20interface\x20declaration\x20should\x20actually\x20just\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20have\x20an\x20\x27ObjectType\x27\x20and\x20not\x20a\x20list\x20of\x20members.\x20\x20We\x20may\x20want\x20to\x20consider\x20making\x20that\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20change.\x20\x20Note:\x20it\x20would\x20mean\x20breaking\x20aparat\x20TypeDecl\x20into\x20InterfaceDeclaration\x20and\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20ClassDeclaration.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl\x20=\x20new\x20InterfaceDeclaration(name,\x20members,\x20extendsList,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.varFlags\x20|=\x20VarFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Public))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.varFlags\x20|=\x20VarFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.varFlags\x20|=\x20VarFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.limChar\x20=\x20members.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20interfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20makeVarDecl(id:\x20Identifier,\x20nest:\x20number):\x20VarDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20new\x20VarDecl(id,\x20nest);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentVarList\x20=\x20this.topVarList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(currentVarList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20currentVarList.append(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parsePropertyDeclaration(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers:\x20Modifiers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20requireSignature:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isStatic:\x20bool):\x20AST\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nameLimChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isNew\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isIndexer\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wasAccessorID\x20=\x20this.prevIDTok\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAccessor\x20=\x20hasFlag(modifiers,\x20Modifiers.Getter)\x20||\x20hasFlag(modifiers,\x20Modifiers.Setter);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20requireSignature\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen\x20&&\x20!wasAccessorID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requireSignature\x20&&\x20!isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier\x20in\x20property\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//REVIEW:\x20Use\x20something\x20else\x20than\x20\x22Identifier\x22?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.New)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requireSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isNew\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isNew)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20is\x20identifier\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!requireSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20new\x20Identifier(\x22new\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.minChar\x20=\x20this.scanner.pos\x20-\x203;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nameLimChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.OpenBracket)\x20&&\x20requireSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20indexer\x20signature\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isIndexer\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//REVIEW:\x20Should\x20we\x20use\x20a\x20special\x20\x22compiler\x20reserved\x22\x20identifier\x20node?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20new\x20Identifier(\x22__item\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Identifier)\x20&&\x20(!convertTokToIDName(this.currentToken))\x20&&\x20!wasAccessorID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier\x20in\x20property\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20eminChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20curpos\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet\x20&\x20(~ErrorRecoverySet.Comma));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scanner.pos\x20==\x20curpos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20ensure\x20progress\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20epd\x20=\x20new\x20VarDecl(new\x20MissingIdentifier(),\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20epd.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20epd.minChar\x20=\x20eminChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20epd.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20epd;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(wasAccessorID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20Identifier.fromToken(this.prevIDTok);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.minChar\x20=\x20this.scanner.lastTokenLimChar()\x20-\x203;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nameLimChar\x20=\x20text.limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20block\x20guards\x20against\x20\x27get\x27\x20and\x20\x27set\x27\x20tokens\x20that\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20were\x20coerced\x20into\x20identifiers\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.getText()\x20==\x20text.actualText\x20&&\x20this.currentToken\x20!=\x20this.prevIDTok)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20//\x20Otherwise,\x20don\x27t\x20update\x20the\x20token\x20-\x20we\x27re\x20already\x20at\x20\x27(\x27\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20reset\x20the\x20previous\x20ID\x20Token\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nameLimChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Question)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inInterfaceDecl\x20&&\x20text)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text.flags\x20|=\x20ASTFlags.OptionalName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Optional\x20properties\x20may\x20only\x20be\x20declared\x20on\x20interface\x20or\x20object\x20types\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.OpenParen)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(isIndexer\x20&&\x20(this.currentToken.tokenId\x20==\x20TokenID.OpenBracket)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ers\x20=\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RParen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isIndexer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ers\x20=\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RBrack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20this.parseFncDecl(ers,\x20true,\x20requireSignature,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!this.inFncDecl,\x20text,\x20isIndexer,\x20isStatic,\x20(this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient)),\x20modifiers,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl:\x20FuncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Error)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.name.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.name.limChar\x20=\x20nameLimChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Public)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Private)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAccessor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20verify\x20return-type\x20annotations\x20and\x20arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Getter))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.GetAccessor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22get\x22\x20+\x20funcDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.SetAccessor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22set\x22\x20+\x20funcDecl.name.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20&\x20Modifiers.Ambient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20may\x20not\x20be\x20declared\x20in\x20ambient\x20types\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(text\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNew)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.ConstructMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22_construct\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.classDecl\x20=\x20this.currentClassDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20\x22_call\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.CallMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20new\x20VarDecl(text,\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.typeExpr\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseTypeReference(errorRecoverySet\x20|\x20ErrorRecoverySet.Asg\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr\x20&&\x20varDecl.typeExpr.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeExpr\x20=\x20(<TypeReference>varDecl.typeExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeExpr.term\x20&&\x20typeExpr.term.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeExpr.term.preComments\x20=\x20varDecl.preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(requireSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22context\x20does\x20not\x20permit\x20variable\x20initializer\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20note\x20assignment\x20for\x20language\x20service\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20varDecl.init.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>varDecl.init;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20varDecl.id.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.boundToProperty\x20=\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isAccessor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Accessors\x20may\x20only\x20be\x20functions\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Readonly)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Readonly;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Public)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((modifiers\x20&\x20Modifiers.Private)\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Property;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseVariableDeclaration(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers:\x20Modifiers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowIn:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isStatic:\x20bool):\x20AST\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isConst\x20=\x20hasFlag(modifiers,\x20Modifiers.Readonly);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl:\x20VarDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20multivar\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDeclPreComments\x20=\x20this.parseComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Identifier)\x20&&\x20(!convertTokToID(this.currentToken,\x20this.strictMode)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier\x20in\x20variable\x20declaration\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl\x20=\x20new\x20VarDecl(new\x20MissingIdentifier(),\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDeclName\x20=\x20Identifier.fromToken(this.currentToken)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.strictMode\x20&&\x20(varDeclName.text\x20==\x20\x22eval\x22))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27eval\x27\x20may\x20not\x20name\x20a\x20variable\x20in\x20strict\x20mode\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl\x20=\x20this.makeVarDecl(varDeclName,\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.id.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.preComments\x20=\x20varDeclPreComments;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Readonly))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Readonly;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.varFlags\x20|=\x20VarFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declList.append(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20move\x20past\x20ID;\x20with\x20error\x20recovery\x20need\x20a\x20test\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInFncDecl\x20=\x20this.inFncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFncDecl\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.typeExpr\x20=\x20this.parseTypeReference(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.Asg\x20|\x20ErrorRecoverySet.Comma,\x20/*allowVoid:*/\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFncDecl\x20=\x20prevInFncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Ambient\x20variable\x20can\x20not\x20have\x20an\x20initializer\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20note\x20assignment\x20for\x20language\x20service\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20allowIn,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20varDecl.init.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20use\x20\x27as\x27\x20operator\x20when\x20can\x20bootstrap\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>varDecl.init;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20varDecl.id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isConst)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22const\x20declaration\x20requires\x20initializer\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.postComments\x20=\x20this.parseCommentsForLine(this.scanner.line);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declList.limChar\x20=\x20varDecl.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20declList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!multivar)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declList.minChar\x20=\x20varDecl.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declList.append(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20multivar\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseMemberList(errorRecoverySet:\x20ErrorRecoverySet):\x20ASTList\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20elements\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20elements;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idHint:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberName:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberExpr:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20member:\x20BinaryExpression\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isSet\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20skippedTokenForGetSetId\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20getSetTok:\x20Token\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20getSetStartPos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20getSetPos\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorPattern\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Get\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Set)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isSet\x20=\x20this.currentToken.tokenId\x20==\x20TokenID.Set;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSetTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSetStartPos\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getSetPos\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToIDName(this.currentToken))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20isSet\x20?\x20\x22set\x22\x20:\x20\x22get\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20idHint\x20+\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorPattern\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier,\x20string\x20or\x20number\x20as\x20accessor\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20skippedTokenForGetSetId\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20Identifier.fromToken(getSetTok);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20getSetStartPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20getSetPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToIDName(this.currentToken))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.StringLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20new\x20StringLiteral(idHint);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20allow\x20reserved\x20words\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.NumberLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ntok\x20=\x20<NumberLiteralToken>this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20ntok.value.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20new\x20StringLiteral(idHint);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier,\x20string\x20or\x20number\x20as\x20member\x20name\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet\x20|\x20ErrorRecoverySet.Comma);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!skippedTokenForGetSetId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20skippedTokenForGetSetId\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Question)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberName.flags\x20|=\x20ASTFlags.OptionalName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorPattern)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFormalParameterList(errorRecoverySet\x20|\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args,\x20false,\x20true,\x20false,\x20!isSet,\x20isSet,\x20false,\x20null,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl:\x20FuncDecl\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseFunctionStatements(errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<Identifier>memberName,\x20false,\x20true,\x20args,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20AllowedElements.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanner.startPos,\x20false,\x20Modifiers.None);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSet\x20&&\x20funcDecl.returnTypeAnnotation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20setters\x20may\x20not\x20declare\x20a\x20return\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20isSet\x20?\x20FncFlags.SetAccessor\x20:\x20FncFlags.GetAccessor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20idHint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberExpr\x20=\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member\x20=\x20new\x20BinaryExpression(NodeType.Member,\x20memberName,\x20memberExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.minChar\x20=\x20memberName.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberExpr.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>memberExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20idHint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberExpr\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20memberExpr\x20is\x20a\x20type\x20reference,\x20we\x20can\x20be\x20certain\x20that\x20it\x20was\x20an\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20array\x20type\x20declaraion\x20that\x20lacked\x20a\x20\x22new\x22.\x20\x20We\x20can\x20realistically\x20only\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20expect\x20call\x20and\x20name\x20ASTs\x20to\x20be\x20the\x20result\x20of\x20this\x20call\x20to\x20parseExpr.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x27s\x20a\x20constructor\x20without\x20a\x20\x22new\x22,\x20we\x27ll\x20flag\x20it\x20as\x20an\x20invalid\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20call\x20site\x20later\x20on.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberExpr.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27new\x27\x20on\x20array\x20declaration\x20in\x20member\x20definition\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member\x20=\x20new\x20BinaryExpression(NodeType.Member,\x20memberName,\x20memberExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.minChar\x20=\x20memberName.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberExpr.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>memberExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20idHint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27:\x27\x20in\x20member\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20elements;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.append(member);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20member.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20munch\x20comma\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20trailing\x20comma\x20allowed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(member)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.limChar\x20=\x20member.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20elements;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseArrayList(errorRecoverySet:\x20ErrorRecoverySet):\x20ASTList\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20elements:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBracket)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20elements;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arg:\x20AST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Comma)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBracket))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20new\x20AST(NodeType.EmptyExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arg\x20=\x20this.parseExpr(ErrorRecoverySet.Comma\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.append(arg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Comma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elements.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20elements;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseArrayLiteral(errorRecoverySet:\x20ErrorRecoverySet):\x20UnaryExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arrayLiteral:\x20UnaryExpression\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arrayLiteral\x20=\x20new\x20UnaryExpression(NodeType.ArrayLit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseArrayList(errorRecoverySet));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20arrayLiteral;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTerm(errorRecoverySet:\x20ErrorRecoverySet,\x20allowCall:\x20bool,\x20typeContext:\x20TypeContext,\x20inCast:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sawId\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inNew\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parseAsLambda\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20expectlambdaRParen\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20keywords\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Number:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Bool:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Any:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.String:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tid\x20=\x20new\x20Identifier(tokenTable[this.currentToken.tokenId].text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(typeContext,\x20TypeContext.Primitive))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20TypeReference(tid,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sawId\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20tid;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sawId\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.This:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.This);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Super:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Super);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.True:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.True);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.False:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.False);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Null:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.New:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20target\x20=\x20this.parseTerm(errorRecoverySet,\x20false,\x20TypeContext.AllSimpleTypes,\x20inCast);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.nodeType\x20==\x20NodeType.Error\x20||\x20(target.nodeType\x20==\x20NodeType.Index\x20&&\x20(<BinaryExpression>target).operand1.nodeType\x20==\x20NodeType.TypeRef))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Cannot\x20invoke\x20\x27new\x27\x20on\x20this\x20expression\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20CallExpression(NodeType.New,\x20target,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inNew\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Function:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseFncDecl(errorRecoverySet,\x20false,\x20false,\x20false,\x20null,\x20false,\x20false,\x20false,\x20Modifiers.None,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idText\x20=\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.createRef(idText,\x20(<IdentifierToken>this.currentToken).hasEscapeSequence,\x20minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sawId\x20=\x20true;\x0a\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Question)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.PossibleOptionalParameter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inCast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.GreaterThan,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenParen:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevTokId\x20=\x20this.scanner.previousToken().tokenId;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20couldBeLambda\x20=\x20prevTokId\x20==\x20TokenID.OpenParen\x20||\x20//\x20foo(()=>{});\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevTokId\x20==\x20TokenID.Comma\x20||\x20//\x20foo(x,()=>{});\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevTokId\x20==\x20TokenID.EqualsEquals\x20||\x20//\x20var\x20foo\x20=\x20()=>{};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevTokId\x20==\x20TokenID.Colon;\x20\x20\x20\x20//\x20var\x20x\x20=\x20{\x20foo:\x20()=>\x20{}\x20};\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(couldBeLambda\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.CloseParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseAsLambda\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20expectlambdaRParen\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(couldBeLambda\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.DotDotDot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseAsLambda\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20expectlambdaRParen\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x20TypeContext.NoTypes,\x20couldBeLambda);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseAsLambda\x20=\x20couldBeLambda\x20&&\x20(ast.nodeType\x20==\x20NodeType.Name\x20||\x20ast.nodeType\x20==\x20NodeType.Comma)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Question);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20expectlambdaRParen\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20for\x20the\x20RParen\x20if\x20it\x27s\x20not\x20an\x20anonymous\x20\x27=>\x27\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((ast\x20&&\x20!parseAsLambda))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(ast.flags,\x20ASTFlags.SkipNextRParen))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20parseExpr\x20resulted\x20in\x20a\x20lambda\x20node,\x20the\x20LParen\x20scanned\x20earlier,\x20is\x20the\x20beginning\x20of\x20that\x20node,\x20and\x20not\x20of\x20a\x20parenthesized\x20expression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20do\x20not\x20look\x20for\x20a\x20matching\x20RParen\x20for\x20this\x20node,\x20but\x20make\x20sure\x20to\x20remove\x20the\x20flag,\x20so\x20that\x20any\x20enclosing\x20parenthesis\x20are\x20matched\x20correctly.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20=\x20ast.flags\x20&\x20(~(ASTFlags.SkipNextRParen));\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.isParenthesized\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.NumberLiteral:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20numTok\x20=\x20<NumberLiteralToken>this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20NumberLiteral(numTok.value,\x20numTok.hasEmptyFraction);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.StringLiteral:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20StringLiteral(this.currentToken.getText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.RegularExpressionLiteral:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rtok\x20=\x20<RegularExpressionLiteralToken>this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20RegexLiteral(rtok.regex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenBracket:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseArrayLiteral(ErrorRecoverySet.RBrack\x20|\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.pos;\x20//\x20\x27]\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBracket,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20rescan\x20regex\x20for\x20TokenID.Div\x20and\x20AsgDiv\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenBrace:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20this.parseMemberList(ErrorRecoverySet.RCurly\x20|\x20errorRecoverySet)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20UnaryExpression(NodeType.ObjectLit,\x20members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.LessThan:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20term:\x20AST\x20=\x20this.parseTypeReference(ErrorRecoverySet.BinOp,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.GreaterThan,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20UnaryExpression(NodeType.TypeAssertion,\x20this.parseExpr(errorRecoverySet,\x20OperatorPrecedence.Unary,\x20false,\x20TypeContext.NoTypes));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<UnaryExpression>ast).castTerm\x20=\x20term;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.prevExpr\x20&&\x20hasFlag(this.prevExpr.flags,\x20ASTFlags.PossibleOptionalParameter))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseAsLambda\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.prevExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Check\x20format\x20of\x20expression\x20term\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ident\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ident.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ident.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet\x20|\x20ErrorRecoverySet.Postfix);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ident.setText(this.currentToken.getText(),\x20(<IdentifierToken>this.currentToken).hasEscapeSequence);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//tok=scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20set\x20sawId\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20ident;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parseAsLambda)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20next\x20token\x20is\x20an\x20fat\x20arrow\x20or\x20a\x20colon,\x20we\x20either\x20have\x20a\x20parameter\x20list,\x20or\x20can\x20rightly\x20assume\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20that\x20we\x20have\x20a\x20typed\x20formal,\x20so\x20we\x20proceed\x20with\x20the\x20lambda\x20parse\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken.tokenId\x20==\x20TokenID.Colon\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken.tokenId\x20==\x20TokenID.Comma\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken.tokenId\x20==\x20TokenID.CloseParen\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken.tokenId\x20==\x20TokenID.DotDotDot)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20won\x27t\x20scan\x20in\x20the\x20\x27:\x27\x20case,\x20since\x20keeping\x20the\x20\x27:\x27\x20simplifies\x20argument\x20handling\x20in\x20parseFormalParameterList\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note\x20that\x20we\x20don\x27t\x20set\x20the\x20minchar\x20in\x20this\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseLambdaExpr(errorRecoverySet,\x20ast,\x20true\x20/*\x20skipNextRParen\x20*/,\x20expectlambdaRParen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.isParenthesized\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sawId\x20&&\x20(typeContext\x20!=\x20TypeContext.NoTypes))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeContext\x20|=\x20TypeContext.ArraySuffix;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20postFix\x20=\x20this.parsePostfixOperators(errorRecoverySet,\x20ast,\x20allowCall,\x20inNew,\x20typeContext,\x20minChar,\x20limChar);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Defensive\x20error\x20check...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(postFix)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sawId\x20&&\x20(postFix.nodeType\x20==\x20NodeType.Index))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binExpr\x20=\x20<BinaryExpression>postFix;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binExpr.operand2\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postFix\x20=\x20this.convertToTypeReference(postFix);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20Eventually,\x20we\x20want\x20to\x20remove\x20\x22minChar\x22\x20and\x20\x22limChar\x22\x20assignments\x20here,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20as\x20they\x20are\x20sometimes\x20not\x20specific\x20enough\x20for\x20each\x20expression\x20kind.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postFix.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Only\x20update\x20\x22limChar\x22\x20if\x20it\x20is\x20not\x20better\x20than\x20\x22lastTokenLimChar()\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postFix.limChar\x20=\x20max(postFix.limChar,\x20this.scanner.lastTokenLimChar());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20postFix;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseLambdaExpr(errorRecoverySet:\x20ErrorRecoverySet,\x20lambdaArgs:\x20AST,\x20skipNextRParen:\x20bool,\x20expectClosingRParen:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Parse\x20the\x20remainder\x20of\x20a\x20lambda\x20expression.\x20The\x20opening\x20paren\x20has\x20been\x20read\x20already,\x20if\x20it\x20existed.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20skipNextRParen\x20sets\x20a\x20flag\x20on\x20the\x20resulting\x20lambda\x20node\x20to\x20tell\x20the\x20calling\x20parseTerm\x20that\x20the\x20LParen\x20it\x20scanned\x20has\x20been\x20matched\x20as\x20part\x20of\x20parsing\x20the\x20formal\x20parameter\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20expectClosingRParen\x20indicates\x20that\x20a\x20closing\x20RParen\x20is\x20expected,\x20in\x20the\x20cases\x20with\x20optional\x20parameter\x20or\x20more\x20than\x20one\x20parameter.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20this.parseFncDecl(errorRecoverySet,\x20false,\x20false,\x20false,\x20null,\x20false,\x20false,\x20false,\x20Modifiers.None,\x20{\x20preProcessedLambdaArgs:\x20lambdaArgs\x20},\x20expectClosingRParen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.IsFatArrowFunction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!skipNextRParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.SkipNextRParen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseExpr(errorRecoverySet:\x20ErrorRecoverySet,\x20minPrecedence:\x20number,\x20allowIn:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeContext:\x20TypeContext,\x20possiblyInLambda:\x20bool\x20=\x20false):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tokenInfo\x20=\x20lookupToken(this.currentToken.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20canAssign:\x20bool\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idHint:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exprIsAnonLambda\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenInfo\x20!=\x20undefined)\x20&&\x20(tokenInfo.unopNodeType\x20!=\x20NodeType.None))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20canAssign\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tempExpr\x20=\x20this.parseExpr(ErrorRecoverySet.BinOp\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tokenInfo.unopPrecedence,\x20allowIn,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20fold\x20unary\x20+-\x20into\x20constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenInfo.unopNodeType\x20==\x20NodeType.Pos)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(tempExpr.nodeType\x20==\x20NodeType.NumberLit))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20tempExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((tokenInfo.unopNodeType\x20==\x20NodeType.Neg)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(tempExpr.nodeType\x20==\x20NodeType.NumberLit))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20numLit\x20=\x20<NumberLiteral>tempExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20numLit.value\x20=\x20(-numLit.value);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(numLit.value\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20numLit.isNegativeZero\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20tempExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20UnaryExpression(tokenInfo.unopNodeType,\x20tempExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20tempExpr.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseTerm(ErrorRecoverySet.BinOp\x20|\x20ErrorRecoverySet.AddOp\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet,\x20true,\x20typeContext,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id:\x20Identifier;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x20=\x20<Identifier>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Dot)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20this\x20is\x20within\x20a\x20class\x20declaration,\x20and\x20the\x20circumstances\x20are\x20right,\x20we\x20need\x20to\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20transform\x20the\x20dotted\x20expression\x20into\x20a\x20member\x20declaration\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20subsumedExpr\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inferPropertiesFromThisAssignment\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Colon\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Equals)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20==\x20this.currentClassDefinition.constructorNestingLevel\x20&&\x20//\x20this\x20nesting\x20level\x20means\x20we\x27re\x20at\x20the\x20top-level\x20in\x20the\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<BinaryExpression>ast).operand1.nodeType\x20==\x20NodeType.This)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<BinaryExpression>ast).operand2.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20op2ID:\x20Identifier\x20=\x20(<Identifier>(<BinaryExpression>ast).operand2);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.currentClassDefinition.knownMemberNames[op2ID.actualText])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseClassMemberVariableDeclaration(op2ID,\x20ast.minChar,\x20true,\x20errorRecoverySet,\x20Modifiers.Public);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20subsumedExpr\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!subsumedExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(temp.nodeType\x20==\x20NodeType.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binExpr\x20=\x20<BinaryExpression>temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20binExpr.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(temp.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x20=\x20<Identifier>temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20id.actualText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!this.scanner.lastTokenHadNewline())\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((this.currentToken.tokenId\x20==\x20TokenID.PlusPlus)\x20||\x20(this.currentToken.tokenId\x20==\x20TokenID.MinusMinus)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20canAssign\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20operand\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20UnaryExpression((this.currentToken.tokenId\x20==\x20TokenID.PlusPlus)\x20?\x20NodeType.IncPost\x20:\x20NodeType.DecPost,\x20operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20operand.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tokenInfo\x20=\x20lookupToken(this.currentToken.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenInfo\x20==\x20undefined)\x20||\x20(tokenInfo.binopNodeType\x20==\x20NodeType.None))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!allowIn)\x20&&\x20(tokenInfo.binopNodeType\x20==\x20NodeType.In))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo.binopPrecedence\x20==\x20OperatorPrecedence.Assignment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo.binopPrecedence\x20<\x20minPrecedence)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!canAssign)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22illegal\x20assignment\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(tokenInfo.binopPrecedence\x20<=\x20minPrecedence)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(possiblyInLambda\x20&&\x20this.currentToken.tokenId\x20==\x20TokenID.Comma\x20&&\x20this.scanner.getLookAheadToken().tokenId\x20==\x20TokenID.DotDotDot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20ellipsis\x20can\x20only\x20exist\x20in\x20the\x20formal\x20list\x20of\x20a\x20lambda\x20expression,\x20so\x20do\x20not\x20attempt\x20to\x20parse\x20the\x20comma\x20token\x20as\x20the\x20comma\x20binary\x20operator\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20instead\x20parse\x20it\x20as\x20a\x20lambda\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exprIsAnonLambda\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20canAssign\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseLambdaExpr(errorRecoverySet,\x20ast,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Precedence\x20is\x20high\x20enough.\x20Consume\x20the\x20operator\x20token.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20canAssign\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo.binopNodeType\x20==\x20NodeType.ConditionalExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(possiblyInLambda\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(\x20this.currentToken.tokenId\x20==\x20TokenID.Equals\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Colon\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.CloseParen\x20||\x20this.currentToken.tokenId\x20==\x20TokenID.Comma))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20QMark\x20is\x20not\x20a\x20ternary\x20expression,\x20it\x20is\x20a\x20marker\x20for\x20optional\x20parameter\x20in\x20a\x20lambda\x20expression.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exprIsAnonLambda\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20canAssign\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevExpr\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20whenTrue\x20=\x20this.parseExpr(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.Colon,\x20OperatorPrecedence.Assignment,\x20allowIn,\x20TypeContext.NoTypes);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Do\x20not\x20hold\x20onto\x20the\x20prevExpr\x20handle\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevExpr\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Colon,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20whenFalse\x20=\x20this.parseExpr(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.BinOp,\x20OperatorPrecedence.Assignment,\x20allowIn,\x20TypeContext.NoTypes)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20ConditionalExpression(ast,\x20whenTrue,\x20whenFalse);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tc\x20=\x20TypeContext.NoTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binExpr2:\x20BinaryExpression;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binExpr2\x20=\x20new\x20BinaryExpression(tokenInfo.binopNodeType,\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseExpr(errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.BinOp,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tokenInfo.binopPrecedence,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowIn,\x20TypeContext.NoTypes,\x20possiblyInLambda));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binExpr2.operand2.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>binExpr2.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.hint\x20=\x20idHint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binExpr2.minChar\x20=\x20ast.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binExpr2.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idHint\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20binExpr2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(canAssign)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.Writeable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!exprIsAnonLambda)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20Eventually,\x20we\x20want\x20to\x20remove\x20\x22minChar\x22\x20and\x20\x22limChar\x22\x20assignments\x20here,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20as\x20they\x20are\x20sometimes\x20not\x20specific\x20enough\x20for\x20each\x20statement\x20kind.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Only\x20update\x20\x22limChar\x22\x20if\x20it\x20is\x20not\x20better\x20than\x20\x22lastTokenLimChar()\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20max(ast.limChar,\x20this.scanner.lastTokenLimChar());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.postComments\x20=\x20this.parseCommentsForLine(this.scanner.line);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parsePostfixOperators(errorRecoverySet:\x20ErrorRecoverySet,\x20ast:\x20AST,\x20allowCall:\x20bool,\x20inNew:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeContext:\x20TypeContext,\x20lhsMinChar:\x20number,\x20lhsLimChar:\x20number):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20count\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.EmptyExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.isParenthesized\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20lhsMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20lhsLimChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenParen:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inNew)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20callExpr\x20=\x20<CallExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callExpr.arguments\x20=\x20this.parseArgList(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inNew\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!allowCall)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20CallExpression(NodeType.Call,\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseArgList(errorRecoverySet));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20lhsMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x20//\x20\x27)\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenBracket:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseBracket)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(typeContext,\x20TypeContext.ArraySuffix))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeRef\x20=\x20<TypeReference>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeRef.arrayCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20BinaryExpression(NodeType.Index,\x20ast,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x20//\x20note\x20early\x20exit\x20from\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20BinaryExpression(NodeType.Index,\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.RBrack,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20lhsMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x20//\x20\x27]\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBracket,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Dot:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20curpos\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20allow\x20reserved\x20words\x20if\x20immediately\x20after\x20a\x20new\x20line\x20and\x20error\x20recovery\x20is\x20enabled\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20((!this.errorRecovery\x20||\x20!this.scanner.lastTokenHadNewline())\x20&&\x20convertTokToIDName(this.currentToken)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.DotLHS;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20this.createRef(this.currentToken.getText(),\x20(<IdentifierToken>this.currentToken).hasEscapeSequence,\x20this.scanner.startPos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier\x20following\x20dot\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20(ASTFlags.Error\x20|\x20ASTFlags.DotLHS);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name\x20=\x20new\x20MissingIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20BinaryExpression(NodeType.Dot,\x20ast,\x20name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20lhsMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.EqualsGreaterThan:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseFncDecl(errorRecoverySet,\x20false,\x20false,\x20false,\x20null,\x20false,\x20false,\x20false,\x20Modifiers.None,\x20{\x20preProcessedLambdaArgs:\x20ast\x20},\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.IsFunctionExpression;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20lhsMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTry(tryNode:\x20Try,\x20errorRecoverySet:\x20ErrorRecoverySet,\x20parentModifiers:\x20Modifiers):\x20Try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27{\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20etryNode\x20=\x20tryNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etryNode.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etryNode.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etryNode.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20etryNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryNode.body\x20=\x20this.parseStatement(errorRecoverySet,\x20AllowedElements.None,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryNode.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryNode.limChar\x20=\x20tryNode.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryNode.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryNode.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tryNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseCatch(errorRecoverySet:\x20ErrorRecoverySet,\x20parentModifiers:\x20Modifiers):\x20Catch\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20identifier\x20in\x20catch\x20header\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ecatch\x20=\x20new\x20Catch(new\x20VarDecl(new\x20MissingIdentifier(),\x20this.nestingLevel),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20Statement(NodeType.Empty));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.statement.minChar\x20=\x20catchMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.statement.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ecatch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20param\x20=\x20new\x20VarDecl(Identifier.fromToken(this.currentToken),\x20this.nestingLevel);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20param.id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20param.id.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20param.minChar\x20=\x20param.id.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20param.limChar\x20=\x20param.id.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20statementPos\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27{\x27\x20to\x20start\x20catch\x20body\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ecatch\x20=\x20new\x20Catch(new\x20VarDecl(new\x20MissingIdentifier(),\x20this.nestingLevel),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20Statement(NodeType.Empty));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.statement.minChar\x20=\x20catchMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.statement.limChar\x20=\x20statementPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ecatch.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ecatch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchStmt\x20=\x20this.parseStatement(errorRecoverySet,\x20AllowedElements.None,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchNode\x20=\x20new\x20Catch(param,\x20catchStmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.statement.minChar\x20=\x20catchMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.statement.limChar\x20=\x20statementPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.minChar\x20=\x20catchMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.limChar\x20=\x20catchStmt.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchNode.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20catchNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseFinally(errorRecoverySet:\x20ErrorRecoverySet,\x20parentModifiers:\x20Modifiers):\x20Finally\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20finMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27{\x27\x20to\x20start\x20body\x20of\x20finally\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20efin\x20=\x20new\x20Finally(new\x20Statement(NodeType.Empty));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20efin.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20efin.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20efin.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20efin;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20finBody\x20=\x20this.parseStatement(errorRecoverySet,\x20AllowedElements.None,\x20parentModifiers)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fin\x20=\x20new\x20Finally(finBody);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fin.minChar\x20=\x20finMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fin.limChar\x20=\x20fin.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fin.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fin.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fin;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseTryCatchFinally(errorRecoverySet:\x20ErrorRecoverySet,\x20parentModifiers:\x20Modifiers,\x20labelList:\x20ASTList):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tryPart:\x20AST\x20=\x20new\x20Try(null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tryMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(<Statement>tryPart,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseTry(<Try>tryPart,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.Catch,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tc:\x20TryCatch\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tf:\x20TryFinally\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Catch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchPart\x20=\x20this.parseCatch(errorRecoverySet\x20|\x20ErrorRecoverySet.Catch,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tc\x20=\x20new\x20TryCatch(<Try>tryPart,\x20catchPart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tc.minChar\x20=\x20tryPart.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tc.limChar\x20=\x20catchPart.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Finally)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tc\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22try\x20with\x20neither\x20catch\x20nor\x20finally\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20etf\x20=\x20new\x20TryFinally(tryPart,\x20new\x20Finally(new\x20AST(NodeType.Empty)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etf.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etf.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20etf.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20etf;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20TryFinally(tryPart,\x20new\x20Finally(new\x20AST(NodeType.Empty)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tryPart\x20=\x20tc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20finallyPart\x20=\x20this.parseFinally(errorRecoverySet,\x20parentModifiers)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tf\x20=\x20new\x20TryFinally(tryPart,\x20finallyPart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tf.minChar\x20=\x20tryMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tf.limChar\x20=\x20finallyPart.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tf;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseStatement(errorRecoverySet:\x20ErrorRecoverySet,\x20allowedElements:\x20AllowedElements,\x20parentModifiers:\x20Modifiers):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20labelList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20astList:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modifiers\x20=\x20Modifiers.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20forInOk\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20needTerminator\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnOrVar:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartStatement;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20isAmbient()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(modifiers,\x20Modifiers.Ambient)\x20||\x20hasFlag(parentModifiers,\x20Modifiers.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20mayNotBeExported()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(\x22Statement\x20may\x20not\x20be\x20exported\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.EndOfFile:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Function:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20isAmbient()\x20||\x20this.ambientModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnOrVar\x20=\x20this.parsePropertyDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers,\x20true,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnOrVar.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22function\x20keyword\x20can\x20only\x20introduce\x20function\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((fnOrVar.nodeType\x20==\x20NodeType.FuncDecl)\x20&&\x20((<FuncDecl>fnOrVar).fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20fnOrVar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20&&\x20ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseFncDecl(errorRecoverySet,\x20true,\x20false,\x20false,\x20null,\x20false,\x20false,\x20isAmbient(),\x20modifiers,\x20null,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag((<FuncDecl>ast).fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22function\x20declaration\x20not\x20permitted\x20within\x20ambient\x20module\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Module:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.ModuleDeclarations)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22module\x20not\x20allowed\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseModuleDecl(errorRecoverySet,\x20modifiers,\x20preComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preComments\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Import:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.ModuleDeclarations)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22module\x20not\x20allowed\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22export\x20keyword\x20not\x20permitted\x20on\x20import\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseImportDeclaration(errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Export:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.ModuleDeclarations)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27export\x27\x20statements\x20are\x20only\x20allowed\x20at\x20the\x20global\x20and\x20module\x20levels\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.topLevel)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasTopLevelImportOrExport\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Private:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Private;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingClassConstructorDefinition)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.inferPropertiesFromThisAssignment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20declarations\x20are\x20not\x20permitted\x20within\x20constructor\x20bodies\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inferPropertiesFromThisAssignment\x20&&\x20(this.currentToken.tokenId\x20!=\x20TokenID.This\x20||\x20(this.currentToken\x20=\x20this.scanner.scan()).tokenId\x20!=\x20TokenID.Dot))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27this.\x27\x20for\x20property\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseClassMemberVariableDeclaration(id,\x20minChar,\x20this.parsingClassConstructorDefinition,\x20errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Interface)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Get)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Getter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Set)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Setter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnOrVar\x20=\x20this.parsePropertyDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers,\x20isAmbient(),\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((fnOrVar.nodeType\x20==\x20NodeType.VarDecl)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((fnOrVar.nodeType\x20==\x20NodeType.FuncDecl)\x20&&\x20(hasFlag((<FuncDecl>fnOrVar).fncFlags,\x20FncFlags.IsFatArrowFunction))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20fnOrVar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Public:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingClassConstructorDefinition)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.inferPropertiesFromThisAssignment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20declarations\x20are\x20not\x20permitted\x20within\x20constructor\x20bodies\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inferPropertiesFromThisAssignment\x20&&\x20(this.currentToken.tokenId\x20!=\x20TokenID.This\x20||\x20(this.currentToken\x20=\x20this.scanner.scan()).tokenId\x20!=\x20TokenID.Dot))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27this.\x27\x20for\x20property\x20declaration\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20Identifier.fromToken(this.currentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseClassMemberVariableDeclaration(id,\x20minChar,\x20this.parsingClassConstructorDefinition,\x20errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.Properties)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27property\x27\x20statements\x20are\x20only\x20allowed\x20within\x20classes\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Get)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Getter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Set)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Setter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnOrVar\x20=\x20this.parsePropertyDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers,\x20isAmbient(),\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((fnOrVar.nodeType\x20==\x20NodeType.VarDecl)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((fnOrVar.nodeType\x20==\x20NodeType.FuncDecl)\x20&&\x20hasFlag((<FuncDecl>fnOrVar).fncFlags,\x20FncFlags.IsFatArrowFunction)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20fnOrVar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Declare:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(allowedElements\x20&\x20AllowedElements.AmbientDeclarations))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Ambient\x20declarations\x20are\x20only\x20allowed\x20at\x20the\x20top-level\x20or\x20module\x20scopes\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.parsingDeclareFile\x20&&\x20hasFlag(parentModifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Duplicate\x20ambient\x20declaration\x20in\x20this\x20context.\x20(Is\x20the\x20enclosing\x20module\x20or\x20class\x20already\x20ambient?)\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Class:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.ClassDeclarations)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22class\x20not\x20allowed\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseClassDecl(errorRecoverySet,\x20minChar,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Interface:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((allowedElements\x20&\x20AllowedElements.InterfaceDeclarations)\x20==\x20AllowedElements.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22interface\x20not\x20allowed\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Error);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseInterfaceDecl(errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Var:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declAst:\x20AST\x20=\x20this.parseVariableDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart,\x20modifiers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declAst.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20declAst;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20Block(<ASTList>declAst,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Static:\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentClassDecl\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Statics\x20may\x20only\x20be\x20class\x20members\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Get)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20this.currentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Getter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Set)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Property\x20accessors\x20are\x20only\x20available\x20when\x20targeting\x20ES5\x20or\x20greater\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20||\x20convertTokToID(this.currentToken,\x20this.strictMode))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Setter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers\x20|=\x20Modifiers.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnOrVar\x20=\x20this.parsePropertyDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modifiers,\x20this.parsingDeclareFile\x20||\x20(modifiers\x20&\x20Modifiers.Ambient)\x20!=\x20Modifiers.None,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20staticsList\x20=\x20this.topStaticsList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(staticsList\x20&&\x20fnOrVar.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20staticsList.append(fnOrVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnOrVar.nodeType\x20==\x20NodeType.VarDecl\x20||\x20((fnOrVar.nodeType\x20==\x20NodeType.FuncDecl)\x20&&\x20hasFlag((<FuncDecl>fnOrVar).fncFlags,\x20FncFlags.IsFatArrowFunction)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20fnOrVar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.For:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22syntax\x20error:\x20for\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkNextToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart\x20|\x20ErrorRecoverySet.Var);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.ForInit;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInOk\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Var:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.parseVariableDeclaration(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.In,\x20Modifiers.None,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Semicolon:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.ForCondStart;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.In,\x20OperatorPrecedence.None,\x20false,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.ForInitAfterVar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.In)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((temp\x20==\x20null)\x20||\x20(!forInOk))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22malformed\x20for\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Empty);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20forInStmt\x20=\x20new\x20ForInStatement(temp,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseExpr(ErrorRecoverySet.RParen\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.Comma,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20false,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.statement.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.statement.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20ErrorRecoverySet.StmtStart\x20|\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(forInStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.body\x20=\x20this.parseStatement(errorRecoverySet,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20forInStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20forStmt:\x20ForStatement\x20=\x20new\x20ForStatement(temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Semicolon,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.cond\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.cond\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.skip(errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20forStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.Error;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.CloseParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.incr\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.incr\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(forStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.body\x20=\x20this.parseStatement(errorRecoverySet,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.limChar\x20=\x20forStmt.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20forStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.With:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20<\x20CodeGenTarget.ES5)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27with\x27\x20statements\x20are\x20only\x20available\x20in\x20ES5\x20codegen\x20mode\x20or\x20better\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.strictMode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27with\x27\x20statements\x20are\x20not\x20available\x20in\x20strict\x20mode\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27with\x27\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkNextToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart\x20|\x20ErrorRecoverySet.Var);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20expr\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.Colon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20withStmt\x20=\x20new\x20WithStatement(expr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20withStmt.body\x20=\x20this.parseStatement(errorRecoverySet,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20withStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20withStmt.limChar\x20=\x20withStmt.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20withStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Switch:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27switch\x27\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkNextToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20switchStmt\x20=\x20new\x20SwitchStatement(this.parseExpr(errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.statement.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.statement.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LCurly);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20caseListMinChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenBrace,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.SCase);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.defaultCase\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.caseList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20caseStmt:\x20CaseStatement\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(switchStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Case)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.Default))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDefault\x20=\x20(this.currentToken.tokenId\x20==\x20TokenID.Default);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt\x20=\x20new\x20CaseStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDefault)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.defaultCase\x20=\x20caseStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt.expr\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.Colon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.Colon,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt.body\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseStatementList(errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt.body,\x20false,\x20true,\x20allowedElements,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20caseStmt.limChar\x20=\x20caseStmt.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.caseList.append(caseStmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20end\x20of\x20switch\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.caseList.minChar\x20=\x20caseListMinChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.caseList.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switchStmt.limChar\x20=\x20switchStmt.caseList.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20switchStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.While:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27while\x27\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkNextToken(TokenID.OpenParen,\x20ErrorRecoverySet.ExprStart\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20whileStmt\x20=\x20new\x20WhileStatement(this.parseExpr(errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x20TypeContext.NoTypes));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(whileStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.body\x20=\x20this.parseStatement(errorRecoverySet,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.limChar\x20=\x20whileStmt.body.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20whileStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Do:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22\x27do\x27\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20doStmt\x20=\x20new\x20DoWhileStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(doStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.body\x20=\x20this.parseStatement(errorRecoverySet\x20|\x20ErrorRecoverySet.While,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.whileAST\x20=\x20new\x20Identifier(\x22while\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.whileAST.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.While,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.LParen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.whileAST.limChar\x20=\x20doStmt.whileAST.minChar\x20+\x205;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.cond\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.RParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doStmt.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20doStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20compatibility;\x20more\x20strict\x20would\x20be\x20to\x20require\x20the\x20\x27;\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Semicolon)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.If:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22if\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkNextToken(TokenID.OpenParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.ExprStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ifStmt\x20=\x20new\x20IfStatement(this.parseExpr(errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.LParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.statement.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.statement.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseParen,\x20errorRecoverySet\x20|\x20ErrorRecoverySet.StmtStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(ifStmt,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.thenBod\x20=\x20this.parseStatement(ErrorRecoverySet.Else\x20|\x20errorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.limChar\x20=\x20ifStmt.thenBod.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20==\x20TokenID.Else)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.elseBod\x20=\x20this.parseStatement(errorRecoverySet,\x20allowedElements,\x20parentModifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.limChar\x20=\x20ifStmt.elseBod.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20ifStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Try:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22try\x20statement\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseTryCatchFinally(errorRecoverySet,\x20parentModifiers,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.OpenBrace:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22block\x20does\x20not\x20take\x20modifiers\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20block\x20=\x20new\x20Block(new\x20ASTList(),\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushStmt(block,\x20labelList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseStatementList(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|\x20ErrorRecoverySet.RCurly,\x20block.statements,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20/*sourceElements:*/\x20false,\x20/*noLeadingCase:*/\x20false,\x20AllowedElements.None,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popStmt();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20block.statements.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20block.statements.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20block.minChar\x20=\x20block.statements.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20block.limChar\x20=\x20block.statements.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkCurrentToken(TokenID.CloseBrace,\x20errorRecoverySet);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20block;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Semicolon:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifier\x20can\x20not\x20appear\x20here\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20AST(NodeType.Empty);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Break:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Continue:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifiers\x20can\x20not\x20appear\x20before\x20jump\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20jump\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20Jump((this.currentToken.tokenId\x20==\x20TokenID.Break)\x20?\x20NodeType.Break\x20:\x20NodeType.Continue);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Identifier)\x20&&\x20(!this.scanner.lastTokenHadNewline()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Labeled\x20break\x20or\x20continue.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jump.target\x20=\x20this.currentToken.getText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveJumpTarget(jump);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20jump;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Return:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifiers\x20can\x20not\x20appear\x20before\x20return\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.inFunction)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22return\x20statement\x20outside\x20of\x20function\x20body\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20retStmt\x20=\x20new\x20ReturnStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20!=\x20TokenID.CloseBrace)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!(this.scanner.lastTokenHadNewline())))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.returnExpression\x20=\x20this.parseExpr(errorRecoverySet\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20retStmt.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20retStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Throw:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifiers\x20can\x20not\x20appear\x20before\x20a\x20throw\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20!=\x20TokenID.Semicolon)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20!=\x20TokenID.CloseBrace)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!(this.scanner.lastTokenHadNewline())))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.parseExpr(errorRecoverySet\x20|\x20ErrorRecoverySet.SColon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20OperatorPrecedence.None,\x20true,\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22throw\x20with\x20no\x20target\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20UnaryExpression(NodeType.Throw,\x20temp);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Enum:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20check\x20module\x20allowed\x20here\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//minChar=scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20this.parseEnumDecl(errorRecoverySet,\x20modifiers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ModuleDeclaration>ast).modFlags\x20|=\x20ModuleFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile\x20||\x20this.ambientModule\x20||\x20hasFlag(modifiers,\x20Modifiers.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ModuleDeclaration>ast).modFlags\x20|=\x20ModuleFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Debugger:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mayNotBeExported();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifiers\x20can\x20not\x20appear\x20before\x20debugger\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20debuggerStmt\x20=\x20new\x20DebuggerStatement();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20debuggerStmt.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20debuggerStmt.limChar\x20=\x20this.scanner.lastTokenLimChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20debuggerStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modifiers\x20!=\x20Modifiers.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22modifiers\x20can\x20not\x20appear\x20before\x20an\x20expression\x20statement\x20or\x20label\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svPos\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20=\x20this.parseExpr(ErrorRecoverySet.Colon\x20|\x20ErrorRecoverySet.StmtStart\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet,\x20OperatorPrecedence.None,\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeContext.NoTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scanner.pos\x20==\x20svPos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20progress\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.Colon)\x20&&\x20(!this.scanner.lastTokenHadNewline())\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp\x20&&\x20(temp.nodeType\x20==\x20NodeType.Name))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20It\x27s\x20a\x20label\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(labelList\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20labelList\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20labelList.append(new\x20Label(<Identifier>temp));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20expression\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20needTerminator\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(needTerminator)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.currentToken.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Semicolon:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.ExplicitSemicolon;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.EndOfFile:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Extend\x20any\x20incomplete\x20statements\x20to\x20include\x20EOF\x20token.\x20This\x20makes\x20sure\x20that\x20this\x20node\x20is\x20in\x20the\x20path\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20when\x20completion\x20or\x20parameter\x20help\x20is\x20requested.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20IntentionaCloseBracethrough\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.CloseBrace:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.AutomaticSemicolon;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.style_requireSemi)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseStyleError(\x22no\x20automatic\x20semicolon\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.scanner.lastTokenHadNewline())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Expected\x20\x27;\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.AutomaticSemicolon;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.style_requireSemi)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseStyleError(\x22no\x20automatic\x20semicolon\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(labelList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20new\x20LabeledStatement(labelList,\x20ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20Eventually,\x20we\x20want\x20to\x20remove\x20\x22minChar\x22\x20and\x20\x22limChar\x22\x20assignments\x20here,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20as\x20they\x20are\x20sometimes\x20not\x20specific\x20enough\x20for\x20each\x20statement\x20kind.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Only\x20update\x20\x22limChar\x22\x20if\x20it\x20is\x20not\x20better\x20than\x20\x22lastTokenLimChar()\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20=\x20max(ast.limChar,\x20this.scanner.lastTokenLimChar());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20///////////////////////////////////////////////////////////\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.preComments\x20=\x20preComments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientModule\x20&&\x20(!this.okAmbientModuleMember(ast)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22statement\x20not\x20permitted\x20within\x20ambient\x20module\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20|=\x20ASTFlags.IsStatement;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20okAmbientModuleMember(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nt\x20=\x20ast.nodeType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(nt\x20==\x20NodeType.ClassDeclaration)\x20||\x20(nt\x20==\x20NodeType.ImportDeclaration)\x20||\x20(nt\x20==\x20NodeType.InterfaceDeclaration)\x20||\x20(nt\x20==\x20NodeType.ModuleDeclaration)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(nt\x20==\x20NodeType.Empty)\x20||\x20(nt\x20==\x20NodeType.VarDecl)\x20||\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((nt\x20==\x20NodeType.Block)\x20&&\x20!(<Block>ast).isStatementBlock)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((nt\x20==\x20NodeType.FuncDecl)\x20&&\x20((<FuncDecl>ast).isMethod()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20parseStatementList(errorRecoverySet:\x20ErrorRecoverySet,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements:\x20ASTList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceElms:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20noLeadingCase:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements:\x20AllowedElements,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentModifiers:\x20Modifiers):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20directivePrologue\x20=\x20sourceElms;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.minChar\x20=\x20this.scanner.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20innerStmts\x20=\x20(allowedElements\x20&\x20AllowedElements.ModuleDeclarations)\x20==\x20AllowedElements.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classNope\x20=\x20(allowedElements\x20&\x20AllowedElements.ClassDeclarations)\x20==\x20AllowedElements.None;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorRecoverySet\x20|=\x20ErrorRecoverySet.TypeScriptS\x20|\x20ErrorRecoverySet.RCurly;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartStatementList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldStrictMode\x20=\x20this.strictMode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.currentToken.tokenId\x20==\x20TokenID.CloseBrace)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(noLeadingCase\x20&&\x20((this.currentToken.tokenId\x20==\x20TokenID.Case)\x20||\x20(this.currentToken.tokenId\x20==\x20TokenID.Default)))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(innerStmts\x20&&\x20(this.currentToken.tokenId\x20==\x20TokenID.Export))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(classNope\x20&&\x20(this.currentToken.tokenId\x20==\x20TokenID.Class))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.currentToken.tokenId\x20==\x20TokenID.EndOfFile))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.EndStmtList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.limChar\x20=\x20limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(statements.members.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.preComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.postComments\x20=\x20this.parseComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.strictMode\x20=\x20oldStrictMode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stmt\x20=\x20this.parseStatement(errorRecoverySet\x20&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(~(ErrorRecoverySet.Else\x20|\x20ErrorRecoverySet.RParen\x20|\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.Catch\x20|\x20ErrorRecoverySet.Colon)),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements,\x20parentModifiers);\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmt)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20stmt.postComments\x20=\x20this.combineComments(stmt.postComments,\x20this.parseCommentsForLine(this.scanner.prevLine));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.append(stmt);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20stmt.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(directivePrologue)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmt.nodeType\x20==\x20NodeType.QString)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20qstring\x20=\x20<StringLiteral>stmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(qstring.text\x20==\x20\x22\x5c\x22use\x20strict\x5c\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statements.flags\x20|=\x20ASTFlags.StrictMode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.strictMode\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20directivePrologue\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20directivePrologue\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20fname\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20quickParse(sourceText:\x20ISourceText,\x20filename:\x20string,\x20unitIndex:\x20number):\x20QuickParseResult\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//TODO:\x20REVIEW:\x20We\x20set\x20this\x20to\x20avoid\x20adding\x20a\x20\x22module\x22\x20decl\x20in\x20the\x20resulting\x20script\x20(see\x20parse()\x20method)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svGenTarget\x20=\x20TypeScript.moduleGenTarget;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.moduleGenTarget\x20=\x20TypeScript.ModuleGenTarget.Local;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20this.parse(sourceText,\x20filename,\x20unitIndex,\x20AllowedElements.QuickParse);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20QuickParseResult(script,\x20this.scanner.lexState);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20finally\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.moduleGenTarget\x20=\x20svGenTarget;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parse(sourceText:\x20ISourceText,\x20filename:\x20string,\x20unitIndex:\x20number,\x20allowedElements\x20=\x20AllowedElements.Global):\x20Script\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Reset\x20all\x20parser\x20state\x20here.\x20\x20This\x20allows\x20us\x20to\x20be\x20resilient\x20to\x20reentrancy\x20if\x20an\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20exception\x20is\x20thrown.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.fname\x20=\x20filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentUnitIndex\x20=\x20unitIndex;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.needTerminator\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFunction\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inInterfaceDecl\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inFncDecl\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartStatementList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientModule\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientClass\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.topLevel\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allowImportDeclaration\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevIDTok\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.statementInfoStack\x20=\x20new\x20IStatementInfo[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasTopLevelImportOrExport\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.strictMode\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevExpr\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentClassDefinition\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingClassConstructorDefinition\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingDeclareFile\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.amdDependencies\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inferPropertiesFromThisAssignment\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.requiresExtendsBlock\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanner.resetComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanner.setErrorHandler((message)\x20=>this.reportParseError(message));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanner.setSourceText(sourceText,\x20LexMode.File);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.scanner.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.scanner.rightCurlyCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.minChar\x20=\x20minChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.StartScript;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parsingDeclareFile\x20=\x20isDSTRFile(filename)\x20||\x20isDTSFile(filename);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(true)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseStatementList(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ErrorRecoverySet.EOF\x20|\x20ErrorRecoverySet.Func,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod,\x20/*sourceElements:*/\x20true,\x20/*noLeadingCase:*/\x20false,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allowedElements,\x20Modifiers.None);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentToken.tokenId\x20===\x20TokenID.EndOfFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Still\x20have\x20remaining\x20tokens\x20in\x20the\x20file.\x20\x20Report\x20error\x20for\x20this\x20unexpected\x20token,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20skip\x20it,\x20and\x20continue\x20trying\x20to\x20parse\x20statements\x20until\x20we\x27re\x20done.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20badToken\x20=\x20tokenTable[this.currentToken.tokenId];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportParseError(\x22Unexpected\x20statement\x20block\x20terminator\x20\x27\x22\x20+\x20badToken.text\x20+\x20\x22\x27\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x20this.scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.state\x20=\x20ParseState.EndScript;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.limChar\x20=\x20this.scanner.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20topLevelMod:\x20ModuleDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleGenTarget\x20!=\x20ModuleGenTarget.Local\x20&&\x20this.hasTopLevelImportOrExport)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20correctedFileName\x20=\x20switchToForwardSlashes(filename);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id:\x20Identifier\x20=\x20new\x20Identifier(correctedFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod\x20=\x20new\x20ModuleDeclaration(id,\x20bod,\x20this.topVarList(),\x20this.topScopeList(),\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.modFlags\x20|=\x20ModuleFlags.IsDynamic;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.modFlags\x20|=\x20ModuleFlags.IsWholeFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.modFlags\x20|=\x20ModuleFlags.Exported;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parsingDeclareFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.modFlags\x20|=\x20ModuleFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.prettyName\x20=\x20getPrettyName(correctedFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.containsUnicodeChar\x20=\x20this.scanner.seenUnicodeChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.containsUnicodeCharInComment\x20=\x20this.scanner.seenUnicodeCharInComment;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20topLevelMod.amdDependencies\x20=\x20this.amdDependencies;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.minChar\x20=\x20topLevelMod.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.limChar\x20=\x20topLevelMod.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod.append(topLevelMod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20new\x20Script(this.topVarList(),\x20this.topScopeList());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.bod\x20=\x20bod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.popDeclLists();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.minChar\x20=\x20minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.limChar\x20=\x20this.scanner.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.locationInfo\x20=\x20new\x20LocationInfo(filename,\x20this.scanner.lineMap,\x20unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.leftCurlyCount\x20=\x20this.scanner.leftCurlyCount\x20-\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.rightCurlyCount\x20=\x20this.scanner.rightCurlyCount\x20-\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.isDeclareFile\x20=\x20this.parsingDeclareFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.topLevelMod\x20=\x20topLevelMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.containsUnicodeChar\x20=\x20this.scanner.seenUnicodeChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.containsUnicodeCharInComment\x20=\x20this.scanner.seenUnicodeCharInComment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.requiresExtendsBlock\x20=\x20this.requiresExtendsBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20quickParse(logger:\x20TypeScript.ILogger,\x20scopeStartAST:\x20AST,\x20sourceText:\x20ISourceText,\x20minChar:\x20number,\x20limChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20errorCapture:\x20(minChar:\x20number,\x20charLen:\x20number,\x20message:\x20string,\x20unitIndex:\x20number)\x20=>\x20void\x20):\x20QuickParseResult\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20fragment\x20=\x20sourceText.getText(minChar,\x20limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20logger.log(\x22Quick\x20parse\x20range\x20(\x22\x20+\x20minChar\x20+\x20\x22,\x22\x20+\x20limChar\x20+\x20\x22):\x20\x5c\x22\x22\x20+\x20TypeScript.stringToLiteral(fragment,\x20100)\x20+\x20\x22\x5c\x22\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20quickParser\x20=\x20new\x20Parser();\x0a\x20\x20\x20\x20\x20\x20\x20\x20quickParser.setErrorRecovery(null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20quickParser.errorCallback\x20=\x20errorCapture;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20use\x20enclosing\x20scope\x20to\x20determine\x20this\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Why\x20even\x20use\x20class\x20here?\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20quickClassDecl\x20=\x20new\x20ClassDeclaration(null,\x20null,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20quickParser.currentClassDecl\x20=\x20quickClassDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20quickParser.quickParse(new\x20StringSourceText(fragment),\x20\x22\x22,\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20//\x20We\x20need\x20to\x20catch\x20both\x20left\x20and\x20right\x20quotes\x0a\x20\x20\x20\x20//\x20(depending\x20on\x20your\x20editor\x27s\x20font,\x20this\x20may\x20not\x20be\x20clear...)\x20\x20\x20\x20\x0a\x20\x20\x20\x20export\x20function\x20stripQuotes(str:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20str.replace(\x22\x5c\x22\x22,\x20\x22\x22).replace(\x22\x27\x22,\x20\x22\x22).replace(\x22\x27\x22,\x20\x22\x22).replace(\x22\x5c\x22\x22,\x20\x22\x22)\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isQuoted(str:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20str.indexOf(\x22\x5c\x22\x22)\x20!=\x20-1\x20||\x20str.indexOf(\x22\x27\x22)\x20!=\x20-1\x20||\x20str.indexOf(\x22\x27\x22)\x20!=\x20-1\x20||\x20str.indexOf(\x22\x5c\x22\x22)\x20!=\x20-1;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20quoteStr(str:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22\x5c\x22\x22\x20+\x20str\x20+\x20\x22\x5c\x22\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20swapQuotes(str:\x20string)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(str.indexOf(\x22\x5c\x22\x22)\x20!=\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20str\x20=\x20str.replace(\x22\x5c\x22\x22,\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20str\x20=\x20str.replace(\x22\x5c\x22\x22,\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20str\x20=\x20str.replace(\x22\x27\x22,\x20\x22\x5c\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20str\x20=\x20str.replace(\x22\x27\x22,\x20\x22\x5c\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20str;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20switchToForwardSlashes(path:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20path.replace(/\x5c\x5c/g,\x20\x22/\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20trimModName(modName:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20case\x27s\x20it\x27s\x20a\x20declare\x20file...\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modName.length\x20>\x206\x20&&\x20modName.substring(modName.length\x20-\x206,\x20modName.length)\x20==\x20\x22.d.str\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName.substring(0,\x20modName.length\x20-\x206);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modName.length\x20>\x204\x20&&\x20modName.substring(modName.length\x20-\x204,\x20modName.length)\x20==\x20\x22.str\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName.substring(0,\x20modName.length\x20-\x204);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modName.length\x20>\x205\x20&&\x20modName.substring(modName.length\x20-\x205,\x20modName.length)\x20==\x20\x22.d.ts\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName.substring(0,\x20modName.length\x20-\x205);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modName.length\x20>\x203\x20&&\x20modName.substring(modName.length\x20-\x203,\x20modName.length)\x20==\x20\x22.ts\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName.substring(0,\x20modName.length\x20-\x203);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20case\x27s\x20it\x27s\x20a\x20.js\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modName.length\x20>\x203\x20&&\x20modName.substring(modName.length\x20-\x203,\x20modName.length)\x20==\x20\x22.js\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName.substring(0,\x20modName.length\x20-\x203);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20modName;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getDeclareFilePath(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isSTRFile(fname)\x20?\x20changePathToDSTR(fname)\x20:\x20isTSFile(fname)\x20?\x20changePathToDTS(fname)\x20:\x20changePathToDTS(fname);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20isFileOfExtension(fname:\x20string,\x20ext:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20invariantFname\x20=\x20fname.toLocaleUpperCase();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20invariantExt\x20=\x20ext.toLocaleUpperCase();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20extLength\x20=\x20invariantExt.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20invariantFname.length\x20>\x20extLength\x20&&\x20invariantFname.substring(invariantFname.length\x20-\x20extLength,\x20invariantFname.length)\x20==\x20invariantExt;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isJSFile(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isFileOfExtension(fname,\x20\x22.js\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isSTRFile(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isFileOfExtension(fname,\x20\x22.str\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isTSFile(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isFileOfExtension(fname,\x20\x22.ts\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isDSTRFile(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isFileOfExtension(fname,\x20\x22.d.str\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isDTSFile(fname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20isFileOfExtension(fname,\x20\x22.d.ts\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getPrettyName(modPath:\x20string,\x20quote?=true,\x20treatAsFileName?=false)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20treatAsFileName\x20?\x20switchToForwardSlashes(modPath)\x20:\x20trimModName(stripQuotes(modPath));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20components\x20=\x20this.getPathComponents(modName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20components.length\x20?\x20(quote\x20?\x20quoteStr(components[components.length\x20-\x201])\x20:\x20components[components.length\x20-\x201])\x20:\x20modPath;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getPathComponents(path:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20path.split(\x22/\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getRelativePathToFixedPath(fixedModFilePath:\x20string,\x20absoluteModPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20absoluteModPath\x20=\x20switchToForwardSlashes(absoluteModPath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modComponents\x20=\x20this.getPathComponents(absoluteModPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20fixedModComponents\x20=\x20this.getPathComponents(fixedModFilePath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Find\x20the\x20component\x20that\x20differs\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20joinStartIndex\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20joinStartIndex\x20<\x20modComponents.length\x20&&\x20joinStartIndex\x20<\x20fixedModComponents.length\x20;\x20joinStartIndex++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fixedModComponents[joinStartIndex]\x20!=\x20modComponents[joinStartIndex])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Get\x20the\x20relative\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(joinStartIndex\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20relativePath\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20relativePathComponents\x20=\x20modComponents.slice(joinStartIndex,\x20modComponents.length);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20joinStartIndex\x20<\x20fixedModComponents.length;\x20joinStartIndex++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fixedModComponents[joinStartIndex]\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20relativePath\x20=\x20relativePath\x20+\x20\x22../\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20relativePath\x20+\x20relativePathComponents.join(\x22/\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20absoluteModPath;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20quoteBaseName(modPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20trimModName(stripQuotes(modPath));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20getRootFilePath(modName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(path\x20==\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20modPath;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20components\x20=\x20modName.split(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fileIndex\x20=\x20components.length\x20>\x201\x20?\x201\x20:\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20quoteStr(components[fileIndex]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20changePathToSTR(modPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20trimModName(stripQuotes(modPath))\x20+\x20\x22.str\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20changePathToDSTR(modPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20trimModName(stripQuotes(modPath))\x20+\x20\x22.d.str\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20changePathToTS(modPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20trimModName(stripQuotes(modPath))\x20+\x20\x22.ts\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20changePathToDTS(modPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20trimModName(stripQuotes(modPath))\x20+\x20\x22.d.ts\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20isRelative(path:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20path.charAt(0)\x20==\x20\x22.\x22;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20export\x20function\x20isRooted(path:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20path.charAt(0)\x20==\x20\x22\x5c\x5c\x22\x20||\x20path.charAt(0)\x20==\x20\x22/\x22\x20||\x20(path.indexOf(\x22:\x5c\x5c\x22)\x20!=\x20-1)\x20||\x20(path.indexOf(\x22:/\x22)\x20!=\x20-1);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getRootFilePath(outFname:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(outFname\x20==\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20outFname;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPath\x20=\x20outFname.indexOf(\x22/\x22)\x20!=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20isPath\x20?\x20filePath(outFname)\x20:\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20filePathComponents(fullPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20fullPath\x20=\x20switchToForwardSlashes(fullPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20components\x20=\x20getPathComponents(fullPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20components.slice(0,\x20components.length\x20-\x201);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20filePath(fullPath:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20filePathComponents(fullPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20path.join(\x22/\x22)\x20+\x20\x22/\x22;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20normalizeURL(url:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20hostDomainAndPortRegex\x20=\x20/^(https?:\x5c/\x5c/[\x5c-\x5cw\x5c.]+(:\x5cd+)?\x5c/)(.*)$/i;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20matches\x20=\x20hostDomainAndPortRegex.exec(url);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(matches)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hostDomainAndPort\x20=\x20matches[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20actualPath\x20=\x20matches[3];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hostDomainAndPort\x20+\x20normalizePath(actualPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20normalizePath(url);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20pathNormalizeRegExp\x20=\x20/\x5c//g;\x0a\x0a\x20\x20\x20\x20export\x20function\x20normalizePath(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20path\x20=\x20switchToForwardSlashes(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20startedWithSep\x20=\x20path.charAt(0)\x20===\x20\x22/\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20parts\x20=\x20this.getPathComponents(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20parts.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parts[i]\x20===\x20\x22.\x22\x20||\x20parts[i]\x20===\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parts.splice(i,\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20>\x200\x20&&\x20parts[i]\x20===\x20\x22..\x22\x20&&\x20parts[i\x20-\x201]\x20!==\x20\x22..\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parts.splice(i\x20-\x201,\x202);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i\x20-=\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20(startedWithSep\x20?\x20\x22/\x22\x20:\x20\x22\x22)\x20+\x20parts.join(\x22/\x22);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20normalizeImportPath(path:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20normalizePath(path);\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20///\x20Compiler\x20settings\x0a\x0a\x20\x20\x20\x20export\x20class\x20StyleSettings\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20bitwise\x20operations\x20not\x20permitted\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bitwise\x20=\x20false;\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20disallow\x20non-block\x20statements\x20as\x20bodies\x20of\x20compound\x20statements\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20blockInCompoundStmt\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20disallow\x20==\x20and\x20!=\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20eqeqeq\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20require\x20body\x20of\x20for\x20in\x20loop\x20to\x20start\x20with\x20a\x20filter\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20forin\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20empty\x20blocks\x20permitted\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emptyBlocks\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20require\x20result\x20of\x20new\x20expression\x20to\x20be\x20used\x20(no\x20new\x20just\x20for\x20side-effects)\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20newMustBeUsed\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20require\x20semicolons\x20to\x20terminate\x20statements\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20requireSemi\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20top-level\x20assignment\x20in\x20conditionals\x20if\x20(a=b)\x20{\x20...\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20assignmentInCond\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20==\x20null\x20or\x20!=\x20null\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20eqnull\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20permit\x20eval\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20evalOK\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20permit\x20var\x20use\x20if\x20decl\x20in\x20inner\x20scope\x20as\x20in\x20if\x20(c)\x20{\x20var\x20v=10;\x20}\x20v=11;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20innerScopeDeclEscape\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20permit\x20functions\x20in\x20loops\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20funcInLoop\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20permit\x20re-declaration\x20of\x20local\x20variable\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reDeclareLocal\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20permit\x20obj[\x27x\x27]\x20in\x20addition\x20to\x20obj.x\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20literalSubscript\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20flag\x20implicit\x20\x27any\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20implicitAny\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setOption(opt:\x20string,\x20val:\x20bool):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20optExists\x20=\x20this[opt];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(optExists\x20!==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this[opt]\x20=\x20val;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseOptions(str:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20opts=str.split(\x22;\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20opts.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20opt\x20=\x20opts[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20val\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20colonIndex=opt.lastIndexOf(\x22:\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(colonIndex\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20valStr\x20=\x20opt.substring(colonIndex+1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20opt\x20=\x20opt.substring(0,\x20colonIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(valStr\x20==\x20\x22off\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20val\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.setOption(opt,\x20val))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20export\x20class\x20CompilationSettings\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20styleSettings\x20=\x20new\x20StyleSettings();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20propagateConstants\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20minWhitespace\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseOnly\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorRecovery\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitComments\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20watch\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20exec\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolve\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20controlFlow\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printControlFlow\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20controlFlowUseDef\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorOnWith\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20preprocess\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20canCallDefinitionSignature\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inferPropertiesFromThisAssignment\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useDefaultLib\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20codeGenTarget\x20=\x20CodeGenTarget.ES3;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20moduleGenTarget\x20=\x20ModuleGenTarget.Synchronous;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20--out\x20option\x20passed.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Default\x20is\x20the\x20\x22\x22\x20which\x20leads\x20to\x20multiple\x20files\x20generated\x20next\x20to\x20the.ts\x20files\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20outputOption:\x20string\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mapSourceFiles\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20generateDeclarationFiles\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useCaseSensitiveFileResolution\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setStyleOptions(str:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.styleSettings.parseOptions(str);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20///\x20Preprocessing\x0a\x20\x20\x20\x20///\x0a\x20\x20\x20\x20export\x20interface\x20IPreProcessedFileInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20settings:\x20CompilationSettings;\x0a\x20\x20\x20\x20\x20\x20\x20\x20referencedFiles:\x20IFileReference[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20importedFiles:\x20IFileReference[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20isLibFile:\x20bool;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20getFileReferenceFromReferencePath(comment:\x20string):\x20IFileReference\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20referencesRegEx\x20=\x20/^(\x5c/\x5c/\x5c/\x5cs*<reference\x5cs+path=)(\x27|\x22)(.+?)\x5c2\x5cs*(static=(\x27|\x22)(.+?)\x5c2\x5cs*)*\x5c/>/gim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20match\x20=\x20referencesRegEx.exec(comment);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(match)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path:\x20string\x20=\x20normalizePath(match[3]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20adjustedPath\x20=\x20normalizePath(path);\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isResident\x20=\x20match.length\x20>=\x207\x20&&\x20match[6]\x20==\x20\x22true\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isResident)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(path\x20+\x20\x22\x20is\x20resident\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20minChar:\x200,\x20limChar:\x200,\x20path:\x20switchToForwardSlashes(adjustedPath),\x20isResident:\x20isResident\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20used\x20in\x20the\x20parser,\x20but\x20kept\x20here\x20in\x20case\x20we\x20want\x20to\x20reintegrate\x20it\x20with\x20preprocessing\x0a\x20\x20\x20\x20export\x20function\x20getAdditionalDependencyPath(comment:\x20string):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20amdDependencyRegEx\x20=\x20/^(\x5c/\x5c/\x5c/\x5cs*<amd-dependency\x5cs+path=)(\x27|\x22)(.+?)\x5c2\x5cs*(static=(\x27|\x22)(.+?)\x5c2\x5cs*)*\x5c/>/gim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20match\x20=\x20amdDependencyRegEx.exec(comment);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(match)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path:\x20string\x20=\x20match[3];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getImplicitImport(comment:\x20string):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20implicitImportRegEx\x20=\x20/^(\x5c/\x5c/\x5c/\x5cs*<implicit-import\x5cs*)*\x5c/>/gim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20match\x20=\x20implicitImportRegEx.exec(comment);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(match)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getStyleSettings(comment:\x20string,\x20styleSettings:\x20StyleSettings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20styleRegEx\x20=\x20/^(\x5c/\x5c/\x5c/\x5cs*<style\x5cs+)(([a-zA-Z])+=(\x27|\x22).+(\x27|\x22))\x5cs*\x5c/>/gim;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20settings\x20=\x20styleRegEx.exec(comment);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(settings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20settingsRegEx\x20=\x20/^([a-zA-Z]+=[\x27\x22]on[\x27|\x22])/gim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20settings\x20=\x20settingsRegEx.exec(settings[2]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(settings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20settings.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20setting\x20=\x20(<string>settings[i]).split(\x22=\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20on\x20=\x20\x22\x5c\x22on\x5c\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(setting[0])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22blockInCompoundStmt\x22:\x20styleSettings.blockInCompoundStmt\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22eqeqeq\x22:\x20styleSettings.eqeqeq\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22forin\x22:\x20styleSettings.forin\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22emptyBlocks\x22:\x20styleSettings.emptyBlocks\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22newMustBeUsed\x22:\x20styleSettings.newMustBeUsed\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22requireSemi\x22:\x20styleSettings.requireSemi\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22assignmentInCond\x22:\x20styleSettings.assignmentInCond\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22eqnull\x22:\x20styleSettings.eqnull\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22evalOK\x22:\x20styleSettings.evalOK\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22innerScopeDeclEscape\x22:\x20styleSettings.innerScopeDeclEscape\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22funcInLoop\x22:\x20styleSettings.funcInLoop\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22reDeclareLocal\x22:\x20styleSettings.reDeclareLocal\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22literalSubscript\x22:\x20styleSettings.literalSubscript\x20=\x20setting[1]\x20==\x20on;\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20\x22implicitAny\x22:\x20styleSettings.implicitAny\x20=\x20setting[1]\x20==\x20on;\x20break;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getReferencedFiles(sourceText:\x20ISourceText):\x20IFileReference[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20preProcessInfo\x20=\x20preProcessFile(sourceText,\x20null,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20preProcessInfo.referencedFiles;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preProcessFile(sourceText:\x20ISourceText,\x20options=new\x20CompilationSettings(),\x20readImportFiles?\x20=\x20true):\x20IPreProcessedFileInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scanner\x20=\x20new\x20Scanner();\x0a\x20\x20\x20\x20\x20\x20\x20\x20scanner.resetComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20scanner.setSourceText(sourceText,\x20LexMode.File);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20tok:\x20Token\x20=\x20scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments:\x20CommentToken[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20comment:\x20CommentToken\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlies:\x20Token[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20settings:\x20CompilationSettings\x20=\x20options;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20referencedFiles:\x20IFileReference[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20importedFiles:\x20IFileReference[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isLibFile:\x20bool\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20only\x20search\x20out\x20dynamic\x20mods\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20you\x20find\x20a\x20dynamic\x20mod,\x20ignore\x20every\x20other\x20mod\x20inside,\x20until\x20you\x20balance\x20rcurlies\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(tok.tokenId\x20!=\x20TokenID.EndOfFile)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(readImportFiles\x20&&\x20tok.tokenId\x20==\x20TokenID.Import)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.Identifier\x20||\x20convertTokToID(tok,\x20false))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.Equals)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.Module)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.OpenParen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20import\x20foo\x20=\x20module(\x22foo\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.StringLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ref\x20=\x20{\x20minChar:\x20scanner.startPos,\x20limChar:\x20scanner.pos,\x20path:\x20stripQuotes(switchToForwardSlashes(tok.getText())),\x20isResident:\x20false\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importedFiles.push(ref);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftCurlies.push(tok);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftCurlies.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tok\x20=\x20scanner.scan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20deal\x20with\x20comment\x20references,\x20amd\x20dependencies\x20and\x20style\x20settings\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x20could\x20potentially\x20do\x20this\x20inline\x20with\x20the\x20above,\x20if\x20we\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20Scanner::scanComments\x20to\x20\x27true\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20scanner.getComments();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iComment\x20=\x200;\x20iComment\x20<\x20comments.length;\x20iComment++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comment\x20=\x20comments[iComment];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!comment.isBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20referencedCode\x20=\x20getFileReferenceFromReferencePath(comment.getText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(referencedCode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20referencedCode.minChar\x20=\x20comment.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20referencedCode.limChar\x20=\x20referencedCode.minChar\x20+\x20comment.value.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20referencedFiles.push(referencedCode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(settings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getStyleSettings(comment.getText(),\x20settings.styleSettings);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20is\x20it\x20a\x20lib\x20file?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isNoLibRegex\x20=\x20/^(\x5c/\x5c/\x5c/\x5cs*<reference\x5cs+no-default-lib=)(\x27|\x22)(.+?)\x5c2\x5cs*\x5c/>/gim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isNoLibMatch:\x20any\x20=\x20isNoLibRegex.exec(comment.getText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNoLibMatch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isLibFile\x20=\x20(isNoLibMatch[3]\x20==\x20\x22true\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20settings:\x20settings,\x20referencedFiles:\x20referencedFiles,\x20importedFiles:\x20importedFiles,\x20isLibFile:\x20isLibFile\x20};\x0a\x20\x20\x20\x20}\x0a\x0a}\x20//\x20Tools//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20//\x20TODO:\x20refactor\x20indent\x20logic\x20for\x20use\x20in\x20emit\x0a\x20\x20\x20\x20export\x20class\x20PrintContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20builder\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indent1\x20=\x20\x22\x20\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indentStrings:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20indentAmt\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20outfile:\x20ITextWriter,\x20public\x20parser:\x20Parser)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20increaseIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indentAmt++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20decreaseIndent()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indentAmt--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startLine()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.builder.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.Alert(this.builder);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20indentString\x20=\x20this.indentStrings[this.indentAmt];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indentString\x20===\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indentString\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.indentAmt;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indentString\x20+=\x20this.indent1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.indentStrings[this.indentAmt]\x20=\x20indentString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.builder\x20+=\x20indentString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20write(s)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.builder\x20+=\x20s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeLine(s)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.builder\x20+=\x20s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.outfile.WriteLine(this.builder);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.builder\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20prePrintAST(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pc:\x20PrintContext\x20=\x20<PrintContext>walker.state;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20ast.print(pc);\x0a\x20\x20\x20\x20\x20\x20\x20\x20pc.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20export\x20function\x20postPrintAST(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20pc:\x20PrintContext\x20=\x20<PrintContext>walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20pc.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IResolvedFile\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20content:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20path:\x20string;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x20This\x20class\x20acts\x20as\x20a\x20convenience\x20class\x20to\x20store\x20path\x20and\x20content\x20information\x20in\x20places\x0a\x20\x20\x20\x20///\x20where\x20we\x20need\x20an\x20ISourceText\x20object\x0a\x20\x20\x20\x20export\x20class\x20SourceUnit\x20implements\x20ISourceText,\x20IResolvedFile\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20referencedFiles:\x20IFileReference[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20path:\x20string,\x20public\x20content:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText(start:\x20number,\x20end:\x20number):\x20string\x20{\x20return\x20this.content.substring(start,\x20end);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getLength():\x20number\x20{\x20return\x20this.content.length;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IFileReference\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20minChar:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20limChar:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20path:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20isResident:\x20bool;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x20Limited\x20API\x20for\x20file\x20system\x20manipulation\x0a\x20\x20\x20\x20export\x20interface\x20IFileSystemObject\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolvePath(path:\x20string):\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20readFile(path:\x20string):\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20findFile(rootPath:\x20string,\x20partialFilePath:\x20string):\x20IResolvedFile;\x0a\x20\x20\x20\x20\x20\x20\x20\x20dirName(path:\x20string):\x20string;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20CompilationEnvironment\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20compilationSettings:\x20CompilationSettings,\x20public\x20ioHost:\x20IFileSystemObject)\x20{\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentCode:\x20SourceUnit[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20code:\x20SourceUnit[]\x20=\x20[];\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IResolutionDispatcher\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20postResolutionError(errorFile:\x20string,\x20errorMessage:\x20string,\x20errorObject:\x20any):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20postResolution(path:\x20string,\x20source:\x20ISourceText):\x20void;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ICodeResolver\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolveCode(referencePath:\x20string,\x20rootPath:\x20string,\x20performSearch:bool,\x20state:\x20IResolutionDispatcher):\x20void;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IResolverHost\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolveCompilationEnvironment(preEnvironment:\x20CompilationEnvironment,\x20resolver:\x20ICodeResolver,\x20traceDependencies:\x20bool):\x20CompilationEnvironment;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20CodeResolver\x20implements\x20TypeScript.ICodeResolver\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20visited:\x20any\x20=\x20{\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20environment:\x20CompilationEnvironment)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveCode(referencePath:\x20string,\x20parentPath:\x20string,\x20performSearch:\x20bool,\x20resolutionDispatcher:\x20TypeScript.IResolutionDispatcher):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolvedFile:\x20IResolvedFile\x20=\x20{\x20content:\x20null,\x20path:\x20referencePath\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ioHost\x20=\x20this.environment.ioHost;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20path\x20is\x20relative,\x20normalize\x20it,\x20based\x20on\x20the\x20root\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isRelativePath\x20=\x20TypeScript.isRelative(referencePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isRootedPath\x20=\x20isRelativePath\x20?\x20false\x20:\x20isRooted(referencePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20normalizedPath:\x20string\x20=\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isRelativePath\x20?\x20ioHost.resolvePath(parentPath\x20+\x20\x22/\x22\x20+\x20referencePath)\x20:\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20we\x20only\x20follow\x20the\x20second\x20clause\x20if\x20the\x20path\x20is\x20a\x20non-rooted\x20triple-slash\x20reference\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(isRootedPath\x20||\x20!parentPath\x20||\x20performSearch\x20?\x20referencePath\x20:\x20parentPath\x20+\x20\x22/\x22\x20+\x20referencePath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20use\x20+=.ts\x20to\x20make\x20sure\x20we\x20don\x27t\x20accidentally\x20pick\x20up\x20\x22.js\x22\x20files\x20or\x20the\x20like\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isSTRFile(normalizedPath)\x20&&\x20!isTSFile(normalizedPath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20+=\x20\x22.ts\x22;\x20\x20//changePathToSTR(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20switchToForwardSlashes(stripQuotes(normalizedPath));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20absoluteModuleID\x20=\x20this.environment.compilationSettings.useCaseSensitiveFileResolution\x20?\x20normalizedPath\x20:\x20normalizedPath.toLocaleUpperCase();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20read\x20the\x20file\x20contents\x20-\x20if\x20it\x20doesn\x27t\x20exist,\x20trigger\x20a\x20resolution\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.visited[absoluteModuleID])\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20path\x20is\x20relative,\x20or\x20came\x20from\x20a\x20reference\x20tag,\x20we\x20don\x27t\x20perform\x20a\x20search\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isRelativePath\x20||\x20isRootedPath\x20||\x20!performSearch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Reading\x20code\x20from\x20\x22\x20+\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Look\x20for\x20the\x20.ts\x20file\x20first\x20-\x20if\x20not\x20present,\x20use\x20the\x20.ts,\x20the\x20.d.str\x20and\x20the\x20.d.ts\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.content\x20=\x20ioHost.readFile(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSTRFile(normalizedPath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToTS(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isTSFile(normalizedPath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToSTR(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Reading\x20code\x20from\x20\x22\x20+\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.content\x20=\x20ioHost.readFile(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToDSTR(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Reading\x20code\x20from\x20\x22\x20+\x20normalizedPath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.content\x20=\x20ioHost.readFile(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToDTS(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Reading\x20code\x20from\x20\x22\x20+\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.content\x20=\x20ioHost.readFile(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Found\x20code\x20at\x20\x22\x20+\x20normalizedPath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.path\x20=\x20normalizedPath;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.visited[absoluteModuleID]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22\x20\x20\x20Did\x20not\x20find\x20code\x20for\x20\x22\x20+\x20referencePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20path\x20is\x20non-relative,\x20we\x20should\x20attempt\x20to\x20search\x20on\x20the\x20relative\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile\x20=\x20ioHost.findFile(parentPath,\x20normalizedPath);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!resolvedFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSTRFile(normalizedPath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToTS(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isTSFile(normalizedPath))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToSTR(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile\x20=\x20ioHost.findFile(parentPath,\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!resolvedFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToDTS(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile\x20=\x20ioHost.findFile(parentPath,\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!resolvedFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20changePathToDSTR(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile\x20=\x20ioHost.findFile(parentPath,\x20normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resolvedFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.path\x20=\x20switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(referencePath\x20+\x20\x22\x20resolved\x20to:\x20\x22\x20+\x20resolvedFile.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFile.content\x20=\x20resolvedFile.content;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.visited[absoluteModuleID]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.debugPrint(\x22Could\x20not\x20find\x20\x22\x20+\x20referencePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resolvedFile\x20&&\x20resolvedFile.content\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20preprocess\x20the\x20file,\x20to\x20gather\x20dependencies\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rootDir\x20=\x20ioHost.dirName(resolvedFile.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceUnit\x20=\x20new\x20SourceUnit(resolvedFile.path,\x20resolvedFile.content);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preProcessedFileInfo\x20=\x20preProcessFile(sourceUnit,\x20this.environment.compilationSettings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceUnit.referencedFiles\x20=\x20preProcessedFileInfo.referencedFiles;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20resolve\x20explicit\x20references\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20preProcessedFileInfo.referencedFiles.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20referencedFile\x20=\x20preProcessedFileInfo.referencedFiles[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20normalizedPath\x20=\x20isRooted(referencedFile.path)\x20?\x20referencedFile.path\x20:\x20rootDir\x20+\x20\x22/\x22\x20+\x20referencedFile.path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20normalizedPath\x20=\x20ioHost.resolvePath(normalizedPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(referencePath\x20==\x20normalizedPath)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolutionDispatcher.postResolutionError(normalizedPath,\x20\x22File\x20contains\x20reference\x20to\x20itself\x22,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveCode(referencedFile.path,\x20rootDir,\x20false,\x20resolutionDispatcher);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20resolve\x20imports\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20preProcessedFileInfo.importedFiles.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveCode(preProcessedFileInfo.importedFiles[i].path,\x20rootDir,\x20true,\x20resolutionDispatcher);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20add\x20the\x20file\x20to\x20the\x20appropriate\x20code\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolutionDispatcher.postResolution(sourceUnit.path,\x20sourceUnit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexEOF\x20=\x20(-1);\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexCodeNWL\x20=\x200x0A;\x0a\x20\x20\x20\x20export\x20var\x20LexCodeRET\x20=\x200x0D;\x0a\x20\x20\x20\x20export\x20var\x20LexCodeLS\x20=\x20\x200x2028;\x0a\x20\x20\x20\x20export\x20var\x20LexCodePS\x20=\x20\x200x2029;\x0a\x20\x20\x20\x20export\x20var\x20LexCodeTAB\x20=\x200x09;\x0a\x20\x20\x20\x20export\x20var\x20LexCodeVTAB\x20=\x200x0B;\x0a\x20\x20\x20\x20export\x20var\x20LexCode_e\x20=\x20\x27e\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_E\x20=\x20\x27E\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_x\x20=\x20\x27x\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_X\x20=\x20\x27X\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_a\x20=\x20\x27a\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_A\x20=\x20\x27A\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_f\x20=\x20\x27f\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_F\x20=\x20\x27F\x27.charCodeAt(0);\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexCode_g\x20=\x20\x27g\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_m\x20=\x20\x27m\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_i\x20=\x20\x27i\x27.charCodeAt(0);\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexCode_u\x20=\x20\x27u\x27.charCodeAt(0);\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexCode_0\x20=\x20\x270\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_9\x20=\x20\x279\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_8\x20=\x20\x278\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCode_7\x20=\x20\x277\x27.charCodeAt(0);\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexCodeBSL\x20=\x20\x27\x5c\x5c\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeSHP\x20=\x20\x27#\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeBNG\x20=\x20\x27!\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeQUO\x20=\x20\x27\x22\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeAPO\x20=\x20\x27\x5c\x27\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodePCT\x20=\x20\x27%\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeAMP\x20=\x20\x27&\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeLPR\x20=\x20\x27(\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeRPR\x20=\x20\x27)\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodePLS\x20=\x20\x27+\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeMIN\x20=\x20\x27-\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeMUL\x20=\x20\x27*\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeSLH\x20=\x20\x27/\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeXOR\x20=\x20\x27^\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeCMA\x20=\x20\x27,\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeDOT\x20=\x20\x27.\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeLT\x20=\x20\x27<\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeEQ\x20=\x20\x27=\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeGT\x20=\x20\x27>\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeQUE\x20=\x20\x27?\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeLBR\x20=\x20\x27[\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeRBR\x20=\x20\x27]\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeUSC\x20=\x20\x27_\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeLC\x20=\x20\x27{\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeRC\x20=\x20\x27}\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeBAR\x20=\x20\x27|\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeTIL\x20=\x20\x27~\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeCOL\x20=\x20\x27:\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeSMC\x20=\x20\x27;\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeUnderscore\x20=\x20\x27_\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeDollar\x20=\x20\x27$\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeSpace\x20=\x2032;\x0a\x20\x20\x20\x20export\x20var\x20LexCodeAtSign\x20=\x20\x27@\x27.charCodeAt(0);\x0a\x20\x20\x20\x20export\x20var\x20LexCodeASCIIChars\x20=\x20128;\x0a\x0a\x20\x20\x20\x20export\x20var\x20LexKeywordTable\x20=\x20undefined;\x0a\x20\x20\x20\x20//\x20TODO:\x20use\x20new\x20Token[128];\x0a\x20\x20\x20\x20var\x20autoToken:\x20Token[]\x20=\x20new\x20Array(LexCodeASCIIChars);\x0a\x20\x20\x20\x20var\x20lexIdStartTable:\x20bool[]\x20=\x20new\x20Array(LexCodeASCIIChars);\x0a\x0a\x20\x20\x20\x20//\x20Unicode\x20range\x20maps\x0a\x20\x20\x20\x20//\x20REVIEW:\x20These\x20range\x20maps\x20have\x20been\x20extracted\x20from\x20the\x20Unicode\x20specifications,\x20they\x20might\x20be\x20missing\x20values,\x20and/or\x20include\x20\x0a\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20incorrect\x20ranges.\x20but\x20for\x20the\x20most\x20they\x20seem\x20to\x20be\x20correct.\x20A\x20more\x20accurate\x20and\x20thorough\x20review\x20is\x20needed.\x0a\x0a\x20\x20\x20\x20/*\x0a\x20\x20\x20\x20\x20\x20\x20\x20As\x20per\x20ECMAScript\x20Language\x20Specification\x203th\x20Edition,\x20Section\x207.6:\x20Identifiers\x0a\x20\x20\x20\x20\x20\x20\x20\x20IdentifierStart\x20::\x20Can\x20contain\x20Unicode\x203.0.0\x20\x20categories\x20Uppercase\x20letter\x20(Lu),\x20Lowercase\x20letter\x20(Ll),\x20Titlecase\x20letter\x20(Lt),\x20Modifier\x20letter\x20(Lm),\x20Other\x20letter\x20(Lo),\x20or\x20Letter\x20number\x20(Nl).\x0a\x20\x20\x20\x20\x20\x20\x20\x20IdentifierPart\x20::\x20Can\x20contain\x20IdentifierStart\x20+\x20Unicode\x203.0.0\x20\x20categories\x20Non-spacing\x20mark\x20(Mn),\x20Combining\x20spacing\x20mark\x20(Mc),\x20Decimal\x20number\x20(Nd),\x20or\x20Connector\x20punctuation\x20(Pc).\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20Codepoint\x20ranges\x20for\x20ES3\x20Identifiers\x20are\x20extracted\x20from\x20the\x20Unicode\x203.0.0\x20specification\x20at:\x0a\x20\x20\x20\x20\x20\x20\x20\x20http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\x0a\x20\x20\x20\x20*/\x0a\x20\x20\x20\x20var\x20unicodeES3IdStart\x20=\x20[\x0a\x09\x09170,\x20170,181,\x20181,186,\x20186,192,\x20214,216,\x20246,248,\x20543,546,\x20563,592,\x20685,688,\x20696,699,\x20705,720,\x20721,736,\x20740,750,\x20750,890,\x20890,902,\x20902,904,\x20906,908,\x20908,910,\x20929,931,\x20974,976,\x20983,986,\x201011,1024,\x201153,1164,\x201220,1223,\x201224,1227,\x201228,1232,\x201269,1272,\x201273,1329,\x201366,1369,\x201369,1377,\x201415,1488,\x201514,\x0a\x09\x091520,\x201522,1569,\x201594,1600,\x201610,1649,\x201747,1749,\x201749,1765,\x201766,1786,\x201788,1808,\x201808,1810,\x201836,1920,\x201957,2309,\x202361,2365,\x202365,2384,\x202384,2392,\x202401,2437,\x202444,2447,\x202448,2451,\x202472,2474,\x202480,2482,\x202482,2486,\x202489,2524,\x202525,2527,\x202529,2544,\x202545,2565,\x202570,2575,\x202576,2579,\x202600,2602,\x202608,2610,\x202611,\x0a\x09\x092613,\x202614,2616,\x202617,2649,\x202652,2654,\x202654,2674,\x202676,2693,\x202699,2701,\x202701,2703,\x202705,2707,\x202728,2730,\x202736,2738,\x202739,2741,\x202745,2749,\x202749,2768,\x202768,2784,\x202784,2821,\x202828,2831,\x202832,2835,\x202856,2858,\x202864,2866,\x202867,2870,\x202873,2877,\x202877,2908,\x202909,2911,\x202913,2949,\x202954,2958,\x202960,2962,\x202965,2969,\x202970,\x0a\x09\x092972,\x202972,2974,\x202975,2979,\x202980,2984,\x202986,2990,\x202997,2999,\x203001,3077,\x203084,3086,\x203088,3090,\x203112,3114,\x203123,3125,\x203129,3168,\x203169,3205,\x203212,3214,\x203216,3218,\x203240,3242,\x203251,3253,\x203257,3294,\x203294,3296,\x203297,3333,\x203340,3342,\x203344,3346,\x203368,3370,\x203385,3424,\x203425,3461,\x203478,3482,\x203505,3507,\x203515,3517,\x203517,\x0a\x09\x093520,\x203526,3585,\x203632,3634,\x203635,3648,\x203654,3713,\x203714,3716,\x203716,3719,\x203720,3722,\x203722,3725,\x203725,3732,\x203735,3737,\x203743,3745,\x203747,3749,\x203749,3751,\x203751,3754,\x203755,3757,\x203760,3762,\x203763,3773,\x203773,3776,\x203780,3782,\x203782,3804,\x203805,3840,\x203840,3904,\x203911,3913,\x203946,3976,\x203979,4096,\x204129,4131,\x204135,4137,\x204138,\x0a\x09\x094176,\x204181,4256,\x204293,4304,\x204342,4352,\x204441,4447,\x204514,4520,\x204601,4608,\x204614,4616,\x204678,4680,\x204680,4682,\x204685,4688,\x204694,4696,\x204696,4698,\x204701,4704,\x204742,4744,\x204744,4746,\x204749,4752,\x204782,4784,\x204784,4786,\x204789,4792,\x204798,4800,\x204800,4802,\x204805,4808,\x204814,4816,\x204822,4824,\x204846,4848,\x204878,4880,\x204880,4882,\x204885,\x0a\x09\x094888,\x204894,4896,\x204934,4936,\x204954,5024,\x205108,5121,\x205740,5743,\x205750,5761,\x205786,5792,\x205866,6016,\x206067,6176,\x206263,6272,\x206312,7680,\x207835,7840,\x207929,7936,\x207957,7960,\x207965,7968,\x208005,8008,\x208013,8016,\x208023,8025,\x208025,8027,\x208027,8029,\x208029,8031,\x208061,8064,\x208116,8118,\x208124,8126,\x208126,8130,\x208132,8134,\x208140,8144,\x208147,\x0a\x09\x098150,\x208155,8160,\x208172,8178,\x208180,8182,\x208188,8319,\x208319,8450,\x208450,8455,\x208455,8458,\x208467,8469,\x208469,8473,\x208477,8484,\x208484,8486,\x208486,8488,\x208488,8490,\x208493,8495,\x208497,8499,\x208505,8544,\x208579,12293,\x2012295,12321,\x2012329,12337,\x2012341,12344,\x2012346,12353,\x2012436,12445,\x2012446,12449,\x2012538,12540,\x2012542,12549,\x2012588,\x0a\x09\x0912593,\x2012686,12704,\x2012727,13312,\x2013312,19893,\x2019893,19968,\x2019968,40869,\x2040869,40960,\x2042124,44032,\x2044032,55203,\x2055203,63744,\x2064045,64256,\x2064262,64275,\x2064279,64285,\x2064285,64287,\x2064296,64298,\x2064310,64312,\x2064316,64318,\x2064318,64320,\x2064321,64323,\x2064324,64326,\x2064433,64467,\x2064829,64848,\x2064911,64914,\x2064967,\x0a\x09\x0965008,\x2065019,65136,\x2065138,65140,\x2065140,65142,\x2065276,65313,\x2065338,65345,\x2065370,65382,\x2065470,65474,\x2065479,65482,\x2065487,65490,\x2065495,65498,\x2065500\x0a\x09];\x0a\x0a\x09var\x20unicodeES3IdCont\x20=\x20[\x0a\x09\x09768,\x20846,864,\x20866,1155,\x201158,1425,\x201441,1443,\x201465,1467,\x201469,1471,\x201471,1473,\x201474,1476,\x201476,1611,\x201621,1632,\x201641,1648,\x201648,1750,\x201756,1759,\x201764,1767,\x201768,1770,\x201773,1776,\x201785,1809,\x201809,1840,\x201866,1958,\x201968,2305,\x202307,2364,\x202364,2366,\x202381,2385,\x202388,2402,\x202403,2406,\x202415,2433,\x202435,2492,\x202492,\x0a\x09\x092494,\x202500,2503,\x202504,2507,\x202509,2519,\x202519,2530,\x202531,2534,\x202543,2562,\x202562,2620,\x202620,2622,\x202626,2631,\x202632,2635,\x202637,2662,\x202673,2689,\x202691,2748,\x202748,2750,\x202757,2759,\x202761,2763,\x202765,2790,\x202799,2817,\x202819,2876,\x202876,2878,\x202883,2887,\x202888,2891,\x202893,2902,\x202903,2918,\x202927,2946,\x202947,3006,\x203010,3014,\x203016,\x0a\x09\x093018,\x203021,3031,\x203031,3047,\x203055,3073,\x203075,3134,\x203140,3142,\x203144,3146,\x203149,3157,\x203158,3174,\x203183,3202,\x203203,3262,\x203268,3270,\x203272,3274,\x203277,3285,\x203286,3302,\x203311,3330,\x203331,3390,\x203395,3398,\x203400,3402,\x203405,3415,\x203415,3430,\x203439,3458,\x203459,3530,\x203530,3535,\x203540,3542,\x203542,3544,\x203551,3570,\x203571,3633,\x203633,\x0a\x09\x093636,\x203642,3655,\x203662,3664,\x203673,3761,\x203761,3764,\x203769,3771,\x203772,3784,\x203789,3792,\x203801,3864,\x203865,3872,\x203881,3893,\x203893,3895,\x203895,3897,\x203897,3902,\x203903,3953,\x203972,3974,\x203975,3984,\x203991,3993,\x204028,4038,\x204038,4140,\x204146,4150,\x204153,4160,\x204169,4182,\x204185,4969,\x204977,6068,\x206099,6112,\x206121,6160,\x206169,6313,\x206313,\x0a\x09\x098255,\x208256,8400,\x208412,8417,\x208417,12330,\x2012335,12441,\x2012442,12539,\x2012539,64286,\x2064286,65056,\x2065059,65075,\x2065076,65101,\x2065103,65296,\x2065305,65343,\x2065343,65381,\x2065381\x0a\x09];\x0a\x0a\x0a\x20\x20\x20\x20/*\x0a\x20\x20\x20\x20\x20\x20\x20\x20As\x20per\x20ECMAScript\x20Language\x20Specification\x205th\x20Edition,\x20Section\x207.6:\x20Identifier\x20Names\x20and\x20Identifiers\x0a\x20\x20\x20\x20\x20\x20\x20\x20IdentifierStart\x20::\x20Can\x20contain\x20Unicode\x206.2\x20\x20categories\x20Uppercase\x20letter\x20(Lu),\x20Lowercase\x20letter\x20(Ll),\x20Titlecase\x20letter\x20(Lt),\x20Modifier\x20letter\x20(Lm),\x20Other\x20letter\x20(Lo),\x20or\x20Letter\x20number\x20(Nl).\x0a\x20\x20\x20\x20\x20\x20\x20\x20IdentifierPart\x20::\x20Can\x20contain\x20IdentifierStart\x20+\x20Unicode\x206.2\x20\x20categories\x20Non-spacing\x20mark\x20(Mn),\x20Combining\x20spacing\x20mark\x20(Mc),\x20Decimal\x20number\x20(Nd),\x20Connector\x20punctuation\x20(Pc),\x20<ZWNJ>,\x20or\x20<ZWJ>.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20Codepoint\x20ranges\x20for\x20ES5\x20Identifiers\x20are\x20extracted\x20from\x20the\x20Unicode\x206.2\x20specification\x20at:\x0a\x20\x20\x20\x20\x20\x20\x20\x20http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\x0a\x20\x20\x20\x20*/\x0a\x09var\x20unicodeES5IdStart\x20=\x20[\x0a\x09\x09170,\x20170,181,\x20181,186,\x20186,192,\x20214,216,\x20246,248,\x20705,710,\x20721,736,\x20740,748,\x20748,750,\x20750,880,\x20884,886,\x20887,890,\x20893,902,\x20902,904,\x20906,908,\x20908,910,\x20929,931,\x201013,1015,\x201153,1162,\x201319,1329,\x201366,1369,\x201369,1377,\x201415,1488,\x201514,1520,\x201522,1568,\x201610,1646,\x201647,1649,\x201747,1749,\x201749,1765,\x201766,1774,\x201775,\x0a\x09\x091786,\x201788,1791,\x201791,1808,\x201808,1810,\x201839,1869,\x201957,1969,\x201969,1994,\x202026,2036,\x202037,2042,\x202042,2048,\x202069,2074,\x202074,2084,\x202084,2088,\x202088,2112,\x202136,2208,\x202208,2210,\x202220,2308,\x202361,2365,\x202365,2384,\x202384,2392,\x202401,2417,\x202423,2425,\x202431,2437,\x202444,2447,\x202448,2451,\x202472,2474,\x202480,2482,\x202482,2486,\x202489,\x0a\x09\x092493,\x202493,2510,\x202510,2524,\x202525,2527,\x202529,2544,\x202545,2565,\x202570,2575,\x202576,2579,\x202600,2602,\x202608,2610,\x202611,2613,\x202614,2616,\x202617,2649,\x202652,2654,\x202654,2674,\x202676,2693,\x202701,2703,\x202705,2707,\x202728,2730,\x202736,2738,\x202739,2741,\x202745,2749,\x202749,2768,\x202768,2784,\x202785,2821,\x202828,2831,\x202832,2835,\x202856,2858,\x202864,\x0a\x09\x092866,\x202867,2869,\x202873,2877,\x202877,2908,\x202909,2911,\x202913,2929,\x202929,2947,\x202947,2949,\x202954,2958,\x202960,2962,\x202965,2969,\x202970,2972,\x202972,2974,\x202975,2979,\x202980,2984,\x202986,2990,\x203001,3024,\x203024,3077,\x203084,3086,\x203088,3090,\x203112,3114,\x203123,3125,\x203129,3133,\x203133,3160,\x203161,3168,\x203169,3205,\x203212,3214,\x203216,3218,\x203240,\x0a\x09\x093242,\x203251,3253,\x203257,3261,\x203261,3294,\x203294,3296,\x203297,3313,\x203314,3333,\x203340,3342,\x203344,3346,\x203386,3389,\x203389,3406,\x203406,3424,\x203425,3450,\x203455,3461,\x203478,3482,\x203505,3507,\x203515,3517,\x203517,3520,\x203526,3585,\x203632,3634,\x203635,3648,\x203654,3713,\x203714,3716,\x203716,3719,\x203720,3722,\x203722,3725,\x203725,3732,\x203735,3737,\x203743,\x0a\x09\x093745,\x203747,3749,\x203749,3751,\x203751,3754,\x203755,3757,\x203760,3762,\x203763,3773,\x203773,3776,\x203780,3782,\x203782,3804,\x203807,3840,\x203840,3904,\x203911,3913,\x203948,3976,\x203980,4096,\x204138,4159,\x204159,4176,\x204181,4186,\x204189,4193,\x204193,4197,\x204198,4206,\x204208,4213,\x204225,4238,\x204238,4256,\x204293,4295,\x204295,4301,\x204301,4304,\x204346,4348,\x204680,\x0a\x09\x094682,\x204685,4688,\x204694,4696,\x204696,4698,\x204701,4704,\x204744,4746,\x204749,4752,\x204784,4786,\x204789,4792,\x204798,4800,\x204800,4802,\x204805,4808,\x204822,4824,\x204880,4882,\x204885,4888,\x204954,4992,\x205007,5024,\x205108,5121,\x205740,5743,\x205759,5761,\x205786,5792,\x205866,5870,\x205872,5888,\x205900,5902,\x205905,5920,\x205937,5952,\x205969,5984,\x205996,5998,\x206000,\x0a\x09\x096016,\x206067,6103,\x206103,6108,\x206108,6176,\x206263,6272,\x206312,6314,\x206314,6320,\x206389,6400,\x206428,6480,\x206509,6512,\x206516,6528,\x206571,6593,\x206599,6656,\x206678,6688,\x206740,6823,\x206823,6917,\x206963,6981,\x206987,7043,\x207072,7086,\x207087,7098,\x207141,7168,\x207203,7245,\x207247,7258,\x207293,7401,\x207404,7406,\x207409,7413,\x207414,7424,\x207615,7680,\x207957,\x0a\x09\x097960,\x207965,7968,\x208005,8008,\x208013,8016,\x208023,8025,\x208025,8027,\x208027,8029,\x208029,8031,\x208061,8064,\x208116,8118,\x208124,8126,\x208126,8130,\x208132,8134,\x208140,8144,\x208147,8150,\x208155,8160,\x208172,8178,\x208180,8182,\x208188,8305,\x208305,8319,\x208319,8336,\x208348,8450,\x208450,8455,\x208455,8458,\x208467,8469,\x208469,8473,\x208477,8484,\x208484,8486,\x208486,\x0a\x09\x098488,\x208488,8490,\x208493,8495,\x208505,8508,\x208511,8517,\x208521,8526,\x208526,8544,\x208584,11264,\x2011310,11312,\x2011358,11360,\x2011492,11499,\x2011502,11506,\x2011507,11520,\x2011557,11559,\x2011559,11565,\x2011565,11568,\x2011623,11631,\x2011631,11648,\x2011670,11680,\x2011686,11688,\x2011694,11696,\x2011702,11704,\x2011710,11712,\x2011718,11720,\x2011726,\x0a\x09\x0911728,\x2011734,11736,\x2011742,11823,\x2011823,12293,\x2012295,12321,\x2012329,12337,\x2012341,12344,\x2012348,12353,\x2012438,12445,\x2012447,12449,\x2012538,12540,\x2012543,12549,\x2012589,12593,\x2012686,12704,\x2012730,12784,\x2012799,13312,\x2013312,19893,\x2019893,19968,\x2019968,40908,\x2040908,40960,\x2042124,42192,\x2042237,42240,\x2042508,42512,\x2042527,\x0a\x09\x0942538,\x2042539,42560,\x2042606,42623,\x2042647,42656,\x2042735,42775,\x2042783,42786,\x2042888,42891,\x2042894,42896,\x2042899,42912,\x2042922,43000,\x2043009,43011,\x2043013,43015,\x2043018,43020,\x2043042,43072,\x2043123,43138,\x2043187,43250,\x2043255,43259,\x2043259,43274,\x2043301,43312,\x2043334,43360,\x2043388,43396,\x2043442,43471,\x2043471,43520,\x2043560,\x0a\x09\x0943584,\x2043586,43588,\x2043595,43616,\x2043638,43642,\x2043642,43648,\x2043695,43697,\x2043697,43701,\x2043702,43705,\x2043709,43712,\x2043712,43714,\x2043714,43739,\x2043741,43744,\x2043754,43762,\x2043764,43777,\x2043782,43785,\x2043790,43793,\x2043798,43808,\x2043814,43816,\x2043822,43968,\x2044002,44032,\x2044032,55203,\x2055203,55216,\x2055238,55243,\x2055291,\x0a\x09\x0963744,\x2064109,64112,\x2064217,64256,\x2064262,64275,\x2064279,64285,\x2064285,64287,\x2064296,64298,\x2064310,64312,\x2064316,64318,\x2064318,64320,\x2064321,64323,\x2064324,64326,\x2064433,64467,\x2064829,64848,\x2064911,64914,\x2064967,65008,\x2065019,65136,\x2065140,65142,\x2065276,65313,\x2065338,65345,\x2065370,65382,\x2065470,65474,\x2065479,65482,\x2065487,\x0a\x09\x0965490,\x2065495,65498,\x2065500\x0a\x09];\x0a\x0a\x09var\x20unicodeES5IdCont\x20=\x20[\x0a\x09\x09768,\x20879,1155,\x201159,1425,\x201469,1471,\x201471,1473,\x201474,1476,\x201477,1479,\x201479,1552,\x201562,1611,\x201641,1648,\x201648,1750,\x201756,1759,\x201764,1767,\x201768,1770,\x201773,1776,\x201785,1809,\x201809,1840,\x201866,1958,\x201968,1984,\x201993,2027,\x202035,2070,\x202073,2075,\x202083,2085,\x202087,2089,\x202093,2137,\x202139,2276,\x202302,2304,\x202307,2362,\x202364,\x0a\x09\x092366,\x202383,2385,\x202391,2402,\x202403,2406,\x202415,2433,\x202435,2492,\x202492,2494,\x202500,2503,\x202504,2507,\x202509,2519,\x202519,2530,\x202531,2534,\x202543,2561,\x202563,2620,\x202620,2622,\x202626,2631,\x202632,2635,\x202637,2641,\x202641,2662,\x202673,2677,\x202677,2689,\x202691,2748,\x202748,2750,\x202757,2759,\x202761,2763,\x202765,2786,\x202787,2790,\x202799,2817,\x202819,\x0a\x09\x092876,\x202876,2878,\x202884,2887,\x202888,2891,\x202893,2902,\x202903,2914,\x202915,2918,\x202927,2946,\x202946,3006,\x203010,3014,\x203016,3018,\x203021,3031,\x203031,3046,\x203055,3073,\x203075,3134,\x203140,3142,\x203144,3146,\x203149,3157,\x203158,3170,\x203171,3174,\x203183,3202,\x203203,3260,\x203260,3262,\x203268,3270,\x203272,3274,\x203277,3285,\x203286,3298,\x203299,3302,\x203311,\x0a\x09\x093330,\x203331,3390,\x203396,3398,\x203400,3402,\x203405,3415,\x203415,3426,\x203427,3430,\x203439,3458,\x203459,3530,\x203530,3535,\x203540,3542,\x203542,3544,\x203551,3570,\x203571,3633,\x203633,3636,\x203642,3655,\x203662,3664,\x203673,3761,\x203761,3764,\x203769,3771,\x203772,3784,\x203789,3792,\x203801,3864,\x203865,3872,\x203881,3893,\x203893,3895,\x203895,3897,\x203897,3902,\x203903,\x0a\x09\x093953,\x203972,3974,\x203975,3981,\x203991,3993,\x204028,4038,\x204038,4139,\x204158,4160,\x204169,4182,\x204185,4190,\x204192,4194,\x204196,4199,\x204205,4209,\x204212,4226,\x204237,4239,\x204253,4957,\x204959,5906,\x205908,5938,\x205940,5970,\x205971,6002,\x206003,6068,\x206099,6109,\x206109,6112,\x206121,6155,\x206157,6160,\x206169,6313,\x206313,6432,\x206443,6448,\x206459,6470,\x206479,\x0a\x09\x096576,\x206592,6600,\x206601,6608,\x206617,6679,\x206683,6741,\x206750,6752,\x206780,6783,\x206793,6800,\x206809,6912,\x206916,6964,\x206980,6992,\x207001,7019,\x207027,7040,\x207042,7073,\x207085,7088,\x207097,7142,\x207155,7204,\x207223,7232,\x207241,7248,\x207257,7376,\x207378,7380,\x207400,7405,\x207405,7410,\x207412,7616,\x207654,7676,\x207679,8204,\x208205,8255,\x208256,8276,\x208276,\x0a\x09\x098400,\x208412,8417,\x208417,8421,\x208432,11503,\x2011505,11647,\x2011647,11744,\x2011775,12330,\x2012335,12441,\x2012442,42528,\x2042537,42607,\x2042607,42612,\x2042621,42655,\x2042655,42736,\x2042737,43010,\x2043010,43014,\x2043014,43019,\x2043019,43043,\x2043047,43136,\x2043137,43188,\x2043204,43216,\x2043225,43232,\x2043249,43264,\x2043273,43302,\x2043309,43335,\x2043347,\x0a\x09\x0943392,\x2043395,43443,\x2043456,43472,\x2043481,43561,\x2043574,43587,\x2043587,43596,\x2043597,43600,\x2043609,43643,\x2043643,43696,\x2043696,43698,\x2043700,43703,\x2043704,43710,\x2043711,43713,\x2043713,43755,\x2043759,43765,\x2043766,44003,\x2044010,44012,\x2044013,44016,\x2044025,64286,\x2064286,65024,\x2065039,65056,\x2065062,65075,\x2065076,65101,\x2065103,\x0a\x09\x0965296,\x2065305,65343,\x2065343\x0a\x09];\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexLookUpUnicodeMap(code:\x20number,\x20map:\x20number[])\x20:\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Perform\x20binary\x20search\x20in\x20one\x20of\x20the\x20unicode\x20range\x20maps\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20lo:\x20number\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20hi:\x20number\x20=\x20map.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20mid:\x20number;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(lo\x20+\x201\x20<\x20hi)\x0a\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mid\x20=\x20lo\x20+\x20(hi\x20-\x20lo)\x20/\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20mid\x20has\x20to\x20be\x20even\x20to\x20catch\x20a\x20range\x27s\x20beginning\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mid\x20-=\x20mid\x20%\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(map[mid]\x20<=\x20code\x20&&\x20code\x20<=\x20map[mid\x20+\x201])\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(code\x20<\x20map[mid])\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hi\x20=\x20mid;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lo\x20=\x20mid\x20+\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexIsUnicodeDigit(code:\x20number):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20==\x20CodeGenTarget.ES3)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexLookUpUnicodeMap(code,\x20unicodeES3IdCont);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexLookUpUnicodeMap(code,\x20unicodeES5IdCont);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexIsUnicodeIdStart(code:\x20number):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(codeGenTarget\x20==\x20CodeGenTarget.ES3)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexLookUpUnicodeMap(code,\x20unicodeES3IdStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexLookUpUnicodeMap(code,\x20unicodeES5IdStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20export\x20function\x20LexInitialize()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20initializeStaticTokens();\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeLPR]\x20=\x20staticTokens[TokenID.OpenParen];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeRPR]\x20=\x20staticTokens[TokenID.CloseParen];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeCMA]\x20=\x20staticTokens[TokenID.Comma];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeSMC]\x20=\x20staticTokens[TokenID.Semicolon];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeLBR]\x20=\x20staticTokens[TokenID.OpenBracket];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeRBR]\x20=\x20staticTokens[TokenID.CloseBracket];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeTIL]\x20=\x20staticTokens[TokenID.Tilde];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeQUE]\x20=\x20staticTokens[TokenID.Question];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeLC]\x20=\x20staticTokens[TokenID.OpenBrace];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeRC]\x20=\x20staticTokens[TokenID.CloseBrace];\x0a\x20\x20\x20\x20\x20\x20\x20\x20autoToken[LexCodeCOL]\x20=\x20staticTokens[TokenID.Colon];\x0a\x20\x20\x20\x20\x20\x20\x20\x20LexKeywordTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20in\x20(<any>TokenID)._map)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<number><any>i)\x20<=\x20TokenID.LimKeyword)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(),\x20i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20LexCodeASCIIChars;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(LexIsIdentifierStartChar(j))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lexIdStartTable[j]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lexIdStartTable[j]\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexAdjustIndent(code,\x20indentAmt)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20((code\x20==\x20LexCodeLBR)\x20||\x20(code\x20==\x20LexCodeLC)\x20||\x20(code\x20==\x20LexCodeLPR))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20indentAmt\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((code\x20==\x20LexCodeRBR)\x20||\x20(code\x20==\x20LexCodeRC)\x20||\x20(code\x20==\x20LexCodeRPR))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20indentAmt\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20return\x20indentAmt;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexIsIdentifierStartChar(code):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20(((code\x20>=\x2097)\x20&&\x20(code\x20<=\x20122))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((code\x20>=\x2065)\x20&&\x20(code\x20<=\x2090))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(code\x20==\x20LexCodeDollar)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(code\x20==\x20LexCodeUnderscore));\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexIsDigit(code):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20((code\x20>=\x2048)\x20&&\x20(code\x20<=\x2057));\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexIsIdentifierChar(code:number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20lexIdStartTable[code]\x20||\x20LexIsDigit(code);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20LexMatchingOpen(code)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(code\x20==\x20LexCodeRBR)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexCodeLBR;\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(code\x20==\x20LexCodeRC)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexCodeLC;\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(code\x20==\x20LexCodeRPR)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexCodeLPR;\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20return\x200;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20NumberScanState\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Start,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InFraction,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InEmptyFraction,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InExponent\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20LexState\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Start,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InMultilineComment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InMultilineSingleQuoteString,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InMultilineDoubleQuoteString,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20LexMode\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Line,\x0a\x20\x20\x20\x20\x20\x20\x20\x20File,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20CommentStyle\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Line,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Block\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Represent\x20a\x20piece\x20of\x20source\x20code\x20which\x20can\x20be\x20read\x20in\x20multiple\x20segments\x0a\x20\x20\x20\x20export\x20interface\x20ISourceText\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20getText(start:\x20number,\x20end:\x20number):\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20getLength():\x20number;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Implementation\x20on\x20top\x20of\x20a\x20contiguous\x20string\x0a\x20\x20\x20\x20export\x20class\x20StringSourceText\x20implements\x20ISourceText\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20text:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText(start:\x20number,\x20end:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.text.substring(start,\x20end);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getLength():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.text.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SourceTextSegment\x20implements\x20ISourceTextSegment\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20segmentStart:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20segmentEnd:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20segment:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20charCodeAt(index:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.segment.charCodeAt(index\x20-\x20this.segmentStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20substring(start:\x20number,\x20end:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.segment.substring(start\x20-\x20this.segmentStart,\x20end\x20-\x20this.segmentStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20AggerateSourceTextSegment\x20implements\x20ISourceTextSegment\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20seg1:\x20SourceTextSegment,\x20public\x20seg2:\x20SourceTextSegment)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20charCodeAt(index:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.seg1.segmentStart\x20<=\x20index\x20&&\x20index\x20<\x20this.seg1.segmentEnd)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.seg1.segment.charCodeAt(index\x20-\x20this.seg1.segmentStart);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.seg2.segment.charCodeAt(index\x20-\x20this.seg2.segmentStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20substring(start:\x20number,\x20end:\x20number):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.seg1.segmentStart\x20<=\x20start\x20&&\x20end\x20<=\x20this.seg1.segmentEnd)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.seg1.segment.substring(start\x20-\x20this.seg1.segmentStart,\x20end\x20-\x20this.seg1.segmentStart);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.seg2.segment.substring(start\x20-\x20this.seg2.segmentStart)\x20+\x20this.seg1.segment.substring(0,\x20end\x20-\x20this.seg1.segmentStart);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ISourceTextSegment\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20charCodeAt(index:\x20number):\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20substring(start:\x20number,\x20end:\x20number):\x20string;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ScannerTextStream\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20emptySegment\x20=\x20new\x20SourceTextSegment(0,\x200,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20agg:\x20AggerateSourceTextSegment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20len:\x20number;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20sourceText:\x20ISourceText)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.agg\x20=\x20new\x20AggerateSourceTextSegment(ScannerTextStream.emptySegment,\x20ScannerTextStream.emptySegment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.len\x20=\x20this.sourceText.getLength();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20max(a:\x20number,\x20b:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20a\x20>=\x20b\x20?\x20a\x20:\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20min(a:\x20number,\x20b:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20a\x20<=\x20b\x20?\x20a\x20:\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fetchSegment(start:\x20number,\x20end:\x20number):\x20ISourceTextSegment\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Common\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.agg.seg1.segmentStart\x20<=\x20start\x20&&\x20end\x20<=\x20this.agg.seg1.segmentEnd)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.agg.seg1;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Common\x20overlap\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.agg.seg2.segmentStart\x20<=\x20start\x20&&\x20end\x20<=\x20this.agg.seg1.segmentEnd)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.agg;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20overlapping\x20outside\x20of\x20fetched\x20segment(s),\x20fetch\x20a\x20new\x20segment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prev\x20=\x20this.agg.seg1;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20s\x20=\x20prev.segmentEnd;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20e\x20=\x20max(s\x20+\x20512,\x20end);\x20//\x20ensure\x20we\x20move\x20forward\x20at\x20least\x20512\x20characters\x20or\x20\x22end\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20e\x20=\x20min(e,\x20this.len);\x20\x20\x20\x20//\x20but\x20don\x27t\x20go\x20past\x20the\x20end\x20of\x20the\x20source\x20text\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20src\x20=\x20this.sourceText.getText(s,\x20e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newSeg\x20=\x20new\x20SourceTextSegment(s,\x20e,\x20src);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.agg.seg2\x20=\x20prev;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.agg.seg1\x20=\x20newSeg;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.agg;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20charCodeAt(index:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.fetchSegment(index,\x20index\x20+\x201).charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20substring(start:\x20number,\x20end:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.fetchSegment(start,\x20end).substring(start,\x20end);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IScanner\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20startPos:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20pos:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20scan():\x20Token;\x0a\x20\x20\x20\x20\x20\x20\x20\x20previousToken():\x20Token;\x0a\x20\x20\x20\x20\x20\x20\x20\x20prevLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20line:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20col:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20leftCurlyCount:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20rightCurlyCount:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20lastTokenLimChar():\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20lastTokenHadNewline():\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20lexState:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20getComments():\x20CommentToken[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20getCommentsForLine(line:\x20number):\x20CommentToken[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20resetComments():\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20lineMap:\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20setSourceText(newSrc:\x20ISourceText,\x20textMode:\x20number):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20setErrorHandler(reportError:\x20(message:\x20string)\x20=>\x20void):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20seenUnicodeChar:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20seenUnicodeCharInComment:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20getLookAheadToken():\x20Token;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SavedTokens\x20implements\x20IScanner\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prevToken:\x20Token\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20curSavedToken:\x20SavedToken\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prevSavedToken:\x20SavedToken\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentTokenIndex:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentTokens:\x20SavedToken[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tokensByLine:\x20SavedToken[][];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lexStateByLine:\x20LexState[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20prevToken:\x20SavedToken\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20previousToken():\x20Token\x20{\x20return\x20this.prevToken;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentToken\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tokens\x20=\x20new\x20SavedToken[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startPos:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pos:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20seenUnicodeChar:\x20bool\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20seenUnicodeCharInComment:\x20bool\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20close()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentToken\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addToken(tok:\x20Token,\x20scanner:\x20IScanner)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokens[this.currentToken++]\x20=\x20new\x20SavedToken(tok,\x20scanner.startPos,\x20scanner.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scan():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20curly\x20count\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentTokenIndex\x20==\x20this.currentTokens.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.line\x20<\x20this.lineMap.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokenIndex\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokens\x20=\x20this.tokensByLine[this.line];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentTokenIndex\x20<\x20this.currentTokens.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevToken\x20=\x20this.curSavedToken.tok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevSavedToken\x20=\x20this.curSavedToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.curSavedToken\x20=\x20this.currentTokens[this.currentTokenIndex++];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20curToken\x20=\x20this.curSavedToken.tok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20this.curSavedToken.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20+=\x20(this.curSavedToken.limChar\x20-\x20this.curSavedToken.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20this.curSavedToken.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20curToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prevLine\x20=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20line\x20=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20leftCurlyCount:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rightCurlyCount:\x20number;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20syncToTok(offset:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line\x20=\x20getLineNumberFromPosition(this.lineMap,\x20offset);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokenIndex\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tmpCol\x20=\x20offset\x20-\x20this.lineMap[this.line];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.lexStateByLine[this.line]\x20==\x20LexState.InMultilineComment)\x20&&\x20(this.line\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tmpCol\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lenMin1\x20=\x20this.lineMap.length\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokens\x20=\x20this.tokensByLine[this.line];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.currentTokens.length\x20==\x200)\x20&&\x20(this.line\x20<\x20lenMin1))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokens\x20=\x20this.tokensByLine[this.line];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tmpCol\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.line\x20<=\x20lenMin1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.currentTokenIndex\x20<\x20this.currentTokens.length)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(tmpCol\x20>\x20this.currentTokens[this.currentTokenIndex].limChar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentTokenIndex++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentTokenIndex\x20<\x20this.currentTokens.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20this.currentTokens[this.currentTokenIndex].minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.col\x20+\x20this.lineMap[this.line];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lastTokenLimChar():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.prevSavedToken\x20!==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.prevSavedToken.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lastTokenHadNewline():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.prevLine\x20!=\x20this.startLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lexState\x20=\x20LexState.Start;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20commentStack:\x20CommentToken[]\x20=\x20new\x20CommentToken[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushComment(comment:\x20CommentToken)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack.push(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stack\x20=\x20this.commentStack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20stack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getCommentsForLine(line:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments:\x20CommentToken[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.commentStack.length\x20>\x200)\x20&&\x20(this.commentStack[0].line\x20==\x20line))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20[this.commentStack.shift()];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat([this.commentStack.shift()]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resetComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lineMap:\x20number[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setSourceText(newSrc:\x20ISourceText,\x20textMode:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrorHandler(reportError:\x20(message:\x20string)\x20=>\x20void\x20)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getLookAheadToken():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Invalid\x20operation.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Scanner\x20implements\x20IScanner\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20When\x20adding\x20new\x20variables\x20make\x20sure\x20to\x20handle\x20storing\x20them\x20in\x20getLookAheadToken.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20The\x20method\x20works\x20by\x20storing\x20the\x20state\x20before\x20scanning\x20and\x20restoring\x20it\x20later\x20on,\x20missing\x20a\x20member\x20variable\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20could\x20result\x20in\x20an\x20inconsistent\x20state.\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prevLine\x20=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20line\x20=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startPos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startCol:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20startLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20src:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20len\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lineMap:\x20number[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ch\x20=\x20LexEOF;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lexState\x20=\x20LexState.Start;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mode\x20=\x20LexMode.File;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanComments:\x20bool\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20interveningWhitespace\x20=\x20false;\x20//\x20Was\x20there\x20a\x20whitespace\x20token\x20between\x20the\x20last\x20token\x20and\x20the\x20current\x20one?\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20interveningWhitespacePos\x20=\x200;\x20//\x20\x20If\x20yes,\x20this\x20contains\x20the\x20start\x20position\x20of\x20the\x20whitespace\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20leftCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rightCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20commentStack:\x20CommentToken[]\x20=\x20new\x20CommentToken[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20saveScan:\x20SavedTokens\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20seenUnicodeChar:\x20bool\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20seenUnicodeCharInComment:\x20bool\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20reportError:\x20(message:\x20string)\x20=>void;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startCol\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startLine\x20=\x20this.line;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineMap[1]\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!LexKeywordTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20LexInitialize();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20prevTok\x20=\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20previousToken()\x20{\x20return\x20this.prevTok;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setSourceText(newSrc:\x20ISourceText,\x20textMode:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mode\x20=\x20textMode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanComments\x20=\x20(this.mode\x20===\x20LexMode.Line);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line\x20=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startCol\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.len\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.src\x20=\x20newSrc.getText(0,\x20newSrc.getLength());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.len\x20=\x20this.src.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineMap\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineMap[1]\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.leftCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.rightCurlyCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeCharInComment\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrorHandler(reportError:\x20(message:\x20string)\x20=>\x20void\x20)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError\x20=\x20reportError;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setSaveScan(savedTokens:\x20SavedTokens)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.saveScan\x20=\x20savedTokens;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setText(newSrc:\x20string,\x20textMode:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setSourceText(new\x20StringSourceText(newSrc),\x20textMode);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setScanComments(value:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scanComments\x20=\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getLexState():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.lexState;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tokenStart()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startCol\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20peekChar():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.pos\x20<\x20this.len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.src.charCodeAt(this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexEOF;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20peekCharAt(index:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(index\x20<\x20this.len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.src.charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20LexEOF;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20IsHexDigit(c:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20((c\x20>=\x20LexCode_0)\x20&&\x20(c\x20<=\x20LexCode_9))\x20||\x20((c\x20>=\x20LexCode_A)\x20&&\x20(c\x20<=\x20LexCode_F))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((c\x20>=\x20LexCode_a)\x20&&\x20(c\x20<=\x20LexCode_f));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20IsOctalDigit(c:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20((c\x20>=\x20LexCode_0)\x20&&\x20(c\x20<=\x20LexCode_7))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((c\x20>=\x20LexCode_a)\x20&&\x20(c\x20<=\x20LexCode_f));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanHexDigits():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20atLeastOneDigit\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.IsHexDigit(this.ch))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20atLeastOneDigit\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseInt(this.src.substring(this.startPos,\x20this.pos)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanOctalDigits():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20atLeastOneDigit\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.IsOctalDigit(this.ch))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20atLeastOneDigit\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseInt(this.src.substring(this.startPos,\x20this.pos)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanDecimalNumber(state:\x20number):\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20atLeastOneDigit\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svPos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svCol\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(LexIsDigit(this.ch))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20atLeastOneDigit\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20!=\x20LexCode_0\x20&&\x20state\x20==\x20NumberScanState.InEmptyFraction)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20state\x20=\x20NumberScanState.InFraction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeDOT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(state\x20==\x20NumberScanState.Start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20DecimalDigit*\x20.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20state\x20=\x20NumberScanState.InEmptyFraction;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20dot\x20not\x20part\x20of\x20number\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20DecimalDigit*\x20.\x20DecimalDigit+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseFloat(this.src.substring(this.startPos,\x20this.pos)),\x20state\x20==\x20NumberScanState.InEmptyFraction);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20((this.ch\x20==\x20LexCode_e)\x20||\x20(this.ch\x20==\x20LexCode_E))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(state\x20==\x20NumberScanState.Start)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20DecimalDigit+\x20(.\x20DecimalDigit*)\x20[eE]\x20[+-]DecimalDigit+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20atLeastOneDigit\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20state\x20=\x20NumberScanState.InExponent;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(state\x20==\x20NumberScanState.InFraction\x20||\x20state\x20==\x20NumberScanState.InEmptyFraction)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20DecimalDigit+\x20.\x20DecimalDigit*\x20[eE]\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20state\x20=\x20NumberScanState.InExponent;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20atLeastOneDigit\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20DecimalDigit+\x20.\x20DecimalDigit*\x20[eE]\x20DecimalDigit+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseFloat(this.src.substring(this.startPos,\x20this.pos)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.ch\x20==\x20LexCodePLS)\x20||\x20(this.ch\x20==\x20LexCodeMIN))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(state\x20==\x20NumberScanState.InExponent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(state\x20==\x20NumberScanState.InEmptyFraction\x20||\x20state\x20==\x20NumberScanState.InFraction)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20case\x20will\x20not\x20generate\x20bad\x20javascript\x20if\x20we\x20miss\x20the\x20fractional\x20part,\x20but\x20we\x20just\x20want\x20to\x20be\x20consistent\x20with\x20the\x20dot\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseFloat(this.src.substring(this.startPos,\x20this.pos)),\x20state\x20==\x20NumberScanState.InEmptyFraction);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseFloat(this.src.substring(this.startPos,\x20this.pos)));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!atLeastOneDigit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20NumberLiteralToken(parseFloat(this.src.substring(this.startPos,\x20this.pos)),\x20state\x20==\x20NumberScanState.InEmptyFraction);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x200\x20[xX]\x20hexDigits\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x200\x20octalDigits\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x200\x20[89]\x20decimalDigits\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20decimalDigits?\x20fraction?\x20exponent?\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanNumber():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekChar()\x20==\x20LexCode_0)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.peekCharAt(this.pos\x20+\x201))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_x:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_X:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Hex\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanHexDigits();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_8:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_9:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeDOT:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanDecimalNumber(NumberScanState.Start);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Octal\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanOctalDigits();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanDecimalNumber(NumberScanState.Start);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanFraction():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanDecimalNumber(NumberScanState.InFraction);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20newLine()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.File)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lineMap[this.line]\x20=\x20this.pos\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20finishMultilineComment():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ch2:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20LexState.InMultilineComment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(this.pos\x20<\x20this.len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCodeMUL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ch2\x20=\x20this.peekCharAt(this.pos\x20+\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ch2\x20==\x20LexCodeSLH)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.File)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20LexState.Start;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeNWL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.newLine();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.Line)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20>=\x20LexCodeASCIIChars)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeCharInComment\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushComment(comment:\x20CommentToken)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack.push(comment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stack\x20=\x20this.commentStack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20stack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getCommentsForLine(line:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments:\x20CommentToken[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.commentStack.length\x20>\x200)\x20&&\x20(this.commentStack[0].line\x20==\x20line))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comments\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20[this.commentStack.shift()];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat([this.commentStack.shift()]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resetComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20endsLine(c:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(c\x20==\x20LexCodeNWL)\x20||\x20(c\x20==\x20LexCodeRET)\x20||\x20(c\x20==\x20LexCodeLS)\x20||\x20(c\x20==\x20LexCodePS);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20finishSinglelineComment()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(this.pos\x20<\x20this.len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.endsLine(this.ch))\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20>=\x20LexCodeASCIIChars)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeCharInComment\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.File)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tokenText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.src.substring(this.startPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findClosingSLH()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ch2\x20=\x20this.src.charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevCh\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20liveEsc\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(!this.endsLine(ch2)\x20&&\x20(index\x20<\x20this.len))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((ch2\x20==\x20LexCodeSLH)\x20&&\x20(!liveEsc))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20index;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevCh\x20=\x20ch2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20index++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(liveEsc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20liveEsc\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20liveEsc\x20=\x20(prevCh\x20==\x20LexCodeBSL);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ch2\x20=\x20this.src.charCodeAt(index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20speculateRegex():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(noRegexTable[this.prevTok.tokenId]\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svPos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svCol\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20first\x20char\x20is\x20\x27/\x27\x20and\x20has\x20been\x20skipped\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20this.findClosingSLH();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(index\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20found\x20closing\x20/\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pattern\x20=\x20this.src.substring(svPos,\x20index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20flags\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20index\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20this.peekChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20flagsStart\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20check\x20for\x20duplicate\x20flags\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20((this.ch\x20==\x20LexCode_i)\x20||\x20(this.ch\x20==\x20LexCode_g)\x20||\x20(this.ch\x20==\x20LexCode_m))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.pos\x20-\x20flagsStart)\x20>\x203)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20flags\x20=\x20this.src.substring(flagsStart,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20regex\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20regex\x20=\x20new\x20RegExp(pattern,\x20flags);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(regexException)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(regex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20line\x20boundary\x20in\x20regex\x20string\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol\x20+\x20(this.pos\x20-\x20this.startPos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20RegularExpressionLiteralToken(regex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20svPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20svCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lastTokenHadNewline()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.prevLine\x20!=\x20this.startLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lastTokenLimChar()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.interveningWhitespace\x20?\x20this.interveningWhitespacePos\x20:\x20this.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20only\x20when\x20known\x20not\x20to\x20skip\x20line\x20terminators\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20advanceChar(amt:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20+=\x20amt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20+=\x20amt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20this.peekChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nextChar()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20this.peekChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getLookAheadToken():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20method\x20is\x20only\x20used\x20for\x20parsing\x20varargs\x20in\x20lambda\x20expressions.\x20If\x20this\x20functionality\x20is\x20needed\x20for\x20more\x20common\x20cases,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20it\x20needs\x20to\x20be\x20designed.\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20Look-ahead\x20token\x20needs\x20to\x20be\x20integrated\x20in\x20the\x20scanner\x20design\x20to\x20allow\x20for\x20an\x20efficient\x20lookup.\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Store\x20the\x20scanner\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevLine\x20=\x20this.prevLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20line\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20col\x20=\x20this.col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20startPos\x20=\x20this.startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20startCol\x20=\x20this.startCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20startLine\x20=\x20this.startLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ch\x20=\x20this.ch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevTok\x20=\x20this.prevTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lexState\x20=\x20this.lexState;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interveningWhitespace\x20=\x20this.interveningWhitespace;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interveningWhitespacePos\x20=\x20this.interveningWhitespacePos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftCurlyCount\x20=\x20this.leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightCurlyCount\x20=\x20this.rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20seenUnicodeChar\x20=\x20this.seenUnicodeChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20seenUnicodeCharInComment\x20=\x20this.seenUnicodeCharInComment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentStackLength\x20=\x20this.commentStack.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lookAheadToken\x20=\x20this.scan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Restore\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevLine\x20=\x20prevLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.line\x20=\x20line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.col\x20=\x20col;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pos\x20=\x20pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20startPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startCol\x20=\x20startCol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startLine\x20=\x20startLine;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20ch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevTok\x20=\x20prevTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20lexState;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20interveningWhitespace;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20interveningWhitespacePos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.leftCurlyCount\x20=\x20leftCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.rightCurlyCount\x20=\x20rightCurlyCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20seenUnicodeChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeCharInComment\x20=\x20seenUnicodeCharInComment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.commentStack.length\x20=\x20commentStackLength;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20lookAheadToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scanInLine():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this.lexState\x20==\x20LexState.InMultilineComment)\x20&&\x20(this.scanComments))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20this.peekChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.finishMultilineComment();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.startPos\x20<\x20this.pos)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentText\x20=\x20this.src.substring(this.startPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20CommentToken(TokenID.Comment,\x20commentText,/*isBlock*/true,\x20this.startPos,\x20commentLine,/*endsLine*/true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.lexState\x20==\x20LexState.InMultilineSingleQuoteString\x20&&\x20this.pos\x20<\x20this.len)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20LexCodeAPO;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20LexState.Start;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanStringConstant();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.lexState\x20==\x20LexState.InMultilineDoubleQuoteString\x20&&\x20this.pos\x20<\x20this.len)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20LexCodeQUO;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20LexState.Start;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanStringConstant();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevTok\x20=\x20this.innerScan();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ingore\x20white\x20spaces\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevTok.tokenId\x20!=\x20TokenID.Whitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevTok\x20=\x20prevTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20prevTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scan():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prevTok\x20=\x20this.innerScan();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.saveScan)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.saveScan.addToken(this.prevTok,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.prevTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20isValidUnicodeIdentifierChar():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20valid\x20=\x20LexIsUnicodeIdStart(this.ch)\x20||\x20LexIsUnicodeDigit(this.ch);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20this.seenUnicodeChar\x20||\x20valid;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20valid;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20scanStringConstant():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endCode\x20=\x20this.ch;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Skip\x20the\x20first\x20quote\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Accumulate\x20with\x20escape\x20characters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scanStringConstantLoop:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.ch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexEOF:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Unexpected\x20end\x20of\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Unterminated\x20string\x20constant\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break\x20scanStringConstantLoop;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeLS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodePS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Intentional\x20fall\x20through\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeRET:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeNWL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Unterminated\x20string\x20constant\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break\x20scanStringConstantLoop;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeAPO:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeQUO:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20endCode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Found\x20string\x20terminator.\x20Skip\x20past\x20end\x20code.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break\x20scanStringConstantLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeBSL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Consume\x20the\x20current\x20slash\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(this.ch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeAPO:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeQUO:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeBSL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Valid\x20escape\x20sequences\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue\x20scanStringConstantLoop;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeLS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodePS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Intentional\x20fall\x20through\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeRET:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeNWL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Skip\x20/r\x20in\x20a\x20/r/n\x20sequence\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCodeRET\x20&&\x20this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeNWL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Consume\x20the\x20new\x20line\x20char\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Record\x20new\x20line\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.newLine();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.Line)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.lexState\x20=\x20endCode\x20==\x20LexCodeAPO\x20?\x20LexState.InMultilineSingleQuoteString\x20:\x20LexState.InMultilineDoubleQuoteString;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break\x20scanStringConstantLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_x:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCode_u:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20expectedHexDigits\x20=\x20this.ch\x20==\x20LexCode_x\x20?\x202\x20:\x204;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20expectedHexDigits;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.IsHexDigit(this.ch))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Invalid\x20Unicode\x20escape\x20sequence\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue\x20scanStringConstantLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Record\x20seeing\x20a\x20Unicode\x20char\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20>=\x20LexCodeASCIIChars)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.seenUnicodeChar\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20StringLiteralToken(this.src.substring(this.startPos,\x20this.pos));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20scanIdentifier():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasEscape\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isFirstChar\x20=\x20(this.ch\x20==\x20LexCodeBSL);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasUnicode:\x20any\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20;)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(lexIdStartTable[this.ch]\x20||\x20LexIsDigit(this.ch)\x20||\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.ch\x20>=\x20LexCodeASCIIChars\x20&&\x20this.isValidUnicodeIdentifierChar()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCodeBSL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCode_u)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x204\x20hex\x20digits\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20h\x20=\x200;\x20h\x20<\x204\x20;\x20h++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.IsHexDigit(this.ch))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Invalid\x20Unicode\x20escape\x20sequence\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Error];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hexChar\x20=\x20parseInt(this.src.substring(this.pos\x20-\x204,\x20this.pos),\x2016);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20is\x20valid\x20ID\x20char\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lexIdStartTable[hexChar]\x20||\x20(!isFirstChar\x20&&\x20LexIsDigit(hexChar))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(hexChar\x20>=\x20LexCodeASCIIChars\x20&&\x20(LexIsUnicodeIdStart(hexChar)\x20||\x20(!isFirstChar\x20&&\x20LexIsUnicodeDigit(hexChar)))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Invalid\x20identifier\x20character\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Error];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasEscape\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isFirstChar\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Invalid\x20Unicode\x20escape\x20sequence\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Error];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text\x20=\x20this.src.substring(this.startPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasEscape\x20&&\x20(id\x20=\x20LexKeywordTable.lookup(text))\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[id];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20IdentifierToken(text,\x20hasEscape);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20innerScan():\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rtok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ch\x20=\x20this.peekChar();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20start:\x20while\x20(this.pos\x20<\x20this.len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lexIdStartTable[this.ch]\x20||\x20this.ch\x20==\x20LexCodeBSL\x20||\x20(this.ch\x20>=\x20LexCodeASCIIChars\x20&&\x20LexIsUnicodeIdStart(this.ch)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20identifier\x20or\x20keyword\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanIdentifier();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeSpace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.interveningWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20do\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20while\x20(this.ch\x20==\x20LexCodeSpace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.Line)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20whitespaceText\x20=\x20this.src.substring(this.startPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20WhitespaceToken(TokenID.Whitespace,\x20whitespaceText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeSLH)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCodeSLH)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.interveningWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20this.pos\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentStartPos\x20=\x20this.pos\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentStartLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.finishSinglelineComment();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentText\x20=\x20this.src.substring(commentStartPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentToken\x20=\x20new\x20CommentToken(TokenID.Comment,\x20commentText,/*isBlock*/false,\x20commentStartPos,\x20commentStartLine,/*endsLine*/false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scanComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20respect\x20scanner\x20contract:\x20when\x20returning\x20a\x20token,\x20startPos\x20is\x20the\x20start\x20position\x20of\x20the\x20token\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20commentStartPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20commentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushComment(commentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeMUL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.interveningWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20this.pos\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentStartPos\x20=\x20this.pos\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentStartLine\x20=\x20this.line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x20\x20//\x20Skip\x20the\x20\x22*\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.finishMultilineComment();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentText\x20=\x20this.src.substring(commentStartPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20endsLine\x20=\x20this.endsLine(this.peekChar());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commentToken\x20=\x20new\x20CommentToken(TokenID.Comment,\x20commentText,/*isBlock*/true,\x20commentStartPos,\x20commentStartLine,\x20endsLine);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scanComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20respect\x20scanner\x20contract:\x20when\x20returning\x20a\x20token,\x20startPos\x20is\x20the\x20start\x20position\x20of\x20the\x20token\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.startPos\x20=\x20commentStartPos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20commentToken;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pushComment(commentToken);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20regexTok\x20=\x20this.speculateRegex();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(regexTok)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20regexTok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.SlashEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Slash];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.ch\x20==\x20LexCodeSMC)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Semicolon];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.ch\x20==\x20LexCodeAPO)\x20||\x20(this.ch\x20==\x20LexCodeQUO))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scanStringConstant();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(autoToken[this.ch])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20atok\x20=\x20autoToken[this.ch];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(atok.tokenId\x20==\x20TokenID.OpenBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.leftCurlyCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(atok.tokenId\x20==\x20TokenID.CloseBrace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.rightCurlyCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20atok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this.ch\x20>=\x20LexCode_0)\x20&&\x20(this.ch\x20<=\x20LexCode_9))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rtok\x20=\x20this.scanNumber();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rtok)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rtok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Error];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20switch\x20(this.ch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TAB\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeTAB:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeVTAB:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.interveningWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.Line)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20do\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20while\x20((this.ch\x20==\x20LexCodeSpace)\x20||\x20(this.ch\x20==\x209));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20wsText\x20=\x20this.src.substring(this.startPos,\x20this.pos);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20WhitespaceToken(TokenID.Whitespace,\x20wsText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Newlines\x20and\x20BOM\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xFF:\x20//\x20UTF16\x20SEQUENCE\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xFE:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xEF:\x20\x20\x20\x20//\x20UTF8\x20SEQUENCE\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xBB:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x200xBF:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeLS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodePS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeNWL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeRET:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ch\x20==\x20LexCodeNWL)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.newLine();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.mode\x20==\x20LexMode.Line)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.interveningWhitespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespacePos\x20=\x20this.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tokenStart();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.interveningWhitespace\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeDOT:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeDOT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeDOT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.DotDotDot];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Dot];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rtok\x20=\x20this.scanFraction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rtok)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rtok;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Dot];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeEQ:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EqualsEqualsEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EqualsEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeGT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EqualsGreaterThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Equals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeBNG:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.ExclamationEqualsEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.ExclamationEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Exclamation];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodePLS:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.PlusEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodePLS)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.PlusPlus];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Plus];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeMIN:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.MinusEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeMIN)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.MinusMinus];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Minus];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeMUL:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.AsteriskEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Asterisk];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodePCT:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.PercentEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Percent];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeLT:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeLT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.LessThanLessThanEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.LessThanLessThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.LessThanEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.LessThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeGT:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeGT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThanGreaterThanEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x202)\x20==\x20LexCodeGT)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x203)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(4);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThanGreaterThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThanEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.GreaterThan];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeXOR:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.CaretEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Caret];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeBAR:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.BarEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeBAR)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.BarBar];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.Bar];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20LexCodeAMP:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeEQ)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.AmpersandEquals];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.peekCharAt(this.pos\x20+\x201)\x20==\x20LexCodeAMP)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.advanceChar(2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.AmpersandAmpersand];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.And];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Report\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportScannerError(\x22Invalid\x20character\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextChar();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue\x20start;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20staticTokens[TokenID.EndOfFile];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20reportScannerError(message:\x20string)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.reportError)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.reportError(message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Reseverved\x20words\x20only\x20apply\x20to\x20Identifiers,\x20not\x20IdentifierNames\x0a\x20\x20\x20\x20export\x20function\x20convertTokToIDName(tok:\x20Token):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20convertTokToIDBase(tok,\x20true,\x20false);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20convertTokToID(tok:\x20Token,\x20strictMode:\x20bool):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20convertTokToIDBase(tok,\x20false,\x20strictMode);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20convertTokToIDBase(tok:\x20Token,\x20identifierName:\x20bool,\x20strictMode:\x20bool):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tok.tokenId\x20<=\x20TokenID.LimKeyword)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tokInfo\x20=\x20lookupToken(tok.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokInfo\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resFlags\x20=\x20Reservation.Javascript\x20|\x20Reservation.JavascriptFuture;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(strictMode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resFlags\x20|=\x20Reservation.JavascriptFutureStrict;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(identifierName\x20||\x20!hasFlag(tokInfo.reservation,\x20resFlags))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Return\x20the\x20(1-based)\x20line\x20number\x20from\x20a\x20character\x20offset\x20using\x20the\x20provided\x20linemap.\x0a\x20\x20\x20\x20export\x20function\x20getLineNumberFromPosition(lineMap:\x20number[],\x20position:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(position\x20===\x20-1)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Binary\x20search\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20min\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20max\x20=\x20lineMap.length\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(min\x20<\x20max)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20med\x20=\x20(min\x20+\x20max)\x20>>\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(position\x20<\x20lineMap[med])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20max\x20=\x20med\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(position\x20<\x20lineMap[med\x20+\x201])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20min\x20=\x20max\x20=\x20med;\x20//\x20found\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20min\x20=\x20med\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20min;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x20Return\x20the\x20[line,\x20column]\x20data\x20for\x20a\x20given\x20offset\x20and\x20a\x20lineMap.\x0a\x20\x20\x20\x20///\x20Note\x20that\x20the\x20returned\x20line\x20is\x201-based,\x20while\x20the\x20column\x20is\x200-based.\x0a\x20\x20\x20\x20export\x20function\x20getSourceLineColFromMap(lineCol:\x20ILineCol,\x20minChar:\x20number,\x20lineMap:\x20number[]):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20line\x20=\x20getLineNumberFromPosition(lineMap,\x20minChar);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(line\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineCol.line\x20=\x20line;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lineCol.col\x20=\x20(minChar\x20-\x20lineMap[line]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Return\x20the\x20[line,\x20column]\x20(both\x201\x20based)\x20corresponding\x20to\x20a\x20given\x20position\x20in\x20a\x20given\x20script.\x0a\x20\x20\x20\x20export\x20function\x20getLineColumnFromPosition(script:\x20TypeScript.Script,\x20position:\x20number):\x20ILineCol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20getSourceLineColFromMap(result,\x20position,\x20script.locationInfo.lineMap);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(result.col\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.col++;\x20\x20\x20//\x20Make\x20it\x201-based\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20//\x20Return\x20the\x20position\x20(offset)\x20corresponding\x20to\x20a\x20given\x20[line,\x20column]\x20(both\x201-based)\x20in\x20a\x20given\x20script.\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20export\x20function\x20getPositionFromLineColumn(script:\x20TypeScript.Script,\x20line:\x20number,\x20column:\x20number):\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20script.locationInfo.lineMap[line]\x20+\x20(column\x20-\x201);\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20//\x20Return\x20true\x20if\x20the\x20token\x20is\x20a\x20primitive\x20type\x0a\x20\x20\x20\x20export\x20function\x20isPrimitiveTypeToken(token:\x20Token)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(token.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Any:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Bool:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Number:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.String:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Return\x20true\x20if\x20the\x20token\x20is\x20a\x20primitive\x20type\x0a\x20\x20\x20\x20export\x20function\x20isModifier(token:\x20Token)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(token.tokenId)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Public:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Private:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20TokenID.Static:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20class\x20AssignScopeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20scopeChain:\x20ScopeChain,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeFlow:\x20TypeFlow,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20modDeclChain:\x20ModuleDeclaration[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20pushAssignScope(scope:\x20SymbolScope,\x0a\x20\x20\x20\x20\x20\x20\x20\x20context:\x20AssignScopeContext,\x0a\x20\x20\x20\x20\x20\x20\x20\x20type:\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20classType:\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20fnc:\x20FuncDecl)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20chain\x20=\x20new\x20ScopeChain(null,\x20context.scopeChain,\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.thisType\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.classType\x20=\x20classType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.fnc\x20=\x20fnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain\x20=\x20chain;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20popAssignScope(context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain\x20=\x20context.scopeChain.previous;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20instanceCompare(a:\x20Symbol,\x20b:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((a\x20==\x20null)\x20||\x20(!a.isInstanceProperty())))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20a;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20instanceFilterStop(s:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20s.isInstanceProperty();\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ScopeSearchFilter\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20select:\x20(a:\x20Symbol,\x20b:\x20Symbol)\x20=>Symbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20stop:\x20(s:\x20Symbol)\x20=>bool)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20result:\x20Symbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reset()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.result\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20update(b:\x20Symbol):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.result\x20=\x20this.select(this.result,\x20b);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.result)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.stop(this.result);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20instanceFilter\x20=\x20new\x20ScopeSearchFilter(instanceCompare,\x20instanceFilterStop);\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignModuleScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleDecl\x20=\x20<ModuleDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberScope:\x20SymbolTableScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20aggScope:\x20SymbolAggregateScope\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleDecl.name\x20&&\x20moduleDecl.mod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.name.sym\x20=\x20moduleDecl.mod.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20mod\x20=\x20moduleDecl.mod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x27re\x20likely\x20here\x20because\x20of\x20error\x20recovery\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!mod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20memberScope\x20=\x20new\x20SymbolTableScope(mod.members,\x20mod.ambientMembers,\x20mod.enclosedTypes,\x20mod.ambientEnclosedTypes,\x20mod.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20mod.memberScope\x20=\x20memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.modDeclChain.push(moduleDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.checker.currentModDecl\x20=\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope\x20=\x20new\x20SymbolAggregateScope(mod.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(memberScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(context.scopeChain.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(aggScope,\x20context,\x20null,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20mod.containedScope\x20=\x20aggScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mod.symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.addLocalsFromScope(mod.containedScope,\x20mod.symbol,\x20moduleDecl.vars,\x20mod.members.privateMembers,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignClassScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20classDecl\x20=\x20<InterfaceDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberScope:\x20SymbolTableScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20aggScope:\x20SymbolAggregateScope\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classDecl.name\x20&&\x20classDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.name.sym\x20=\x20classDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20classType\x20=\x20ast.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classSym\x20=\x20classType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberScope\x20=\x20<SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope\x20=\x20new\x20SymbolAggregateScope(classType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(memberScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(context.scopeChain.scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.containedScope\x20=\x20aggScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.memberScope\x20=\x20memberScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType\x20=\x20classType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberScope\x20=\x20<SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.memberScope\x20=\x20memberScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope\x20=\x20new\x20SymbolAggregateScope(instanceType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(context.scopeChain.scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(aggScope,\x20context,\x20instanceType,\x20classType,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.containedScope\x20=\x20aggScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20context.typeFlow.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignInterfaceScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl\x20=\x20<InterfaceDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberScope:\x20SymbolTableScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20aggScope:\x20SymbolAggregateScope\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.name\x20&&\x20interfaceDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.name.sym\x20=\x20interfaceDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceType\x20=\x20ast.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20memberScope\x20=\x20<SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.memberScope\x20=\x20memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope\x20=\x20new\x20SymbolAggregateScope(interfaceType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(memberScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(context.scopeChain.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(aggScope,\x20context,\x20null,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.containedScope\x20=\x20aggScope;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignWithScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20withStmt\x20=\x20<WithStatement>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20withType\x20=\x20withStmt.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20withType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20withSymbol\x20=\x20new\x20WithSymbol(withStmt.minChar,\x20context.typeFlow.checker.locationInfo.unitIndex,\x20withType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20withType.members\x20=\x20members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20withType.ambientMembers\x20=\x20ambientMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20withType.symbol\x20=\x20withSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20withType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20withStmt.type\x20=\x20withType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20withScope\x20=\x20new\x20TypeScript.SymbolScopeBuilder(withType.members,\x20withType.ambientMembers,\x20null,\x20null,\x20context.scopeChain.scope,\x20withType.symbol);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(withScope,\x20context,\x20null,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20withType.containedScope\x20=\x20withScope;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignFuncDeclScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20container:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20localContainer:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localContainer\x20=\x20ast.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isInnerStatic\x20=\x20isStatic\x20&&\x20context.scopeChain.fnc\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20inner\x20static\x20functions,\x20use\x20the\x20parent\x27s\x20member\x20scope,\x20so\x20local\x20vars\x20cannot\x20be\x20captured\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentScope\x20=\x20isInnerStatic\x20?\x20context.scopeChain.fnc.type.memberScope\x20:\x20context.scopeChain.scope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20this\x20is\x20not\x20a\x20method,\x20but\x20enclosed\x20by\x20class,\x20use\x20constructor\x20as\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20enclosing\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Some\x20twisted\x20logic\x20here\x20-\x20this\x20needs\x20to\x20be\x20cleaned\x20up\x20once\x20old\x20classes\x20are\x20removed\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20if\x20it\x27s\x20a\x20new\x20class,\x20always\x20use\x20the\x20contained\x20scope,\x20since\x20we\x20initialize\x20the\x20constructor\x20scope\x20below\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.thisType\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!funcDecl.isConstructor\x20||\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instType\x20=\x20context.scopeChain.thisType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(instType.typeFlags\x20&\x20TypeFlags.IsClass)\x20&&\x20!hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isMethod()\x20||\x20isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentScope\x20=\x20instType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20constructor\x20scope\x20if\x20a\x20method\x20as\x20well\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentScope\x20=\x20instType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.previous.scope.container\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.previous.scope.container.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.previous.scope.container.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>context.scopeChain.previous.scope.container.declAST).isConstructor)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20parent\x20is\x20the\x20class\x20constructor,\x20use\x20the\x20constructor\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentScope\x20=\x20instType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(isStatic\x20&&\x20context.scopeChain.classType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentScope\x20=\x20context.scopeChain.classType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20else,\x20use\x20the\x20contained\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parentScope\x20=\x20instType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20instType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.isConstructor\x20&&\x20context.scopeChain.thisType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20sets\x20the\x20container\x20to\x20the\x20class\x20type\x27s\x20symbol\x20(which\x20is\x20shared\x20by\x20the\x20instance\x20type)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20context.scopeChain.thisType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type\x20==\x20null\x20||\x20hasFlag(funcDecl.type.symbol.flags,\x20SymbolFlags.TypeSetDuringScopeAssignment))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.fnc\x20&&\x20context.scopeChain.fnc.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20context.scopeChain.fnc.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outerFnc:\x20FuncDecl\x20=\x20context.scopeChain.fnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nameText\x20=\x20funcDecl.name\x20?\x20funcDecl.name.actualText\x20:\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fgSym:\x20TypeSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20the\x20case\x20of\x20function-nested\x20statics,\x20no\x20member\x20list\x20will\x20have\x20bee\x20initialized\x20for\x20the\x20function,\x20so\x20we\x20need\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20to\x20copy\x20it\x20over.\x20\x20We\x20don\x27t\x20set\x20this\x20by\x20default\x20because\x20having\x20a\x20non-null\x20member\x20list\x20will\x20throw\x20off\x20assignment\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20compatibility\x20tests\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(outerFnc.type.members\x20==\x20null\x20&&\x20container.getType().memberScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerFnc.type.members\x20=\x20(<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcScope\x20=\x20context.scopeChain.fnc.type.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length]\x20=\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcScope\x20=\x20context.scopeChain.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x20don\x27t\x20search\x20for\x20another\x20sym\x20for\x20accessors\x20to\x20prevent\x20us\x20from\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20accidentally\x20coalescing\x20function\x20signatures\x20with\x20the\x20same\x20name\x20(E.g.,\x20a\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x27f\x27\x20the\x20outer\x20scope\x20and\x20a\x20setter\x20\x27f\x27\x20in\x20an\x20object\x20literal\x20within\x20that\x20scope)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nameText\x20&&\x20nameText\x20!=\x20\x22__missing\x22\x20&&\x20!funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20funcScope.findLocal(nameText,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20logic\x20should\x20be\x20symmetric\x20with\x20preCollectClassTypes\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20funcScope.findLocal(nameText,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.checker.createFunctionSignature(funcDecl,\x20container,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcScope,\x20fgSym,\x20fgSym\x20==\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20it\x27s\x20a\x20getter\x20or\x20setter\x20for\x20a\x20class\x20property\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.accessorSymbol\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(funcDecl.fncFlags\x20&\x20FncFlags.ClassMethod)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((!fgSym\x20||\x20fgSym.declAST.nodeType\x20!=\x20NodeType.FuncDecl)\x20&&\x20funcDecl.isAccessor())\x20||\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(fgSym\x20&&\x20fgSym.isAccessor()))\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.accessorSymbol\x20=\x20context.typeFlow.checker.createAccessorSymbol(funcDecl,\x20fgSym,\x20container.getType(),\x20(funcDecl.isMethod()\x20&&\x20isStatic),\x20true,\x20funcScope,\x20container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.flags\x20|=\x20SymbolFlags.TypeSetDuringScopeAssignment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Set\x20the\x20symbol\x20for\x20functions\x20and\x20their\x20overloads\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name\x20&&\x20funcDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.name.sym\x20=\x20funcDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Keep\x20track\x20of\x20the\x20original\x20scope\x20type,\x20because\x20target\x20typing\x20might\x20override\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20\x22type\x22\x20member.\x20We\x20need\x20the\x20original\x20\x22Scope\x20type\x22\x20for\x20completion\x20list,\x20etc.\x0a\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.scopeType\x20=\x20funcDecl.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Overloads\x20have\x20no\x20scope,\x20so\x20bail\x20here\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(funcTable,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientFuncTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientFuncMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(ambientFuncTable,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcStaticTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcStaticMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(funcStaticTable,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientFuncStaticTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientFuncStaticMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(ambientFuncStaticTable,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Is\x20it\x20a\x20problem\x20that\x20this\x20is\x20being\x20set\x20twice\x20for\x20properties\x20and\x20constructors?\x0a\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.unitIndex\x20=\x20context.typeFlow.checker.locationInfo.unitIndex;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20locals\x20=\x20new\x20SymbolScopeBuilder(funcMembers,\x20ambientFuncMembers,\x20null,\x20null,\x20parentScope,\x20localContainer);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20statics\x20=\x20new\x20SymbolScopeBuilder(funcStaticMembers,\x20ambientFuncStaticMembers,\x20null,\x20null,\x20parentScope,\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20context.scopeChain.thisType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.thisType.constructorScope\x20=\x20locals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20basically,\x20there\x20are\x20two\x20problems\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20-\x20Above,\x20for\x20new\x20classes,\x20we\x20were\x20overwriting\x20the\x20constructor\x20scope\x20with\x20the\x20containing\x20scope.\x20\x20This\x20caused\x20constructor\x20params\x20to\x20be\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20scope\x20everywhere\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20-\x20Below,\x20we\x27re\x20setting\x20the\x20contained\x20scope\x20table\x20to\x20the\x20same\x20table\x20we\x20were\x20overwriting\x20the\x20constructor\x20scope\x20with,\x20which\x20we\x20need\x20to\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20fish\x20lambda\x20params,\x20etc,\x20out\x20(see\x20funcTable\x20below)\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20A\x20good\x20first\x20approach\x20to\x20solving\x20this\x20would\x20be\x20to\x20change\x20addLocalsFromScope\x20to\x20take\x20a\x20scope\x20instead\x20of\x20a\x20table,\x20and\x20add\x20to\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20constructor\x20scope\x20as\x20appropriate\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.symbols\x20=\x20funcTable;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20group\x20=\x20funcDecl.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20funcDecl.signature;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20group.containedScope\x20=\x20locals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20locals.container\x20=\x20group.symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20group.memberScope\x20=\x20statics;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20statics.container\x20=\x20group.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.enclosingFnc\x20=\x20context.scopeChain.fnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20group.enclosingType\x20=\x20isStatic\x20?\x20context.scopeChain.classType\x20:\x20context.scopeChain.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20mapping\x20when\x20type\x20checking\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fgSym\x20=\x20<TypeSymbol>ast.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((funcDecl.fncFlags\x20&\x20FncFlags.Signature)\x20==\x20FncFlags.None)\x20&&\x20funcDecl.vars)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.addLocalsFromScope(locals,\x20fgSym,\x20funcDecl.vars,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcTable,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.addLocalsFromScope(statics,\x20fgSym,\x20funcDecl.statics,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcStaticTable,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.parameters)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20signature.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramSym:\x20ParameterSymbol\x20=\x20signature.parameters[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.checker.resolveTypeLink(locals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramSym.parameter.typeLink,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.checker.resolveTypeLink(locals,\x20signature.returnType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isSignature());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isConstructor\x20||\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20thisType\x20=\x20(funcDecl.isConstructor\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20?\x20context.scopeChain.thisType\x20:\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(locals,\x20context,\x20thisType,\x20null,\x20funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.IsFunctionExpression))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20function\x20is\x20an\x20expression,\x20the\x20name\x20will\x20not\x20be\x20visible\x20in\x20the\x20enclosing\x20scope.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20the\x20function\x20symbol\x20under\x20its\x20name\x20to\x20the\x20local\x20scope\x20to\x20allow\x20for\x20recursive\x20calls.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcTable.add(funcDecl.name.actualText,\x20funcDecl.name.sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignCatchScopes(ast:\x20AST,\x20context:\x20AssignScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchBlock\x20=\x20<Catch>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(catchBlock.param)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchTable\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x20//\x20REVIEW:\x20Should\x20we\x20be\x20allocating\x20a\x20public\x20table\x20instead\x20of\x20a\x20private\x20one?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchLocals\x20=\x20new\x20SymbolScopeBuilder(catchTable,\x20null,\x20null,\x20null,\x20context.scopeChain.scope,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catchBlock.containedScope\x20=\x20catchLocals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pushAssignScope(catchLocals,\x20context,\x20context.scopeChain.thisType,\x20context.scopeChain.classType,\x20context.scopeChain.fnc);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preAssignScopes(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:AssignScopeContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20list\x20=\x20<ASTList>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20list.enclosingScope\x20=\x20context.scopeChain.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignModuleScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignClassScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignInterfaceScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.With)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignWithScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignFuncDeclScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Catch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preAssignCatchScopes(ast,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.TypeRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20postAssignScopes(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:AssignScopeContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevModDecl\x20=\x20<ModuleDeclaration>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.modDeclChain.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.modDeclChain.length\x20>=\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.typeFlow.checker.currentModDecl\x20=\x20context.modDeclChain[context.modDeclChain.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.With)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!funcDecl.isConstructor\x20||\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20&&\x20!funcDecl.isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Catch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20catchBlock\x20=\x20<Catch>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(catchBlock.param)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popAssignScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20TypeCollectionContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20script:\x20Script\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20scopeChain:\x20ScopeChain,\x20public\x20checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20MemberScopeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20type:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ast:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scope:\x20SymbolScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20options\x20=\x20new\x20AstWalkOptions();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20flow:\x20TypeFlow,\x20public\x20pos:\x20number,\x20public\x20matchFlag:\x20ASTFlags)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20EnclosingScopeContext\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopeGetter:\x20()\x20=>\x20SymbolScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20objectLiteralScopeGetter:\x20()\x20=>\x20SymbolScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopeStartAST:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20skipNextFuncDeclForClass\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20deepestModuleDecl:\x20ModuleDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingClassDecl:\x20TypeDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingObjectLit:\x20UnaryExpression\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20publicsOnly\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useFullAst\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20scriptFragment:\x20Script;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20logger:\x20ILogger,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20script:\x20Script,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20text:\x20ISourceText,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20pos:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMemberCompletion:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScope():\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scopeGetter();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getObjectLiteralScope():\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.objectLiteralScopeGetter();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScopeAST()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scopeStartAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScopePosition()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scopeStartAST.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScriptFragmentStartAST():\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scopeStartAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScriptFragmentPosition():\x20number\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getScriptFragmentStartAST().minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScriptFragment():\x20Script\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scriptFragment\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20this.getScriptFragmentStartAST();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20ast.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20(this.isMemberCompletion\x20?\x20this.pos\x20:\x20this.pos\x20+\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scriptFragment\x20=\x20TypeScript.quickParse(this.logger,\x20ast,\x20this.text,\x20minChar,\x20limChar,\x20null/*errorCapture*/).Script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scriptFragment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preFindMemberScope(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20memScope:\x20MemberScopeContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(ast.flags,\x20memScope.matchFlag)\x20&&\x20((memScope.pos\x20<\x200)\x20||\x20(memScope.pos\x20==\x20ast.limChar)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memScope.ast\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((ast.type\x20==\x20null)\x20&&\x20(memScope.pos\x20>=\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memScope.flow.inScopeTypeCheck(ast,\x20memScope.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memScope.type\x20=\x20ast.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memScope.options.stopWalk();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20pushTypeCollectionScope(container:\x20Symbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20valueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ambientValueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20enclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ambientEnclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20context:\x20TypeCollectionContext,\x0a\x20\x20\x20\x20\x20\x20\x20\x20thisType:\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20classType:\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl:\x20ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20new\x20SymbolScopeBuilder(valueMembers,\x20ambientValueMembers,\x20enclosedTypes,\x20ambientEnclosedTypes,\x20null,\x20container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20chain:\x20ScopeChain\x20=\x20new\x20ScopeChain(container,\x20context.scopeChain,\x20builder);\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.thisType\x20=\x20thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.classType\x20=\x20classType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20chain.moduleDecl\x20=\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain\x20=\x20chain;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20popTypeCollectionScope(context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain\x20=\x20context.scopeChain.previous;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preFindEnclosingScope(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:\x20EnclosingScopeContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20minChar\x20=\x20ast.minChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20limChar\x20=\x20ast.limChar;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Account\x20for\x20the\x20fact\x20completion\x20list\x20may\x20be\x20called\x20at\x20the\x20end\x20of\x20a\x20file\x20which\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20is\x20has\x20not\x20been\x20fully\x20re-parsed\x20yet.\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Script\x20&&\x20context.pos\x20>\x20limChar)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20limChar\x20=\x20context.pos;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20((minChar\x20<=\x20context.pos)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(limChar\x20>=\x20context.pos))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ast.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Script:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20script.bod\x20===\x20null\x20?\x20null\x20:\x20script.bod.enclosingScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeStartAST\x20=\x20script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ClassDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(ast.type\x20===\x20null\x20||\x20ast.type.instanceType.containedScope\x20===\x20null)\x20?\x20null\x20:\x20ast.type.instanceType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeStartAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.enclosingClassDecl\x20=\x20<TypeDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20objectLit\x20=\x20<UnaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Only\x20consider\x20target-typed\x20object\x20literals\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(objectLit.targetType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20objectLit.targetType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.objectLiteralScopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20objectLit.targetType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.enclosingObjectLit\x20=\x20objectLit;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ModuleDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.deepestModuleDecl\x20=\x20<ModuleDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast.type\x20===\x20null\x20?\x20null\x20:\x20ast.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeStartAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.InterfaceDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(ast.type\x20===\x20null)\x20?\x20null\x20:\x20ast.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeStartAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.skipNextFuncDeclForClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.skipNextFuncDeclForClass\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeGetter\x20=\x20function\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20scope\x20of\x20a\x20class\x20constructor\x20is\x20hidden\x20somewhere\x20we\x20don\x27t\x20expect\x20:-S\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.type\x20&&\x20ast.type.enclosingType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast.type.enclosingType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.scopeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl.scopeType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeStartAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20//\x20Find\x20the\x20enclosing\x20scope\x20context\x20from\x20a\x20position\x20inside\x20a\x20script\x20AST.\x0a\x20\x20\x20\x20//\x20The\x20\x22scopeStartAST\x22\x20of\x20the\x20returned\x20scope\x20is\x20always\x20valid.\x0a\x20\x20\x20\x20//\x20Return\x20\x22null\x22\x20if\x20the\x20enclosing\x20scope\x20can\x27t\x20be\x20found.\x0a\x20\x20\x20\x20//\x0a\x20\x20\x20\x20export\x20function\x20findEnclosingScopeAt(logger:\x20ILogger,\x20script:\x20Script,\x20text:\x20ISourceText,\x20pos:\x20number,\x20isMemberCompletion:\x20bool):\x20EnclosingScopeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context\x20=\x20new\x20EnclosingScopeContext(logger,\x20script,\x20text,\x20pos,\x20isMemberCompletion);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(script,\x20preFindEnclosingScope,\x20null,\x20null,\x20context);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeStartAST\x20===\x20null)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20context;\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20Signature\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasVariableArgList\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnType:\x20TypeLink;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parameters:\x20ParameterSymbol[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20declAST:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckStatus\x20=\x20TypeCheckStatus.NotStarted;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nonOptionalParameterCount\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20Signature\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20Signature();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.hasVariableArgList\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.returnType\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.returnType.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.returnType.type\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.returnType.type.specializeType(pattern,\x20replacement,\x20checker,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.returnType.type\x20=\x20checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parameters)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.parameters\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.parameters.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldSym:ParameterSymbol\x20=\x20this.parameters[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramDef\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramSym\x20=\x20new\x20ParameterSymbol(oldSym.name,\x20oldSym.location,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramSym.declAST\x20=\x20this.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.symbol\x20=\x20paramSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.parameters[i]\x20=\x20paramSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldType\x20=\x20oldSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(oldType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.typeLink.type\x20=\x20oldType.specializeType(pattern,\x20replacement,\x20checker,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramSym.declAST.type\x20=\x20paramDef.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.typeLink.type\x20=\x20checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.nonOptionalParameterCount\x20=\x20this.nonOptionalParameterCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.declAST\x20=\x20this.declAST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.toStringHelper(false,\x20false,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toStringHelper(shortform:\x20bool,\x20brackets:\x20bool,\x20scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.toStringHelperEx(shortform,\x20brackets,\x20scope).toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toStringHelperEx(shortform:\x20bool,\x20brackets:\x20bool,\x20scope:\x20SymbolScope,\x20prefix?\x20:\x20string\x20=\x20\x22\x22)\x20:\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20new\x20MemberNameArray();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(brackets)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.prefix\x20=\x20\x20prefix\x20+\x20\x22[\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.prefix\x20=\x20prefix\x20+\x20\x22(\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLen\x20=\x20this.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.hasVariableArgList\x20?\x20paramLen\x20-\x201\x20:\x20paramLen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(this.parameters[i].name\x20+\x20(this.parameters[i].isOptional()\x20?\x20\x22?\x22\x20:\x20\x22\x22)\x20+\x20\x22:\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20<\x20paramLen\x20-\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22,\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22...\x22\x20+\x20this.parameters[i].name\x20+\x20\x22:\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(shortform)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(brackets)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22]\x20=>\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22)\x20=>\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(brackets)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22]:\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22):\x20\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.returnType.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(this.returnType.type.getScopedTypeNameEx(scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder.add(MemberName.create(\x22any\x22));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20builder;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SignatureGroup\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatures:\x20Signature[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasImplementation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20definitionSignature:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasBeenTypechecked\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20flags:\x20SignatureFlags\x20=\x20SignatureFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addSignature(signature:\x20Signature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.signatures\x20=\x20new\x20Signature[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.signatures[this.signatures.length]\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20duplicates\x20should\x20be\x20found\x20within\x20createFunctionSignature,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20so\x20we\x20won\x27t\x20check\x20for\x20them\x20here\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!signature.declAST.isOverload\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!signature.declAST.isSignature()\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(signature.declAST.fncFlags,\x20FncFlags.Ambient)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(signature.declAST.fncFlags,\x20FncFlags.Definition))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.definitionSignature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x20return\x20this.signatures.toString();\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toStrings(prefix:\x20string,\x20shortform:\x20bool,\x20scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20:\x20MemberName[]\x20=\x20[];\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.signatures.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20shortform\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20definition\x20signature\x20shouldn\x27t\x20be\x20printed\x20if\x20there\x20are\x20overloads\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x201\x20&&\x20this.signatures[i]\x20==\x20this.definitionSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.flags\x20&\x20SignatureFlags.IsIndexer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.push(this.signatures[i].toStringHelperEx(shortform,\x20true,\x20scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.push(this.signatures[i].toStringHelperEx(shortform,\x20false,\x20scope,\x20prefix));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20SignatureGroup\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.signatures.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.addSignature(this.signatures[i].specializeType(pattern,\x20replacement,\x20checker));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20verifies\x20that\x20signatures\x20are\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20unique\x20within\x20a\x20given\x20group\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20compatible\x20with\x20the\x20declaration\x20signature\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20verifySignatures(checker:\x20TypeChecker)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20verify\x20no\x20signature\x20pair\x20with\x20identical\x20parameters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures\x20&&\x20((len\x20=\x20this.signatures.length)\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x20i\x20+\x201;\x20j\x20<\x20len;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20next\x20check\x20for\x20equivalence\x20between\x20overloads\x20-\x20no\x20two\x20can\x20be\x20exactly\x20the\x20same\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures[i].declAST\x20&&\x20this.signatures[j].declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!hasFlag(this.signatures[i].declAST.fncFlags,\x20FncFlags.Definition)\x20&&\x20!hasFlag(this.signatures[j].declAST.fncFlags,\x20FncFlags.Definition))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.signaturesAreIdentical(this.signatures[i],\x20this.signatures[j]))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.errorReporter.simpleError(this.signatures[i].declAST,\x20(this.signatures[i].declAST\x20&&\x20this.signatures[i].declAST.name)\x20?\x20\x22Signature\x20for\x20\x27\x22\x20+\x20this.signatures[i].declAST.name.actualText\x20+\x20\x22\x27\x20is\x20duplicated\x22\x20:\x22Signature\x20is\x20duplicated\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20finally,\x20ensure\x20that\x20the\x20definition\x20is\x20assignable\x20to\x20each\x20signature\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.definitionSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!checker.signatureIsAssignableToTarget(this.definitionSignature,\x20this.signatures[i]))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.errorReporter.simpleError(this.signatures[i].declAST,\x20\x22Overload\x20signature\x20is\x20not\x20compatible\x20with\x20function\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(checker:\x20TypeChecker,\x20ast:\x20AST,\x20hasConstruct:bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.hasBeenTypechecked)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20here\x20to\x20prevent\x20us\x20from\x20recursively\x20invoking\x20typeCheck\x20again\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasBeenTypechecked\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures\x20&&\x20((len\x20=\x20this.signatures.length)\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20first,\x20typecheck\x20each\x20signature\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasConstruct\x20&&\x20!this.definitionSignature\x20&&\x20this.signatures[i].declAST\x20&&\x20this.signatures[i].declAST.isOverload\x20&&\x20!hasFlag(this.signatures[i].declAST.fncFlags,\x20FncFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.errorReporter.simpleError(this.signatures[i].declAST,\x20\x22Overload\x20declaration\x20lacks\x20definition\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x27re\x20typechecking\x20a\x20constructor\x20via\x20one\x20of\x20its\x20overloads,\x20ensure\x20that\x20the\x20outer\x20class\x20is\x20typechecked,\x20since\x20we\x20need\x20to\x20validate\x20its\x20inheritance\x20properties\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20to\x20properly\x20check\x20that\x20\x27super\x27\x20is\x20being\x20used\x20correctly\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatures[i].declAST\x20&&\x20this.signatures[i].declAST.isConstructor\x20&&\x20this.signatures[i].declAST.classDecl\x20&&\x20this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus\x20==\x20TypeCheckStatus.NotStarted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.typeFlow.typeCheck(this.signatures[i].declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.verifySignatures(checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a///<reference\x20path=\x27..\x5charness\x5cexternal\x5cjson2.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20SourceMapPosition\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceColumn:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emittedLine:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emittedColumn:\x20number;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SourceMapping\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20start\x20=\x20new\x20SourceMapPosition();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20end\x20=\x20new\x20SourceMapPosition();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nameIndex:\x20number\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20childMappings:\x20SourceMapping[]\x20=\x20[];\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SourceMapper\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20MapFileExtension\x20=\x20\x22.map\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceMappings:\x20SourceMapping[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentMappings:\x20SourceMapping[][]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20names:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentNameIndex:\x20number[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20jsFileName:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tsFileName:\x20string;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(tsFileName:\x20string,\x20jsFileName:\x20string,\x20public\x20jsFile:\x20ITextWriter,\x20public\x20sourceMapOut:\x20ITextWriter,\x20public\x20errorReporter:\x20ErrorReporter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentMappings.push(this.sourceMappings);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20jsFileName\x20=\x20switchToForwardSlashes(jsFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.jsFileName\x20=\x20TypeScript.getPrettyName(jsFileName,\x20false,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20removalIndex\x20=\x20jsFileName.lastIndexOf(this.jsFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fixedPath\x20=\x20jsFileName.substring(0,\x20removalIndex);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tsFileName\x20=\x20TypeScript.getRelativePathToFixedPath(fixedPath,\x20tsFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Generate\x20source\x20mapping\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20EmitSourceMapping(allSourceMappers:\x20SourceMapper[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20At\x20this\x20point\x20we\x20know\x20that\x20there\x20is\x20at\x20least\x20one\x20source\x20mapper\x20present.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20there\x20are\x20multiple\x20source\x20mappers,\x20all\x20will\x20correspond\x20to\x20same\x20map\x20file\x20but\x20different\x20sources\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Output\x20map\x20file\x20name\x20into\x20the\x20js\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMapper\x20=\x20allSourceMappers[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapper.jsFile.WriteLine(\x22//@\x20sourceMappingURL=\x22\x20+\x20sourceMapper.jsFileName\x20+\x20SourceMapper.MapFileExtension);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Now\x20output\x20map\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMapOut\x20=\x20sourceMapper.sourceMapOut;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mappingsString\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tsFiles:\x20string[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevEmittedColumn\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevEmittedLine\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevSourceColumn\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevSourceLine\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevSourceIndex\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevNameIndex\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20namesList:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20namesCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emitComma\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20recordedPosition:\x20SourceMapPosition\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20sourceMapperIndex\x20=\x200;\x20sourceMapperIndex\x20<\x20allSourceMappers.length;\x20sourceMapperIndex++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapper\x20=\x20allSourceMappers[sourceMapperIndex];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20there\x20are\x20any\x20mappings\x20generated\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20currentSourceIndex\x20=\x20tsFiles.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tsFiles.push(sourceMapper.tsFileName);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Join\x20namelist\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sourceMapper.names.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20namesList.push.apply(namesList,\x20sourceMapper.names);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20recordSourceMapping\x20=\x20(mappedPosition:\x20SourceMapPosition,\x20nameIndex:\x20number)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(recordedPosition\x20!=\x20null\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordedPosition.emittedColumn\x20==\x20mappedPosition.emittedColumn\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordedPosition.emittedLine\x20==\x20mappedPosition.emittedLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20position\x20is\x20already\x20recorded\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Record\x20this\x20position\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevEmittedLine\x20!==\x20mappedPosition.emittedLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(prevEmittedLine\x20<\x20mappedPosition.emittedLine)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevEmittedColumn\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20\x22;\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevEmittedLine++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitComma\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(emitComma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20\x22,\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x201.\x20Relative\x20Column\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20Base64VLQFormat.encode(mappedPosition.emittedColumn\x20-\x20prevEmittedColumn);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevEmittedColumn\x20=\x20mappedPosition.emittedColumn;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x202.\x20Relative\x20sourceIndex\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20Base64VLQFormat.encode(currentSourceIndex\x20-\x20prevSourceIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevSourceIndex\x20=\x20currentSourceIndex;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x203.\x20Relative\x20sourceLine\x200\x20based\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20Base64VLQFormat.encode(mappedPosition.sourceLine\x20-\x201\x20-\x20prevSourceLine);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevSourceLine\x20=\x20mappedPosition.sourceLine\x20-\x201;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x204.\x20Relative\x20sourceColumn\x200\x20based\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20Base64VLQFormat.encode(mappedPosition.sourceColumn\x20-\x20prevSourceColumn);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevSourceColumn\x20=\x20mappedPosition.sourceColumn;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x205.\x20Relative\x20namePosition\x200\x20based\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nameIndex\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappingsString\x20=\x20mappingsString\x20+\x20Base64VLQFormat.encode(namesCount\x20+\x20nameIndex\x20-\x20prevNameIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20prevNameIndex\x20=\x20namesCount\x20+\x20nameIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitComma\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordedPosition\x20=\x20mappedPosition;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Record\x20starting\x20spans\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20recordSourceMappingSiblings\x20=\x20(sourceMappings:\x20SourceMapping[])\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20sourceMappings.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceMapping\x20=\x20sourceMappings[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordSourceMapping(sourceMapping.start,\x20sourceMapping.nameIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordSourceMappingSiblings(sourceMapping.childMappings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordSourceMapping(sourceMapping.end,\x20sourceMapping.nameIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20recordSourceMappingSiblings(sourceMapper.sourceMappings,\x20-1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20namesCount\x20=\x20namesCount\x20+\x20sourceMapper.names.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Write\x20the\x20actual\x20map\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mappingsString\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapOut.Write(JSON2.stringify({\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20version:\x203,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20file:\x20sourceMapper.jsFileName,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sources:\x20tsFiles,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20names:\x20namesList,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mappings:\x20mappingsString\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Done,\x20close\x20the\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Closing\x20files\x20could\x20result\x20in\x20exceptions,\x20report\x20them\x20if\x20they\x20occur\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapOut.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceMapper.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20//\x20private\x20members\x20are\x20private\x20to\x20the\x20scope\x0a\x20\x20\x20\x20//\x20public\x20members\x20are\x20public\x20to\x20the\x20scope\x0a\x20\x20\x20\x20export\x20class\x20ScopedMembers\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20allMembers:\x20IHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20publicMembers:\x20IHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20privateMembers:\x20IHashTable;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20dualMembers:\x20DualStringHashTable)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allMembers\x20=\x20this.dualMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.publicMembers\x20=\x20this.dualMembers.primaryTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.privateMembers\x20=\x20this.dualMembers.secondaryTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20add\x20a\x20public\x20member\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addPublicMember(key:\x20string,\x20data)\x20{\x20return\x20this.dualMembers.primaryTable.add(key,\x20data);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20add\x20a\x20private\x20member\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addPrivateMember(key:\x20string,\x20data)\x20{\x20return\x20this.dualMembers.secondaryTable.add(key,\x20data);\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20SymbolKind\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Field,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Parameter,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Variable,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20container:\x20Symbol)\x20{\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x20return\x20\x22base\x22;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[\x22please\x22,\x20\x22implement\x22,\x20\x22in\x22,\x20\x22derived\x22,\x20\x22classes\x22];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllTypeSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[\x22please\x22,\x20\x22implement\x22,\x20\x22in\x22,\x20\x22derived\x22,\x20\x22classes\x22];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllValueSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[\x22please\x22,\x20\x22implement\x22,\x20\x22in\x22,\x20\x22derived\x22,\x20\x22classes\x22];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20advanced\x20search\x20using\x20a\x20filter\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20search(filter:\x20ScopeSearchFilter,\x20name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20find\x20in\x20this\x20immediate\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findLocal(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20find\x20in\x20value\x20namespace\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20find\x20symbol\x20that\x20supplies\x20an\x20implementation\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findImplementation(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20restrict\x20the\x20search\x20to\x20ambient\x20values\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findAmbient(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(this.printLabel()\x20+\x20\x22\x20scope\x20with\x20container:\x20\x22\x20+\x20this.container.name\x20+\x20\x22...\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(this.printLabel()\x20+\x20\x22\x20scope...\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enter(container:\x20Symbol,\x20ast:\x20AST,\x20symbol:\x20Symbol,\x20errorReporter:\x20ErrorReporter,\x20publicOnly:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typespace:\x20bool,\x20ambient:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTable():\x20IHashTable\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20symbolCanBeUsed(sym:\x20Symbol,\x20publicOnly)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20publicOnly\x20?\x20!(hasFlag(sym.flags,\x20SymbolFlags.Private)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.declAST\x20&&\x20sym.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20hasFlag((<FuncDecl>sym.declAST).fncFlags,\x20FncFlags.Private)))\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SymbolAggregateScope\x20extends\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x20return\x20\x22agg\x22;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20valueCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20valueImplCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20valueAmbientCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeImplCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeAmbientCache:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parents:\x20SymbolScope[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20container:\x20Symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(container:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20search(filter:\x20ScopeSearchFilter,\x20name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20this.parents[i].search(filter,\x20name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(filter.update(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20filter.result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentResult\x20=\x20this.parents[i].getAllSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentResult)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(parentResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllTypeSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentResult\x20=\x20this.parents[i].getAllTypeSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentResult)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(parentResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllValueSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentResult\x20=\x20this.parents[i].getAllValueSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentResult)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(parentResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parents[i].print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findImplementation(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20implCache\x20=\x20this.valueImplCache;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implCache\x20=\x20this.typeImplCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(implCache\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((sym\x20=\x20implCache.lookup(name))\x20!=\x20null)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(publicOnly\x20?\x20!(hasFlag(sym.flags,\x20SymbolFlags.Private)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.declAST\x20&&\x20sym.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20hasFlag((<FuncDecl>sym.declAST).fncFlags,\x20FncFlags.Private)))\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x20true))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20this.parents[i].findImplementation(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(implCache)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeImplCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implCache\x20=\x20this.typeImplCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.valueImplCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implCache\x20=\x20this.valueImplCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20implCache.add(name,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cache\x20=\x20this.valueCache;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.typeCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cache\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((sym\x20=\x20cache.lookup(name))\x20!=\x20null)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(publicOnly\x20?\x20!(hasFlag(sym.flags,\x20SymbolFlags.Private)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.declAST\x20&&\x20sym.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20hasFlag((<FuncDecl>sym.declAST).fncFlags,\x20FncFlags.Private)))\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20:\x20true))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20this.parents[i].find(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cache\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.typeCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.valueCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.valueCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache.add(name,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findAmbient(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cache\x20=\x20this.valueAmbientCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.typeAmbientCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cache\x20&&\x20((sym\x20=\x20cache.lookup(name))\x20!=\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20this.parents.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20this.parents[i].findAmbient(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cache\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeAmbientCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.typeAmbientCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.valueAmbientCache\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache\x20=\x20this.valueAmbientCache;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cache.add(name,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addParentScope(parent:\x20SymbolScope):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parents\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parents\x20=\x20new\x20SymbolScope[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parents[this.parents.length]\x20=\x20parent;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SymbolTableScope\x20extends\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20container:\x20Symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20valueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientValueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientEnclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container:\x20Symbol)\x0a\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x20return\x20\x22table\x22;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20this.getAllTypeSymbolNames(members);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result.concat(this.getAllValueSymbolNames(members));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllTypeSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientEnclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.enclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.enclosedTypes.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllValueSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientValueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.ambientValueMembers.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.valueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.valueMembers.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20search(filter:\x20ScopeSearchFilter,\x20name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20this.find(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20filter.update(sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20filter.result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable:\x20IHashTable\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.enclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.enclosedTypes.publicMembers\x20:\x20this.enclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.valueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.valueMembers.publicMembers\x20:\x20this.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20s\x20=\x20ambientTable.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s)\x20{\x20return\x20s;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20s\x20=\x20table.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s)\x20{\x20return\x20s;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findAmbient(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20s\x20=\x20ambientTable.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s)\x20{\x20return\x20s;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientValueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientValueMembers.allMembers.map(function\x20(key,\x20sym,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.valueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.valueMembers.allMembers.map(function\x20(key,\x20sym,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientEnclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientEnclosedTypes.allMembers.map(function\x20(key,\x20sym,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.enclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosedTypes.allMembers.map(function\x20(key,\x20sym,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findImplementation(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20this.find(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.kind()\x20==\x20SymbolKind.Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSym\x20=\x20<TypeSymbol>sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!typeSym.type.hasImplementation())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(sym.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.container.kind()\x20==\x20SymbolKind.Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ctypeSym\x20=\x20<TypeSymbol>sym.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!ctypeSym.type.hasImplementation())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTable()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.valueMembers.publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SymbolScopeBuilder\x20extends\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20container:\x20Symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20valueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientValueMembers:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientEnclosedTypes:\x20ScopedMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20parent:\x20SymbolScope,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container:\x20Symbol)\x0a\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printLabel()\x20{\x20return\x20\x22builder\x22;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20this.getAllTypeSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result.concat(this.getAllValueSymbolNames(members));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllTypeSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientEnclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.enclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.enclosedTypes.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!members\x20&&\x20this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentResult\x20=\x20this.parent.getAllTypeSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentResult)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(parentResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllValueSymbolNames(members:\x20bool):\x20string[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientValueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.ambientValueMembers.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.valueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(this.valueMembers.allMembers.getAllKeys());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!members\x20&&\x20this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentResult\x20=\x20this.parent.getAllValueSymbolNames(members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentResult)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20result.concat(parentResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20search(filter:\x20ScopeSearchFilter,\x20name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table\x20=\x20(this.valueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.valueMembers.publicMembers\x20:\x20this.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.enclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.enclosedTypes.publicMembers\x20:\x20this.enclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym\x20=\x20ambientTable.lookup(name))\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(filter.update(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym\x20=\x20table.lookup(name))\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(filter.update(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20this.parent.search(filter,\x20name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(filter.update(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20filter.result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super.print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientValueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientValueMembers.allMembers.map(function\x20(key,\x20s,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.valueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.valueMembers.allMembers.map(function\x20(key,\x20s,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientEnclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientEnclosedTypes.allMembers.map(function\x20(key,\x20s,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.enclosedTypes)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosedTypes.allMembers.map(function\x20(key,\x20s,\x20context)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x20\x20\x22\x20+\x20key);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parent.print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table\x20=\x20(this.valueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.valueMembers.publicMembers\x20:\x20this.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.enclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.enclosedTypes.publicMembers\x20:\x20this.enclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable\x20&&\x20((sym\x20=\x20ambientTable.lookup(name))\x20!=\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(table\x20&&\x20((sym\x20=\x20table.lookup(name))\x20!=\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parent.find(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findAmbient(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable\x20&&\x20((sym\x20=\x20ambientTable.lookup(name))\x20!=\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parent.findAmbient(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findLocal(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table\x20=\x20(this.valueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.valueMembers.publicMembers\x20:\x20this.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTable\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.enclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.enclosedTypes.publicMembers\x20:\x20this.enclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambientTable\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20publicOnly\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym\x20=\x20table.lookup(name))\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x20return\x20sym;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambientTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((sym\x20=\x20ambientTable.lookup(name))\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x20return\x20sym;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enter(container:\x20Symbol,\x20ast:\x20AST,\x20symbol:\x20Symbol,\x20errorReporter:\x20ErrorReporter,\x20insertAsPublic:\x20bool,\x20typespace:\x20bool,\x20ambient:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20table\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ambient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.ambientEnclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20insertAsPublic\x20?\x20this.ambientEnclosedTypes.publicMembers\x20:\x20this.ambientEnclosedTypes.privateMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.ambientValueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20insertAsPublic\x20?\x20this.ambientValueMembers.publicMembers\x20:\x20this.ambientValueMembers.privateMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typespace)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.enclosedTypes\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20insertAsPublic\x20?\x20this.enclosedTypes.publicMembers\x20:\x20this.enclosedTypes.privateMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table\x20=\x20(this.valueMembers\x20==\x20null)\x20?\x20null\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20insertAsPublic\x20?\x20this.valueMembers.publicMembers\x20:\x20this.valueMembers.privateMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(table)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!table.add(symbol.name,\x20symbol))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorReporter.duplicateIdentifier(ast,\x20symbol.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.Alert(\x22YYYYY\x22);\x20\x20//\x20REVIEW:\x20Surely\x20we\x20can\x20do\x20better\x20than\x20this...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTable()\x20{\x20return\x20this.valueMembers.allMembers;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20FilteredSymbolScope\x20extends\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20scope:\x20SymbolScope,\x20container:\x20Symbol,\x20public\x20filter:\x20ScopeSearchFilter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope.print(outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.filter.reset();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.scope.search(this.filter,\x20name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findLocal(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool)\x20{\x20return\x20this.scope.findLocal(name,\x20publicOnly,\x20typespace);\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20FilteredSymbolScopeBuilder\x20extends\x20SymbolScopeBuilder\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(valueMembers:\x20ScopedMembers,\x20parent:\x20SymbolScope,\x20container:\x20Symbol,\x20public\x20filter:\x20(sym:\x20Symbol)\x20=>bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(valueMembers,\x20null,\x20null,\x20null,\x20parent,\x20container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findLocal(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20super.findLocal(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.filter(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20search(filter:\x20ScopeSearchFilter,\x20name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20find(name:\x20string,\x20publicOnly:\x20bool,\x20typespace:\x20bool):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20super.findLocal(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.filter(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20super.find(name,\x20publicOnly,\x20typespace);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TypeCheckStatus\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20NotStarted,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Started,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Finished,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20For\x20lexically-scoped\x20constructs\x0a\x20\x20\x20\x20export\x20function\x20aLexicallyEnclosesB(a:\x20Symbol,\x20b:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(a.declAST\x20&&\x20b\x20&&\x20b.declAST\x20&&\x20a.declAST.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20a.declAST.minChar\x20<=\x20b.declAST.minChar\x20&&\x20a.declAST.limChar\x20>=\x20b.declAST.limChar;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20aEnclosesB(a:\x20Symbol,\x20b:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20while\x20(a.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(a\x20==\x20b\x20||\x20aLexicallyEnclosesB(a.container,\x20b))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20a\x20=\x20a.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20PhasedTypecheckObject\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20typeCheckStatus:\x20TypeCheckStatus;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bound\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20container:\x20Symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20instanceScope():\x20SymbolScope\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isVariable()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMember()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isInferenceSymbol()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isWith()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeable()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isType():\x20bool\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getType():\x20Type\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20flags:\x20SymbolFlags\x20=\x20SymbolFlags.None;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20refs:\x20Identifier[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAccessor()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isObjectLitField\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20declAST:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20declModule:\x20ModuleDeclaration\x20=\x20null;\x20\x20//\x20if\x20child\x20of\x20module,\x20this\x20is\x20the\x20module\x20that\x20declared\x20it\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20passSymbolCreated:\x20number\x20=\x20CompilerDiagnostics.analysisPass;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20name:\x20string,\x20public\x20location:\x20number,\x20public\x20length:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20unitIndex:\x20number)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isInstanceProperty()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(this.flags,\x20SymbolFlags.Property)\x20&&\x20(!hasFlag(this.flags,\x20SymbolFlags.ModuleMember));\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeName(scope:\x20SymbolScope):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getTypeNameEx(scope).toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeNameEx(scope:\x20SymbolScope):\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(this.toString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getOptionalNameString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(this.flags,\x20SymbolFlags.Optional)\x20?\x20\x22?\x22\x20:\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pathToRoot()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20new\x20Symbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20node\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(node\x20&&\x20(node.name\x20!=\x20globalId))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path[path.length]\x20=\x20node;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20node\x20=\x20node.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findCommonAncestorPath(b:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.container\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20Symbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aPath\x20=\x20this.container.pathToRoot();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bPath:\x20Symbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(b)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bPath\x20=\x20b.pathToRoot();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bPath\x20=\x20new\x20Symbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commonNodeIndex\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20aLen\x20=\x20aPath.length;\x20i\x20<\x20aLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aNode\x20=\x20aPath[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200,\x20bLen\x20=\x20bPath.length;\x20j\x20<\x20bLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bNode\x20=\x20bPath[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(aNode\x20==\x20bNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commonNodeIndex\x20=\x20i;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commonNodeIndex\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commonNodeIndex\x20>=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20aPath.slice(0,\x20commonNodeIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20aPath;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Gets\x20the\x20pretty\x20Name\x20for\x20the\x20symbol\x20withing\x20the\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getPrettyName(scopeSymbol:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopeRelativeName(scope:\x20SymbolScope):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getPrettyName(null)\x20+\x20this.getOptionalNameString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lca\x20=\x20this.findCommonAncestorPath(scope.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20lca.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prettyName\x20=\x20lca[i].getPrettyName(i\x20==\x20len\x20-\x201\x20?\x20scope.container\x20:\x20lca[i\x20+\x201]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder\x20=\x20prettyName\x20+\x20\x22.\x22\x20+\x20builder;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder\x20+=\x20this.getPrettyName(len\x20==\x200\x20?\x20scope.container\x20:\x20lca[0])\x20+\x20this.getOptionalNameString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20builder;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fullName():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20this.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ancestor\x20=\x20this.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(ancestor\x20&&\x20(ancestor.name\x20!=\x20globalId))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20builder\x20=\x20ancestor.name\x20+\x20\x22.\x22\x20+\x20builder;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ancestor\x20=\x20ancestor.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20builder;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isExternallyVisible(checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Global\x20module\x20is\x20not\x20hidden\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this\x20==\x20checker.gloMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20private\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.flags,\x20SymbolFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20current\x20container\x20is\x20not\x20exported\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20its\x20in\x20global\x20-\x20it\x20is\x20visible,\x20otherwise\x20it\x20isn\x27t\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(this.flags,\x20SymbolFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.container\x20==\x20checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20It\x20is\x20visible\x20if\x20its\x20container\x20is\x20visible\x20too\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.container.isExternallyVisible(checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20visible(scope:\x20SymbolScope,\x20checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(checker\x20==\x20null\x20||\x20this.container\x20==\x20checker.gloMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.flags,\x20SymbolFlags.ModuleMember))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.flags,\x20SymbolFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(this.flags,\x20SymbolFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20aEnclosesB(this,\x20scope.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note\x20that\x20in\x20the\x20scope-assignment\x20and\x20binding\x20phases,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20currentModDecl\x20will\x20point\x20to\x20the\x20\x22master\x22\x20module\x20decl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20and\x20not\x20necessarily\x20the\x20one\x20that\x20the\x20symbol\x20in\x20question\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20was\x20declared\x20in.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20That\x27s\x20ok\x20-\x20there\x27s\x20no\x20harm\x20done\x20in\x20attributing\x20the\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20to\x20the\x20master\x20mod\x20decl\x20in\x20either\x20of\x20those\x20phases,\x20so\x20long\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20as\x20we\x20reference\x20the\x20actual\x20module\x20fragment\x20of\x20declaration\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20during\x20typecheck.\x20\x20Doing\x20this\x20also\x20prevents\x20us\x20from\x20printing\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20multiple\x20error\x20messages\x20if\x20the\x20symbol\x20is\x20not\x20visible.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20checker\x20&&\x20(checker.currentModDecl\x20==\x20this.declModule)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(checker.currentModDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.currentModDecl.mod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.currentModDecl.mod.symbol\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declModule\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declModule.mod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.declModule.mod.symbol\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aEnclosesB(checker.currentModDecl.mod.symbol,\x20this.declModule.mod.symbol));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20field\x20or\x20method\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isFunction\x20=\x20this.declAST\x20&&\x20this.declAST.nodeType\x20==\x20NodeType.FuncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isMethod\x20=\x20isFunction\x20&&\x20(<FuncDecl>this.declAST).isMethod();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStaticFunction\x20=\x20isFunction\x20&&\x20hasFlag((<FuncDecl>this.declAST).fncFlags,\x20FncFlags.Static)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivateMethod\x20=\x20isMethod\x20&&\x20hasFlag((<FuncDecl>this.declAST).fncFlags,\x20FncFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAlias\x20=\x20this.isType()\x20&&\x20(<TypeSymbol>this).aliasLink;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isMember()\x20||\x20isMethod\x20||\x20isStaticFunction\x20||\x20isAlias)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.flags,\x20SymbolFlags.Private)\x20||\x20isPrivateMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope.container\x20==\x20null\x20&&\x20this.container\x20!=\x20scope.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x20//\x20it\x27s\x20an\x20inner\x20member\x20being\x20accessed\x20by\x20the\x20global\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.container\x20==\x20null\x20?\x20true\x20:\x20aEnclosesB(scope.container,\x20this.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20aEnclosesB(this,\x20scope.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addRef(identifier:\x20Identifier)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.refs)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.refs\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.refs[this.refs.length]\x20=\x20identifier;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22_anonymous\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.Write(this.toString());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setType(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kind():\x20SymbolKind\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22please\x20implement\x20in\x20derived\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getInterfaceDeclFromSymbol(checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declAST\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declAST.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<InterfaceDeclaration>this.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(this.container\x20!=\x20null\x20&&\x20this.container\x20!=\x20checker.gloMod\x20&&\x20this.container.declAST.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<InterfaceDeclaration>this.container.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getVarDeclFromSymbol()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declAST\x20!=\x20null\x20&&\x20this.declAST.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<VarDecl>this.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocComments()\x20:\x20Comment[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declAST\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.declAST.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isStatic()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(this.flags,\x20SymbolFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ValueLocation\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbol:\x20Symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeLink:\x20TypeLink;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20InferenceSymbol\x20extends\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20string,\x20location:\x20number,\x20length:\x20number,\x20unitIndex:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(name,\x20location,\x20length,\x20unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckStatus\x20=\x20TypeCheckStatus.NotStarted;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isInferenceSymbol()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20transferVarFlags(varFlags:\x20VarFlags)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Ambient))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Constant))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Constant;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Property))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Property;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Public))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Readonly))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Readonly;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varFlags,\x20VarFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeSymbol\x20extends\x20InferenceSymbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20additionalLocations:\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20expansions:\x20Type[]\x20=\x20[];\x20//\x20For\x20types\x20that\x20may\x20be\x20\x22split\x22,\x20keep\x20track\x20of\x20the\x20subsequent\x20definitions\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20expansionsDeclAST:\x20AST[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDynamic\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(locName:\x20string,\x20location:\x20number,\x20length:\x20number,\x20unitIndex:\x20number,\x20public\x20type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(locName,\x20location,\x20length,\x20unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.prettyName\x20=\x20this.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addLocation(loc:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.additionalLocations\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.additionalLocations\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.additionalLocations[this.additionalLocations.length]\x20=\x20loc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMethod\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20aliasLink:ImportDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kind()\x20{\x20return\x20SymbolKind.Type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isType():\x20bool\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getType()\x20{\x20return\x20this.type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prettyName:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20onlyReferencedAsTypeRef\x20=\x20optimizeModuleCodeGen;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeNameEx(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.type.getMemberTypeNameEx(this.name\x20?\x20this.name\x20+\x20this.getOptionalNameString()\x20:\x20\x22\x22,\x20false,\x20false,\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20instanceScope():\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20use\x20the\x20constructor\x20scope\x20for\x20a\x20class\x20body\x20or\x20methods\x20-\x20use\x20the\x20contained\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(this.type.typeFlags\x20&\x20TypeFlags.IsClass)\x20&&\x20this.type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.type.instanceType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20corresponding\x20instance\x20type\x20if\x20this\x20is\x20a\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20instanceType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20this.type.getTypeName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20this.name\x20+\x20\x22:\x22\x20+\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isClass()\x20{\x20return\x20this.instanceType\x20!=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isFunction()\x20{\x20return\x20this.declAST\x20!=\x20null\x20&&\x20this.declAST.nodeType\x20==\x20NodeType.FuncDecl;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.type\x20==\x20pattern)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20replacement.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20replType\x20=\x20this.type.specializeType(pattern,\x20replacement,\x20checker,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(replType\x20!=\x20this.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20TypeSymbol(this.name,\x20-1,\x200,\x20-1,\x20replType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Gets\x20the\x20pretty\x20name\x20of\x20the\x20symbol\x20with\x20respect\x20to\x20symbol\x20of\x20the\x20scope\x20(scopeSymbol)\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20searchTillRoot\x20specifies\x20if\x20the\x20name\x20need\x20to\x20searched\x20in\x20the\x20root\x20path\x20of\x20the\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getPrettyName(scopeSymbol:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!!scopeSymbol\x20&&\x20isQuoted(this.prettyName)\x20&&\x20this.type.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20a\x20dynamic\x20module\x20-\x20and\x20need\x20to\x20be\x20specialized\x20with\x20the\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20in\x20exported\x20module\x20members\x20in\x20each\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbolPath\x20=\x20scopeSymbol.pathToRoot();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prettyName\x20=\x20this.getPrettyNameOfDynamicModule(symbolPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prettyName\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20prettyName.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.prettyName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getPrettyNameOfDynamicModule(scopeSymbolPath:\x20Symbol[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeSymbolPathLength\x20=\x20scopeSymbolPath.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20externalSymbol:\x20{\x20name:\x20string;\x20symbol:\x20Symbol;\x20}\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scopeSymbolPath.length\x20>\x200\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scopeSymbolPath[scopeSymbolPathLength\x20-\x201].getType().isModuleType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength\x20-\x201]).isDynamic)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20if\x20submodule\x20is\x20dynamic\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scopeSymbolPathLength\x20>\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scopeSymbolPath[scopeSymbolPathLength\x20-\x202].getType().isModuleType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength\x20-\x202]).isDynamic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleType\x20=\x20<ModuleType>scopeSymbolPath[scopeSymbolPathLength\x20-\x202].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20externalSymbol\x20=\x20moduleType.findDynamicModuleName(this.type);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(externalSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20in\x20this\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleType\x20=\x20<ModuleType>scopeSymbolPath[scopeSymbolPathLength\x20-\x201].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20externalSymbol\x20=\x20moduleType.findDynamicModuleName(this.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20externalSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocComments():\x20Comment[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments\x20:\x20Comment[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.declAST\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat(this.declAST.getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.expansionsDeclAST.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat(this.expansionsDeclAST[i].getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20WithSymbol\x20extends\x20TypeSymbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(location:\x20number,\x20unitIndex:\x20number,\x20withType:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(\x22with\x22,\x20location,\x204,\x20unitIndex,\x20withType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isWith()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20FieldSymbol\x20extends\x20InferenceSymbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20name:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20location:\x20number;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20string,\x20location:\x20number,\x20unitIndex:\x20number,\x20public\x20canWrite:\x20bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20field:\x20ValueLocation)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(name,\x20location,\x20name.length,\x20unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.name\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.location\x20=\x20location;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kind()\x20{\x20return\x20SymbolKind.Field;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeable()\x20{\x20return\x20this.isAccessor()\x20?\x20this.setter\x20!=\x20null\x20:\x20this.canWrite;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getType()\x20{\x20return\x20this.field.typeLink.type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeNameEx(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope),\x20this.name\x20+\x20this.getOptionalNameString()\x20+\x20\x22:\x20\x22,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isMember()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setType(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.field.typeLink.type\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getter:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setter:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasBeenEmitted\x20=\x20false;\x20//\x20since\x20getters\x20and\x20setters\x20are\x20emitted\x20together,\x20need\x20to\x20track\x20if\x20one\x20has\x20been\x20emitted\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isAccessor()\x20{\x20return\x20this.getter\x20!=\x20null\x20||\x20this.setter\x20!=\x20null;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isVariable()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x20return\x20this.getTypeNameEx(null).toString();\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rType\x20=\x20this.field.typeLink.type.specializeType(pattern,\x20replacement,\x20checker,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rType\x20!=\x20this.field.typeLink.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldDef\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20FieldSymbol(this.name,\x200,\x20checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.canWrite,\x20fieldDef);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.flags\x20=\x20this.flags;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldDef.symbol\x20=\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldDef.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.setType(rType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.typeCheckStatus\x20=\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocComments():\x20Comment[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.getter\x20!=\x20null\x20||\x20this.setter\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comments\x20:\x20Comment[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.getter\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat(this.getter.getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.setter\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comments\x20=\x20comments.concat(this.setter.getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20comments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.declAST\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.declAST.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ParameterSymbol\x20extends\x20InferenceSymbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20name:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20location:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20paramDocComment:\x20string\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20funcDecl:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20string,\x20location:\x20number,\x20unitIndex:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20parameter:\x20ValueLocation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(name,\x20location,\x20name.length,\x20unitIndex);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.name\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.location\x20=\x20location;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kind()\x20{\x20return\x20SymbolKind.Parameter;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeable()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getType()\x20{\x20return\x20this.parameter.typeLink.type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setType(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parameter.typeLink.type\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isVariable()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20argsOffset\x20=\x20(-1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isOptional()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parameter\x20&&\x20this.parameter.symbol\x20&&\x20this.parameter.symbol.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<ArgDecl>this.parameter.symbol.declAST).isOptional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeNameEx(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(this.getType().getScopedTypeNameEx(scope),\x20this.name\x20+\x20(this.isOptional()\x20?\x20\x22?\x22\x20:\x20\x22\x22)\x20+\x20\x22:\x20\x22,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x20return\x20this.getTypeNameEx(null).toString();\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rType\x20=\x20this.parameter.typeLink.type.specializeType(pattern,\x20replacement,\x20checker,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parameter.typeLink.type\x20!=\x20rType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramDef\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20ParameterSymbol(this.name,\x200,\x20checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.symbol\x20=\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.setType(rType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getParameterDocComments()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.paramDocComment)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parameterComments:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.funcDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fncDocComments\x20=\x20this.funcDecl.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramComment\x20=\x20Comment.getParameterDocCommentText(this.name,\x20fncDocComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(paramComment\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterComments.push(paramComment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20docComments\x20=\x20TypeScript.Comment.getDocCommentText(this.getDocComments());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(docComments\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterComments.push(docComments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.paramDocComment\x20=\x20parameterComments.join(\x22\x5cn\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.paramDocComment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20VariableSymbol\x20extends\x20InferenceSymbol\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(name:\x20string,\x20location:\x20number,\x20unitIndex:\x20number,\x20public\x20variable:\x20ValueLocation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(name,\x20location,\x20name.length,\x20unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kind()\x20{\x20return\x20SymbolKind.Variable;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20writeable()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getType()\x20{\x20return\x20this.variable.typeLink.type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeNameEx(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(this.getType().getScopedTypeNameEx(scope),\x20this.name\x20+\x20\x22:\x20\x22,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setType(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.variable.typeLink.type\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isVariable()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20enum\x20TokenID\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Keywords\x0a\x20\x20\x20\x20\x20\x20\x20\x20Any,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Bool,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Break,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Case,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Catch,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Class,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Const,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Continue,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Debugger,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Default,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Delete,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Do,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Else,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Enum,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Export,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Extends,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Declare,\x0a\x20\x20\x20\x20\x20\x20\x20\x20False,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Finally,\x0a\x20\x20\x20\x20\x20\x20\x20\x20For,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Function,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Constructor,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Get,\x0a\x20\x20\x20\x20\x20\x20\x20\x20If,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Implements,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Import,\x0a\x20\x20\x20\x20\x20\x20\x20\x20In,\x0a\x20\x20\x20\x20\x20\x20\x20\x20InstanceOf,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Interface,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Let,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Module,\x0a\x20\x20\x20\x20\x20\x20\x20\x20New,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Package,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Private,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Protected,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Public,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Return,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Set,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Static,\x0a\x20\x20\x20\x20\x20\x20\x20\x20String,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Super,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Switch,\x0a\x20\x20\x20\x20\x20\x20\x20\x20This,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Throw,\x0a\x20\x20\x20\x20\x20\x20\x20\x20True,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Try,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeOf,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Var,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Void,\x0a\x20\x20\x20\x20\x20\x20\x20\x20With,\x0a\x20\x20\x20\x20\x20\x20\x20\x20While,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Yield,\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Punctuation\x0a\x20\x20\x20\x20\x20\x20\x20\x20Semicolon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20OpenParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CloseParen,\x0a\x20\x20\x20\x20\x20\x20\x20\x20OpenBracket,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CloseBracket,\x0a\x20\x20\x20\x20\x20\x20\x20\x20OpenBrace,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CloseBrace,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comma,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Equals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20PlusEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20MinusEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AsteriskEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20SlashEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20PercentEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AmpersandEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20CaretEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BarEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LessThanLessThanEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThanGreaterThanEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThanGreaterThanGreaterThanEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Question,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Colon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BarBar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20AmpersandAmpersand,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Bar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Caret,\x0a\x20\x20\x20\x20\x20\x20\x20\x20And,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EqualsEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ExclamationEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EqualsEqualsEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20ExclamationEqualsEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LessThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LessThanEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThanEquals,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LessThanLessThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThanGreaterThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20GreaterThanGreaterThanGreaterThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Plus,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Minus,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Asterisk,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Slash,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Percent,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Tilde,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Exclamation,\x0a\x20\x20\x20\x20\x20\x20\x20\x20PlusPlus,\x0a\x20\x20\x20\x20\x20\x20\x20\x20MinusMinus,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Dot,\x0a\x20\x20\x20\x20\x20\x20\x20\x20DotDotDot,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Error,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EndOfFile,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EqualsGreaterThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StringLiteral,\x0a\x20\x20\x20\x20\x20\x20\x20\x20RegularExpressionLiteral,\x0a\x20\x20\x20\x20\x20\x20\x20\x20NumberLiteral,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Whitespace,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Lim,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LimFixed\x20=\x20EqualsGreaterThan,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LimKeyword\x20=\x20Yield,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20tokenTable\x20=\x20new\x20TokenInfo[];\x0a\x20\x20\x20\x20export\x20var\x20nodeTypeTable\x20=\x20new\x20string[];\x0a\x20\x20\x20\x20export\x20var\x20nodeTypeToTokTable\x20=\x20new\x20number[];\x0a\x20\x20\x20\x20export\x20var\x20noRegexTable\x20=\x20new\x20bool[];\x0a\x0a\x20\x20\x20\x20noRegexTable[TokenID.Identifier]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.StringLiteral]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.NumberLiteral]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.RegularExpressionLiteral]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.This]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.PlusPlus]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.MinusMinus]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.CloseParen]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.CloseBracket]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.CloseBrace]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.True]\x20=\x20true;\x0a\x20\x20\x20\x20noRegexTable[TokenID.False]\x20=\x20true;\x0a\x0a\x20\x20\x20\x20export\x20enum\x20OperatorPrecedence\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comma,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Assignment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Conditional,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogicalOr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20LogicalAnd,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BitwiseOr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BitwiseExclusiveOr,\x0a\x20\x20\x20\x20\x20\x20\x20\x20BitwiseAnd,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Equality,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Relational,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Shift,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Additive,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Multiplicative,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Unary,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Lim\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20Reservation\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Javascript\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20JavascriptFuture\x20=\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript\x20=\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20JavascriptFutureStrict\x20=\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScriptAndJS\x20=\x20Javascript\x20|\x20TypeScript,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScriptAndJSFuture\x20=\x20JavascriptFuture\x20|\x20TypeScript,\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScriptAndJSFutureStrict\x20=\x20JavascriptFutureStrict\x20|\x20TypeScript,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TokenInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20tokenId:\x20TokenID,\x20public\x20reservation:\x20Reservation,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20binopPrecedence:\x20number,\x20public\x20binopNodeType:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20unopPrecedence:\x20number,\x20public\x20unopNodeType:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20text:\x20string,\x20public\x20ers:\x20ErrorRecoverySet)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20setTokenInfo(tokenId:\x20TokenID,\x20reservation:\x20number,\x20binopPrecedence:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20binopNodeType:\x20number,\x20unopPrecedence:\x20number,\x20unopNodeType:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20text:\x20string,\x20ers:\x20ErrorRecoverySet)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenId\x20!==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20tokenTable[tokenId]\x20=\x20new\x20TokenInfo(tokenId,\x20reservation,\x20binopPrecedence,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binopNodeType,\x20unopPrecedence,\x20unopNodeType,\x20text,\x20ers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binopNodeType\x20!=\x20NodeType.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodeTypeTable[binopNodeType]\x20=\x20text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodeTypeToTokTable[binopNodeType]\x20=\x20tokenId;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(unopNodeType\x20!=\x20NodeType.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodeTypeTable[unopNodeType]\x20=\x20text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Any,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22any\x22,\x20ErrorRecoverySet.PrimType);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Bool,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22bool\x22,\x20ErrorRecoverySet.PrimType);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Break,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22break\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Case,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22case\x22,\x20ErrorRecoverySet.SCase);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Catch,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22catch\x22,\x20ErrorRecoverySet.Catch);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Class,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22class\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Const,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22const\x22,\x20ErrorRecoverySet.Var);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Continue,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22continue\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Debugger,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.Debugger,\x20\x22debugger\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Default,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22default\x22,\x20ErrorRecoverySet.SCase);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Delete,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.Delete,\x20\x22delete\x22,\x20ErrorRecoverySet.Prefix);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Do,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22do\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Else,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22else\x22,\x20ErrorRecoverySet.Else);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Enum,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22enum\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Export,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22export\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Extends,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22extends\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Declare,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22declare\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.False,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22false\x22,\x20ErrorRecoverySet.RLit);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Finally,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22finally\x22,\x20ErrorRecoverySet.Catch);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.For,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22for\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Function,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22function\x22,\x20ErrorRecoverySet.Func);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Constructor,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22constructor\x22,\x20ErrorRecoverySet.Func);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Get,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22get\x22,\x20ErrorRecoverySet.Func);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Set,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22set\x22,\x20ErrorRecoverySet.Func);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.If,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22if\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Implements,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22implements\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Import,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22import\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.In,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.Relational,\x20NodeType.In,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22in\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.InstanceOf,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.Relational,\x20NodeType.InstOf,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22instanceof\x22,\x20ErrorRecoverySet.BinOp);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Interface,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22interface\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Let,\x20Reservation.JavascriptFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22let\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Module,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22module\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.New,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22new\x22,\x20ErrorRecoverySet.PreOp);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Number,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22number\x22,\x20ErrorRecoverySet.PrimType);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Null,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22null\x22,\x20ErrorRecoverySet.RLit);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Package,\x20Reservation.JavascriptFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22package\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Private,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22private\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Protected,\x20Reservation.JavascriptFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22protected\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Public,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22public\x22,\x20ErrorRecoverySet.TypeScriptS);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Return,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22return\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Static,\x20Reservation.TypeScriptAndJSFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22static\x22,\x20ErrorRecoverySet.None);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.String,\x20Reservation.TypeScript,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22string\x22,\x20ErrorRecoverySet.PrimType);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Super,\x20Reservation.TypeScriptAndJSFuture,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22super\x22,\x20ErrorRecoverySet.RLit);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Switch,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22switch\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.This,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22this\x22,\x20ErrorRecoverySet.RLit);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Throw,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22throw\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.True,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22true\x22,\x20ErrorRecoverySet.RLit);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Try,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22try\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.TypeOf,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.Typeof,\x20\x22typeof\x22,\x20ErrorRecoverySet.Prefix);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Var,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22var\x22,\x20ErrorRecoverySet.Var);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Void,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.Void,\x20\x22void\x22,\x20ErrorRecoverySet.Prefix);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.With,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.With,\x20\x22with\x22,\x20ErrorRecoverySet.Stmt);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.While,\x20Reservation.TypeScriptAndJS,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22while\x22,\x20ErrorRecoverySet.While);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Yield,\x20Reservation.JavascriptFutureStrict,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22yield\x22,\x20ErrorRecoverySet.None);\x0a\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Identifier,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22identifier\x22,\x20ErrorRecoverySet.ID);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.NumberLiteral,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22numberLiteral\x22,\x20ErrorRecoverySet.Literal);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.RegularExpressionLiteral,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22regex\x22,\x20ErrorRecoverySet.RegExp);\x0a\x20\x20\x20\x20setTokenInfo(TokenID.StringLiteral,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22qstring\x22,\x20ErrorRecoverySet.Literal);\x0a\x0a\x20\x20\x20\x20//\x20Non-operator\x20non-identifier\x20tokens\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Semicolon,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22;\x22,\x20ErrorRecoverySet.SColon);\x20//\x20;\x0a\x20\x20\x20\x20setTokenInfo(TokenID.CloseParen,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22)\x22,\x20ErrorRecoverySet.RParen);\x20//\x20)\x0a\x20\x20\x20\x20setTokenInfo(TokenID.CloseBracket,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22]\x22,\x20ErrorRecoverySet.RBrack);\x20//\x20]\x0a\x20\x20\x20\x20setTokenInfo(TokenID.OpenBrace,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22{\x22,\x20ErrorRecoverySet.LCurly);\x20//\x20{\x0a\x20\x20\x20\x20setTokenInfo(TokenID.CloseBrace,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22}\x22,\x20ErrorRecoverySet.RCurly);\x20//\x20}\x0a\x20\x20\x20\x20setTokenInfo(TokenID.DotDotDot,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22...\x22,\x20ErrorRecoverySet.None);\x20//\x20...\x0a\x0a\x20\x20\x20\x20//\x20Operator\x20non-identifier\x20tokens\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Comma,\x20Reservation.None,\x20OperatorPrecedence.Comma,\x20NodeType.Comma,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22,\x22,\x20ErrorRecoverySet.Comma);\x20//\x20,\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Equals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.Asg,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22=\x22,\x20ErrorRecoverySet.Asg);\x20//\x20=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.PlusEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgAdd,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22+=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20+=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.MinusEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgSub,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22-=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20-=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.AsteriskEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgMul,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22*=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20*=\x0a\x0a\x20\x20\x20\x20setTokenInfo(TokenID.SlashEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgDiv,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22/=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20/=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.PercentEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgMod,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22%=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20%=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.AmpersandEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgAnd,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22&=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20&=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.CaretEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgXor,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22^=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20^=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.BarEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgOr,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22|=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20|=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.LessThanLessThanEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgLsh,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22<<=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20<<=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThanGreaterThanEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgRsh,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>>=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>>=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals,\x20Reservation.None,\x20OperatorPrecedence.Assignment,\x20NodeType.AsgRs2,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>>>=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>>>=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Question,\x20Reservation.None,\x20OperatorPrecedence.Conditional,\x20NodeType.ConditionalExpression,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22?\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20?\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Colon,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22:\x22,\x20ErrorRecoverySet.Colon);\x20//\x20:\x0a\x20\x20\x20\x20setTokenInfo(TokenID.BarBar,\x20Reservation.None,\x20OperatorPrecedence.LogicalOr,\x20NodeType.LogOr,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22||\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20||\x0a\x20\x20\x20\x20setTokenInfo(TokenID.AmpersandAmpersand,\x20Reservation.None,\x20OperatorPrecedence.LogicalAnd,\x20NodeType.LogAnd,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22&&\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20&&\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Bar,\x20Reservation.None,\x20OperatorPrecedence.BitwiseOr,\x20NodeType.Or,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22|\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20|\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Caret,\x20Reservation.None,\x20OperatorPrecedence.BitwiseExclusiveOr,\x20NodeType.Xor,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22^\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20^\x0a\x20\x20\x20\x20setTokenInfo(TokenID.And,\x20Reservation.None,\x20OperatorPrecedence.BitwiseAnd,\x20NodeType.And,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22&\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20&\x0a\x20\x20\x20\x20setTokenInfo(TokenID.EqualsEquals,\x20Reservation.None,\x20OperatorPrecedence.Equality,\x20NodeType.Eq,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22==\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20==\x0a\x20\x20\x20\x20setTokenInfo(TokenID.ExclamationEquals,\x20Reservation.None,\x20OperatorPrecedence.Equality,\x20NodeType.Ne,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22!=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20!=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.EqualsEqualsEquals,\x20Reservation.None,\x20OperatorPrecedence.Equality,\x20NodeType.Eqv,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22===\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20===\x0a\x20\x20\x20\x20setTokenInfo(TokenID.ExclamationEqualsEquals,\x20Reservation.None,\x20OperatorPrecedence.Equality,\x20NodeType.NEqv,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22!==\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20!==\x0a\x20\x20\x20\x20setTokenInfo(TokenID.LessThan,\x20Reservation.None,\x20OperatorPrecedence.Relational,\x20NodeType.Lt,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22<\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20<\x0a\x20\x20\x20\x20setTokenInfo(TokenID.LessThanEquals,\x20Reservation.None,\x20OperatorPrecedence.Relational,\x20NodeType.Le,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22<=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20<=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThan,\x20Reservation.None,\x20OperatorPrecedence.Relational,\x20NodeType.Gt,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThanEquals,\x20Reservation.None,\x20OperatorPrecedence.Relational,\x20NodeType.Ge,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>=\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>=\x0a\x20\x20\x20\x20setTokenInfo(TokenID.LessThanLessThan,\x20Reservation.None,\x20OperatorPrecedence.Shift,\x20NodeType.Lsh,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22<<\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20<<\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThanGreaterThan,\x20Reservation.None,\x20OperatorPrecedence.Shift,\x20NodeType.Rsh,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>>\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>>\x0a\x20\x20\x20\x20setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan,\x20Reservation.None,\x20OperatorPrecedence.Shift,\x20NodeType.Rs2,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22>>>\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20>>>\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Plus,\x20Reservation.None,\x20OperatorPrecedence.Additive,\x20NodeType.Add,\x20OperatorPrecedence.Unary,\x20NodeType.Pos,\x20\x22+\x22,\x20ErrorRecoverySet.AddOp);\x20//\x20+\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Minus,\x20Reservation.None,\x20OperatorPrecedence.Additive,\x20NodeType.Sub,\x20OperatorPrecedence.Unary,\x20NodeType.Neg,\x20\x22-\x22,\x20ErrorRecoverySet.AddOp);\x20//\x20-\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Asterisk,\x20Reservation.None,\x20OperatorPrecedence.Multiplicative,\x20NodeType.Mul,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22*\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20*\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Slash,\x20Reservation.None,\x20OperatorPrecedence.Multiplicative,\x20NodeType.Div,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22/\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20/\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Percent,\x20Reservation.None,\x20OperatorPrecedence.Multiplicative,\x20NodeType.Mod,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22%\x22,\x20ErrorRecoverySet.BinOp);\x20//\x20%\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Tilde,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.Not,\x20\x22~\x22,\x20ErrorRecoverySet.PreOp);\x20//\x20~\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Exclamation,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.LogNot,\x20\x22!\x22,\x20ErrorRecoverySet.PreOp);\x20//\x20!\x0a\x20\x20\x20\x20setTokenInfo(TokenID.PlusPlus,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.IncPre,\x20\x22++\x22,\x20ErrorRecoverySet.PreOp);\x20//\x20++\x0a\x20\x20\x20\x20setTokenInfo(TokenID.MinusMinus,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.Unary,\x20NodeType.DecPre,\x20\x22--\x22,\x20ErrorRecoverySet.PreOp);\x20//\x20--\x0a\x20\x20\x20\x20setTokenInfo(TokenID.OpenParen,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22(\x22,\x20ErrorRecoverySet.LParen);\x20//\x20(\x0a\x20\x20\x20\x20setTokenInfo(TokenID.OpenBracket,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22[\x22,\x20ErrorRecoverySet.LBrack);\x20//\x20[\x0a\x20\x20\x20\x20setTokenInfo(TokenID.Dot,\x20Reservation.None,\x20OperatorPrecedence.Unary,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22.\x22,\x20ErrorRecoverySet.Dot);\x20//\x20.\x0a\x20\x20\x20\x20setTokenInfo(TokenID.EndOfFile,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22<EOF>\x22,\x20ErrorRecoverySet.EOF);\x20//\x20EOF\x0a\x20\x20\x20\x20setTokenInfo(TokenID.EqualsGreaterThan,\x20Reservation.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20OperatorPrecedence.None,\x20NodeType.None,\x20\x22=>\x22,\x20ErrorRecoverySet.None);\x20//\x20=>\x0a\x0a\x20\x20\x20\x20export\x20function\x20lookupToken(tokenId:\x20TokenID):\x20TokenInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20tokenTable[tokenId];\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Punctuation,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Keyword,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Operator,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Comment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Whitespace,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Identifier,\x0a\x20\x20\x20\x20\x20\x20\x20\x20NumberLiteral,\x0a\x20\x20\x20\x20\x20\x20\x20\x20StringLiteral,\x0a\x20\x20\x20\x20\x20\x20\x20\x20RegExpLiteral,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20SavedToken\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20tok:\x20Token,\x20public\x20minChar:\x20number,\x20public\x20limChar:\x20number)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20tokenId:\x20TokenID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22token:\x20\x22\x20+\x20this.tokenId\x20+\x20\x22\x20\x22\x20+\x20this.getText()\x20+\x20\x22\x20(\x22\x20+\x20(<any>TokenID)._map[this.tokenId]\x20+\x20\x22)\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(line:\x20number,\x20outfile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(this.toString()\x20+\x20\x22,on\x20line\x22\x20+\x20line);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tokenTable[this.tokenId].text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.tokenId\x20<=\x20TokenID.LimKeyword)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Keyword;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tokenInfo\x20=\x20lookupToken(this.tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tokenInfo\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((tokenInfo.unopNodeType\x20!=\x20NodeType.None)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(tokenInfo.binopNodeType\x20!=\x20NodeType.None))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Operator;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Punctuation;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20NumberLiteralToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20value:\x20number,\x20public\x20hasEmptyFraction?:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(TokenID.NumberLiteral);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.hasEmptyFraction\x20?\x20this.value.toString()\x20+\x20\x22.0\x22\x20:\x20this.value.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.NumberLiteral;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20StringLiteralToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20value:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(TokenID.StringLiteral);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.StringLiteral;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20IdentifierToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20value:\x20string,\x20public\x20hasEscapeSequence\x20:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(TokenID.Identifier);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Identifier;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20WhitespaceToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(tokenId:\x20TokenID,\x20public\x20value:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(tokenId);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Whitespace;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20CommentToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(tokenID:\x20TokenID,\x20public\x20value:\x20string,\x20public\x20isBlock:\x20bool,\x20public\x20startPos:\x20number,\x20public\x20line:\x20number,\x20public\x20endsLine:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(tokenID);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.Comment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20RegularExpressionLiteralToken\x20extends\x20Token\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor(public\x20regex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super(TokenID.RegularExpressionLiteral);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getText():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.regex.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classification():\x20TokenClass\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TokenClass.RegExpLiteral;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20TODO:\x20new\x20with\x20length\x20TokenID.LimFixed\x0a\x20\x20\x20\x20export\x20var\x20staticTokens\x20=\x20new\x20Token[];\x0a\x20\x20\x20\x20export\x20function\x20initializeStaticTokens()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<=\x20TokenID.LimFixed;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20staticTokens[i]\x20=\x20new\x20Token(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27/>\x0a///<reference\x20path=\x27io.ts\x27/>\x0a///<reference\x20path=\x27optionsParser.ts\x27/>\x0a\x0aclass\x20CommandLineHost\x20implements\x20TypeScript.IResolverHost\x20{\x0a\x0a\x20\x20\x20\x20public\x20pathMap:\x20any\x20=\x20{};\x0a\x20\x20\x20\x20public\x20resolvedPaths:\x20any\x20=\x20{};\x0a\x0a\x20\x20\x20\x20constructor(public\x20compilationSettings:\x20TypeScript.CompilationSettings)\x20{\x20\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20getPathIdentifier(path:\x20string)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.compilationSettings.useCaseSensitiveFileResolution\x20?\x20path\x20:\x20path.toLocaleUpperCase();\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20isResolved(path:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])]\x20!=\x20undefined;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20resolveCompilationEnvironment(preEnv:\x20TypeScript.CompilationEnvironment,\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolver:\x20TypeScript.ICodeResolver,\x0a\x20\x20\x20\x20\x20\x20\x20\x20traceDependencies:\x20bool):\x20TypeScript.CompilationEnvironment\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolvedEnv\x20=\x20new\x20TypeScript.CompilationEnvironment(preEnv.compilationSettings,\x20preEnv.ioHost);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20nCode\x20=\x20preEnv.code.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20postResolutionError\x20=\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(errorFile:\x20string,\x20errorMessage:\x20string)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.CompilerDiagnostics.debugPrint(\x22Could\x20not\x20resolve\x20file\x20\x27\x22\x20+\x20errorFile\x20+\x20\x22\x27\x22\x20+\x20(errorMessage\x20==\x20\x22\x22\x20?\x20\x22\x22\x20:\x20\x22:\x20\x22\x20+\x20errorMessage));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolutionDispatcher:\x20TypeScript.IResolutionDispatcher\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postResolutionError:\x20postResolutionError,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postResolution:\x20(path:\x20string,\x20code:\x20TypeScript.ISourceText)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pathId\x20=\x20this.getPathIdentifier(path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.resolvedPaths[pathId])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedEnv.code.push(<TypeScript.SourceUnit>code);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedPaths[pathId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20nCode;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x20=\x20TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.pathMap[preEnv.code[i].path]\x20=\x20path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolver.resolveCode(path,\x20\x22\x22,\x20false,\x20resolutionDispatcher);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20resolvedEnv;\x0a\x20\x20\x20\x20}\x0a}\x0aclass\x20BatchCompiler\x20{\x0a\x20\x20\x20\x20public\x20compilationSettings:\x20TypeScript.CompilationSettings;\x0a\x20\x20\x20\x20public\x20compilationEnvironment:\x20TypeScript.CompilationEnvironment;\x0a\x20\x20\x20\x20public\x20resolvedEnvironment:\x20TypeScript.CompilationEnvironment\x20=\x20null;\x0a\x20\x20\x20\x20public\x20hasResolveErrors:\x20bool\x20=\x20false;\x0a\x20\x20\x20\x20public\x20compilerVersion\x20=\x20\x220.8.2.0\x22;\x0a\x20\x20\x20\x20public\x20printedVersion\x20=\x20false;\x0a\x0a\x20\x20\x20\x20constructor\x20(public\x20ioHost:\x20IIO)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings\x20=\x20new\x20TypeScript.CompilationSettings();\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.compilationEnvironment\x20=\x20new\x20TypeScript.CompilationEnvironment(this.compilationSettings,\x20this.ioHost);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20resolve()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolver\x20=\x20new\x20TypeScript.CodeResolver(this.compilationEnvironment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20commandLineHost\x20=\x20new\x20CommandLineHost(this.compilationSettings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20ret\x20=\x20commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment,\x20resolver,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Reset\x20resolve\x20error\x20status\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.hasResolveErrors\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.compilationEnvironment.code.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!commandLineHost.isResolved(this.compilationEnvironment.code[i].path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hasResolveErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20this.compilationEnvironment.code[i].path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!TypeScript.isSTRFile(path)\x20&&\x20!TypeScript.isDSTRFile(path)\x20&&\x20!TypeScript.isTSFile(path)\x20&&\x20!TypeScript.isDTSFile(path))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.stderr.WriteLine(\x22Unknown\x20extension\x20for\x20file:\x20\x5c\x22\x22+path+\x22\x5c\x22.\x20Only\x20.ts\x20and\x20.d.ts\x20extensions\x20are\x20allowed.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.stderr.WriteLine(\x22Error\x20reading\x20file\x20\x5c\x22\x22\x20+\x20path\x20+\x20\x22\x5c\x22:\x20File\x20not\x20found\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ret;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20///\x20Do\x20the\x20actual\x20compilation\x20reading\x20from\x20input\x20files\x20and\x0a\x20\x20\x20\x20///\x20writing\x20to\x20output\x20file(s).\x0a\x20\x20\x20\x20public\x20compile():\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20compiler:\x20TypeScript.TypeScriptCompiler;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20compiler\x20=\x20new\x20TypeScript.TypeScriptCompiler(this.ioHost.stderr,\x20new\x20TypeScript.NullLogger(),\x20this.compilationSettings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20compiler.setErrorOutput(this.ioHost.stderr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20compiler.setErrorCallback(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(minChar,\x20charLen,\x20message,\x20unitIndex)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.errorReporter.hasErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fname\x20=\x20this.resolvedEnvironment.code[unitIndex].path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lineCol\x20=\x20{\x20line:\x20-1,\x20col:\x20-1\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.parser.getSourceLineCol(lineCol,\x20minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20line\x20is\x201-base,\x20col,\x20however,\x20is\x200-base.\x20add\x201\x20to\x20the\x20col\x20before\x20printing\x20the\x20message\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20msg\x20=\x20fname\x20+\x20\x22\x20(\x22\x20+\x20lineCol.line\x20+\x20\x22,\x22\x20+\x20(lineCol.col\x20+\x201)\x20+\x20\x22):\x20\x22\x20+\x20message;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.stderr.WriteLine(msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20SyntaxError(msg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.emitComments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.emitCommentsToOutput();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20consumeUnit\x20=\x20(code:\x20TypeScript.SourceUnit,\x20addAsResident:\x20bool)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20file\x20resolving\x20is\x20disabled,\x20the\x20file\x27s\x20content\x20will\x20not\x20yet\x20be\x20loaded\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.compilationSettings.resolve)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20code.content\x20=\x20this.ioHost.readFile(code.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20declaration\x20files\x20are\x20going\x20to\x20be\x20emitted,\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20preprocess\x20the\x20file\x20contents\x20and\x20add\x20in\x20referenced\x20files\x20as\x20well\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.generateDeclarationFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.CompilerDiagnostics.assert(code.referencedFiles\x20==\x20null,\x20\x22With\x20no\x20resolve\x20option,\x20referenced\x20files\x20need\x20to\x20null\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20code.referencedFiles\x20=\x20TypeScript.getReferencedFiles(code);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(code.content\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.parseOnly)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.parseUnit(code.content,\x20code.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.errorRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.parser.setErrorRecovery(this.ioHost.stderr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.addUnit(code.content,\x20code.path,\x20addAsResident,\x20code.referencedFiles);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.errorReporter.hasErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20includes\x20syntax\x20errors\x20thrown\x20from\x20error\x20callback\x20if\x20not\x20in\x20recovery\x20mode\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.stderr.WriteLine(err.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iCode\x20=\x200\x20;\x20iCode\x20<\x20this.resolvedEnvironment.code.length;\x20iCode++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.compilationSettings.parseOnly\x20||\x20(iCode\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20consumeUnit(this.resolvedEnvironment.code[iCode],\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20emitterIOHost\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createFile:\x20(fileName:\x20string,\x20useUTF8?:\x20bool)\x20=>\x20IOUtils.createFileAndFolderStructure(this.ioHost,\x20fileName,\x20useUTF8),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20directoryExists:\x20this.ioHost.directoryExists,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fileExists:\x20this.ioHost.fileExists,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvePath:\x20this.ioHost.resolvePath\x0a\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.compilationSettings.parseOnly)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.typeCheck();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.emit(emitterIOHost);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.emitDeclarations();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.emitAST(emitterIOHost);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(err)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20compiler.errorReporter.hasErrors\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Catch\x20emitter\x20exceptions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(err.message\x20!=\x20\x22EmitError\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20err;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20compiler.errorReporter.hasErrors;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20Execute\x20the\x20provided\x20inputs\x0a\x20\x20\x20\x20public\x20run()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.compilationEnvironment.code.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unit\x20=\x20this.compilationEnvironment.code[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outputFileName:\x20string\x20=\x20unit.path;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(TypeScript.isTSFile(outputFileName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outputFileName\x20=\x20outputFileName.replace(/\x5c.ts$/,\x20\x22.js\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(TypeScript.isSTRFile(outputFileName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outputFileName\x20=\x20outputFileName.replace(/\x5c.str$/,\x20\x22.js\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ioHost.fileExists(outputFileName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unitRes\x20=\x20this.ioHost.readFile(outputFileName)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.run(unitRes,\x20outputFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20///\x20Begin\x20batch\x20compilation\x0a\x20\x20\x20\x20public\x20batchCompile()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.CompilerDiagnostics.diagnosticWriter\x20=\x20{\x20Alert:\x20(s:\x20string)\x20=>\x20{\x20this.ioHost.printLine(s);\x20}\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20code:\x20TypeScript.SourceUnit;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20opts\x20=\x20new\x20OptionsParser(this.ioHost);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.option(\x27out\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Concatenate\x20and\x20emit\x20output\x20to\x20single\x20file\x20|\x20Redirect\x20output\x20structure\x20to\x20the\x20directory\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\x27file|directory\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20(str)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.outputOption\x20=\x20str;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.option(\x27style\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Select\x20style\x20checking\x20options\x20(examples\x20--style\x20requireSemi:off\x20or\x20--style\x20\x22eqeqeq;bitwise:off\x22)\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20(str)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.setStyleOptions(str);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27sourcemap\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Generates\x20corresponding\x20.map\x20file\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.mapSourceFiles\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27declaration\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Generates\x20corresponding\x20.d.ts\x20file\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.generateDeclarationFiles\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ioHost.watchFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27watch\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Watch\x20output\x20files\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.watch\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27w\x27);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27exec\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Execute\x20the\x20script\x20after\x20compilation\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.exec\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27e\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27parse\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Parse\x20only\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.parseOnly\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27minw\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Minimize\x20whitespace\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x20this.compilationSettings.minWhitespace\x20=\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27mw\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27const\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Propagate\x20constants\x20to\x20emitted\x20code\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x20this.compilationSettings.propagateConstants\x20=\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27errorrecovery\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Enable\x20error\x20recovery\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.errorRecovery\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27er\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27comments\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Emit\x20comments\x20to\x20output\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.emitComments\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27c\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27cflow\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Control\x20flow\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.controlFlow\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27cflowp\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Print\x20control\x20flow\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.controlFlow\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.printControlFlow\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27cflowu\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Print\x20Use\x20Def\x20control\x20flow\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.controlFlow\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.controlFlowUseDef\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27noerroronwith\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Allow\x20with\x20statements\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.errorOnWith\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27noresolve\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Skip\x20resolution\x20and\x20preprocessing\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.resolve\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.preprocess\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27debug\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Print\x20debug\x20output\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.CompilerDiagnostics.debug\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27canCallDefinitionSignature\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Allows\x20you\x20to\x20call\x20the\x20definition\x20signature\x20of\x20an\x20overload\x20group\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.canCallDefinitionSignature\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27nooptimizemodules\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Do\x20not\x20optimize\x20module\x20codegen\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.optimizeModuleCodeGen\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27nolib\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Do\x20not\x20include\x20a\x20default\x20lib.d.ts\x20with\x20global\x20declarations\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.useDefaultLib\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27inferProperties\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Infer\x20class\x20properties\x20from\x20top-level\x20assignments\x20to\x20\x5c\x27this\x5c\x27\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.inferPropertiesFromThisAssignment\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.option(\x27target\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Specify\x20ECMAScript\x20target\x20version:\x20\x22ES3\x22\x20(default),\x20or\x20\x22ES5\x22\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\x27VER\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20(type)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20type.toLowerCase();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20===\x20\x27es3\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.codeGenTarget\x20=\x20TypeScript.CodeGenTarget.ES3;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(type\x20===\x20\x27es5\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.codeGenTarget\x20=\x20TypeScript.CodeGenTarget.ES5;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22ECMAScript\x20target\x20version\x20\x27\x22\x20+\x20type\x20+\x20\x22\x27\x20not\x20supported.\x20\x20Using\x20default\x20\x27ES3\x27\x20code\x20generation\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.option(\x27module\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Specify\x20module\x20code\x20generation:\x20\x22commonjs\x22\x20(default)\x20or\x20\x22amd\x22\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\x27kind\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20(type)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type\x20=\x20type.toLowerCase();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20===\x20\x27commonjs\x27\x20||\x20type\x20===\x20\x27node\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.moduleGenTarget\x20=\x20TypeScript.ModuleGenTarget.Synchronous;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(type\x20===\x20\x27amd\x27)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.moduleGenTarget\x20=\x20TypeScript.ModuleGenTarget.Asynchronous;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22Module\x20code\x20generation\x20\x27\x22\x20+\x20type\x20+\x20\x22\x27\x20not\x20supported.\x20\x20Using\x20default\x20\x27commonjs\x27\x20code\x20generation\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20printedUsage\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27help\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Print\x20this\x20message\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printVersion();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20opts.printUsage();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printedUsage\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27h\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27useCaseSensitiveFileResolution\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Force\x20file\x20resolution\x20to\x20be\x20case\x20sensitive\x27,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20experimental:\x20true,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationSettings.useCaseSensitiveFileResolution\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.flag(\x27version\x27,\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usage:\x20\x27Print\x20the\x20compiler\x5c\x27s\x20version:\x20\x27\x20+\x20this.compilerVersion,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20set:\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printVersion();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20},\x20\x27v\x27);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20opts.parse(this.ioHost.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.useDefaultLib)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20compilerFilePath\x20=\x20this.ioHost.getExecutingFilePath()\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binDirPath\x20=\x20this.ioHost.dirName(compilerFilePath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20libStrPath\x20=\x20this.ioHost.resolvePath(binDirPath\x20+\x20\x22/lib.d.ts\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20code\x20=\x20new\x20TypeScript.SourceUnit(libStrPath,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationEnvironment.code.push(code);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20opts.unnamed.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20code\x20=\x20new\x20TypeScript.SourceUnit(opts.unnamed[i],\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationEnvironment.code.push(code);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20no\x20source\x20files\x20provided\x20to\x20compiler\x20-\x20print\x20usage\x20information\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationEnvironment.code.length\x20==\x20(this.compilationSettings.useDefaultLib\x20?\x201\x20:\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!printedUsage\x20&&\x20!this.printedVersion)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printVersion();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20opts.printUsage();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.quit(1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceFiles:\x20TypeScript.SourceUnit[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.watch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Capture\x20the\x20state\x20before\x20calling\x20resolve\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceFiles\x20=\x20this.compilationEnvironment.code.slice(0);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Resolve\x20file\x20dependencies,\x20if\x20requested\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedEnvironment\x20=\x20this.compilationSettings.resolve\x20?\x20this.resolve()\x20:\x20this.compilationEnvironment;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasCompileErrors\x20=\x20this.compile();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasErrors\x20=\x20hasCompileErrors\x20||\x20this.hasResolveErrors;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.exec)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.run();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.watch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Watch\x20will\x20cause\x20the\x20program\x20to\x20stick\x20around\x20as\x20long\x20as\x20the\x20files\x20exist\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.watchFiles(sourceFiles);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Exit\x20with\x20the\x20appropriate\x20error\x20code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.quit(hasErrors\x20?\x201\x20:\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20printVersion()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.printedVersion)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22Version\x20\x22\x20+\x20this.compilerVersion);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printedVersion\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20public\x20watchFiles(soruceFiles:\x20TypeScript.SourceUnit[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.ioHost.watchFile)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22Error:\x20Current\x20host\x20does\x20not\x20support\x20-w[atch]\x20option\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolvedFiles:\x20string[]\x20=\x20[]\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20watchers:\x20{\x20[x:\x20string]:\x20IFileWatcher;\x20}\x20=\x20{};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20addWatcher\x20=\x20(filename:\x20string)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!watchers[filename])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20watcher\x20=\x20this.ioHost.watchFile(filename,\x20onWatchedFileChange);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20watchers[filename]\x20=\x20watcher;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Cannot\x20watch\x20file,\x20it\x20is\x20already\x20watched.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20removeWatcher\x20=\x20(filename:\x20string)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(watchers[filename])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20watchers[filename].close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20delete\x20watchers[filename];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Cannot\x20stop\x20watching\x20file,\x20it\x20is\x20not\x20being\x20watched.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20onWatchedFileChange\x20=\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Reset\x20the\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compilationEnvironment.code\x20=\x20soruceFiles;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Resolve\x20file\x20dependencies,\x20if\x20requested\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedEnvironment\x20=\x20this.compilationSettings.resolve\x20?\x20this.resolve()\x20:\x20this.compilationEnvironment;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20if\x20any\x20new\x20files\x20were\x20added\x20to\x20the\x20environment\x20as\x20a\x20result\x20of\x20the\x20file\x20change\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldFiles\x20=\x20resolvedFiles;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newFiles:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedEnvironment.code.forEach((sf)\x20=>\x20newFiles.push(sf.path));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20newFiles\x20=\x20newFiles.sort();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200,\x20j\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(i\x20<\x20oldFiles.length\x20&&\x20j\x20<\x20newFiles.length)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20compareResult\x20=\x20oldFiles[i].localeCompare(newFiles[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(compareResult\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20No\x20change\x20here\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(compareResult\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Entry\x20in\x20old\x20list\x20does\x20not\x20exist\x20in\x20the\x20new\x20one,\x20it\x20was\x20removed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20removeWatcher(oldFiles[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20i++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Entry\x20in\x20new\x20list\x20does\x20exist\x20in\x20the\x20new\x20one,\x20it\x20was\x20added\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addWatcher(newFiles[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20j++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20All\x20remaining\x20unmatched\x20items\x20in\x20the\x20old\x20list\x20have\x20been\x20removed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x20i;\x20k\x20<\x20oldFiles.length;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20removeWatcher(oldFiles[k]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20All\x20remaing\x20unmatched\x20items\x20in\x20the\x20new\x20list\x20have\x20been\x20added\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x20j;\x20k\x20<\x20newFiles.length;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addWatcher(newFiles[k]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Update\x20the\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFiles\x20=\x20newFiles;;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Print\x20header\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.printLine(\x22Recompiling\x20(\x22\x20+\x20new\x20Date()\x20+\x20\x22):\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFiles.forEach((f)\x20=>\x20this.ioHost.printLine(\x22\x20\x20\x20\x20\x22\x20+\x20f));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Trigger\x20a\x20new\x20compilation\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasCompileErrors\x20=\x20this.compile();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasErrors\x20=\x20hasCompileErrors\x20||\x20this.hasResolveErrors;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.compilationSettings.exec)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.run();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Switch\x20to\x20using\x20stdout\x20for\x20all\x20error\x20messages\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.ioHost.stderr\x20=\x20this.ioHost.stdout;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Initialize\x20the\x20initial\x20list\x20of\x20resolved\x20files,\x20and\x20add\x20watches\x20to\x20them\x0a\x20\x20\x20\x20\x20\x20\x20\x20this.resolvedEnvironment.code.forEach((sf)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolvedFiles.push(sf.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addWatcher(sf.path);\x0a\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolvedFiles.sort();\x0a\x20\x20\x20\x20}\x0a}\x0a\x0a//\x20Start\x20the\x20batch\x20compilation\x20using\x20the\x20current\x20hosts\x20IO\x0avar\x20batch\x20=\x20new\x20BatchCompiler(IO);\x0abatch.batchCompile();\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20ArrayCache\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20arrayType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20arrayBase:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specialize(arrInstType:\x20Type,\x20checker:\x20TypeChecker):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.arrayBase\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.arrayBase\x20=\x20arrInstType.specializeType(checker.wildElm.type,\x20this.arrayType.elementType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.arrayBase;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeComparisonInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20onlyCaptureFirstError\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20flags:\x20TypeRelationshipFlags\x20=\x20TypeRelationshipFlags.SuccessfulComparison;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20message\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addMessageToFront(message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.onlyCaptureFirstError)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.message\x20=\x20this.message\x20?\x20message\x20+\x20\x22:\x5cn\x5ct\x22\x20+\x20this.message\x20:\x20message;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setMessage(message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setMessage(message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.message\x20=\x20message;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20SignatureData\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20parameters:\x20ParameterSymbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20nonOptionalParameterCount:\x20number;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ApplicableSignature\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20signature:\x20Signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20hadProvisionalErrors:\x20bool;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20enum\x20TypeCheckCollectionMode\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Resident,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Transient\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20PersistentGlobalTypeState\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20importedGlobalsTable\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20importedGlobalsTypeTable\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20importedGlobals:\x20SymbolScopeBuilder;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20transient\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globals:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globalTypes:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientGlobals:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientGlobalTypes:\x20IHashTable\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20resident\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentGlobalValues\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentGlobalTypes\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentGlobalAmbientValues\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentGlobalAmbientTypes\x20=\x20new\x20StringHashTable();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20dual\x20resident/transient\x20state\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x20shouldn\x27t\x20need\x20to\x20allocate\x20private\x20hash\x20tables\x20for\x20these,\x20since\x20there\x27s\x20no\x20private\x20global\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20In\x20general,\x20we\x20should\x20audit\x20each\x20instance\x20of\x20DualStringHashTable\x20to\x20ensure\x20that\x20both\x20the\x20primary\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20and\x20secondary\x20tables\x20are\x20necessary.\x20\x20If\x20it\x27s\x20not\x20necessary,\x20we\x20should\x20sub\x20in\x20a\x20constant\x20sentinel\x20value.\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20dualGlobalValues:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20dualGlobalTypes:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20dualAmbientGlobalValues:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20dualAmbientGlobalTypes:\x20DualStringHashTable;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globalScope:\x20SymbolScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20voidType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20booleanType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20doubleType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20stringType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20anyType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nullType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20undefinedType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Use\x20this\x20flag\x20to\x20turn\x20resident\x20checking\x20on\x20and\x20off\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20residentTypeCheck:\x20bool\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mod:\x20ModuleType\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20gloMod:\x20TypeSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20wildElm:\x20TypeSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20errorReporter:\x20ErrorReporter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.importedGlobals\x20=\x20new\x20SymbolScopeBuilder(null,\x20this.importedGlobalsTable,\x20null,\x20this.importedGlobalsTypeTable,\x20null,\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalValues\x20=\x20new\x20DualStringHashTable(this.residentGlobalValues,\x20new\x20StringHashTable());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalTypes\x20=\x20new\x20DualStringHashTable(this.residentGlobalTypes,\x20new\x20StringHashTable());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalValues\x20=\x20new\x20DualStringHashTable(this.residentGlobalAmbientValues,\x20new\x20StringHashTable());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalTypes\x20=\x20new\x20DualStringHashTable(this.residentGlobalAmbientTypes,\x20new\x20StringHashTable());\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dualGlobalScopedMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(this.dualGlobalValues,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dualGlobalScopedAmbientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(this.dualAmbientGlobalValues,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dualGlobalScopedEnclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(this.dualGlobalTypes,\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dualGlobalScopedAmbientEnclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(this.dualAmbientGlobalTypes,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalScope\x20=\x20new\x20SymbolScopeBuilder(dualGlobalScopedMembers,\x20dualGlobalScopedAmbientMembers,\x20dualGlobalScopedEnclosedTypes,\x20dualGlobalScopedAmbientEnclosedTypes,\x20this.importedGlobals,\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.voidType\x20=\x20this.enterPrimitive(Primitive.Void,\x20\x22void\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.booleanType\x20=\x20this.enterPrimitive(Primitive.Boolean,\x20\x22bool\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.doubleType\x20=\x20this.enterPrimitive(Primitive.Double,\x20\x22number\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.importedGlobals.ambientEnclosedTypes.addPublicMember(\x22number\x22,\x20this.doubleType.symbol);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stringType\x20=\x20this.enterPrimitive(Primitive.String,\x20\x22string\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.anyType\x20=\x20this.enterPrimitive(Primitive.Any,\x20\x22any\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nullType\x20=\x20this.enterPrimitive(Primitive.Null,\x20\x22null\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.undefinedType\x20=\x20this.enterPrimitive(Primitive.Undefined,\x20\x22undefined\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20shared\x20global\x20state\x20is\x20resident\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setCollectionMode(TypeCheckCollectionMode.Resident);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.wildElm\x20=\x20new\x20TypeSymbol(\x22_element\x22,\x20-1,\x200,\x20-1,\x20new\x20Type());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name,\x20this.wildElm);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mod\x20=\x20new\x20ModuleType(dualGlobalScopedEnclosedTypes,\x20dualGlobalScopedAmbientEnclosedTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mod.members\x20=\x20dualGlobalScopedMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mod.ambientMembers\x20=\x20dualGlobalScopedAmbientMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mod.containedScope\x20=\x20this.globalScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.gloMod\x20=\x20new\x20TypeSymbol(globalId,\x20-1,\x200,\x20-1,\x20this.mod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.mod.members.addPublicMember(this.gloMod.name,\x20this.gloMod);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.defineGlobalValue(\x22undefined\x22,\x20this.undefinedType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enterPrimitive(flags:\x20number,\x20name:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20primitive\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20primitive.primitiveTypeClass\x20=\x20flags;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20new\x20TypeSymbol(name,\x20-1,\x20name.length,\x20-1,\x20primitive);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.typeCheckStatus\x20=\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20primitive.symbol\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.importedGlobals.enter(null,\x20null,\x20symbol,\x20this.errorReporter,\x20true,\x20true,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20primitive;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setCollectionMode(mode:\x20TypeCheckCollectionMode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.residentTypeCheck\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalValues.insertPrimary\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalTypes.insertPrimary\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalValues.insertPrimary\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalTypes.insertPrimary\x20=\x20mode\x20==\x20TypeCheckCollectionMode.Resident;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20refreshPersistentState()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globals\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientGlobals\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientGlobalTypes\x20=\x20new\x20StringHashTable();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20add\x20global\x20types\x20to\x20the\x20global\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.voidType.symbol.name,\x20this.voidType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.booleanType.symbol.name,\x20this.booleanType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.doubleType.symbol.name,\x20this.doubleType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(\x22number\x22,\x20this.doubleType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.stringType.symbol.name,\x20this.stringType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.anyType.symbol.name,\x20this.anyType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.nullType.symbol.name,\x20this.nullType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes.add(this.undefinedType.symbol.name,\x20this.undefinedType.symbol);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalValues.secondaryTable\x20=\x20this.globals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualGlobalTypes.secondaryTable\x20=\x20this.globalTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalValues.secondaryTable\x20=\x20this.ambientGlobals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.dualAmbientGlobalTypes.secondaryTable\x20=\x20this.ambientGlobalTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20defineGlobalValue(name:\x20string,\x20type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20valueLocation\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20valueLocation.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20new\x20VariableSymbol(name,\x200,\x20-1,\x20valueLocation);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.setType(type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.typeCheckStatus\x20=\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.container\x20=\x20this.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.importedGlobalsTable.addPublicMember(name,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ContextualTypeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20targetSig:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20targetThis:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20targetAccessorType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20contextualType:\x20Type,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20provisional:\x20bool,\x20public\x20contextID:\x20number)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ContextualTypingContextStack\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20contextStack:\x20ContextualTypeContext[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20contextID\x20=\x20TypeCheckStatus.Finished\x20+\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushContextualType(type:\x20Type,\x20provisional:\x20bool)\x20{\x20this.contextStack.push(new\x20ContextualTypeContext(type,\x20provisional,\x20ContextualTypingContextStack.contextID++));\x20this.checker.errorReporter.pushToErrorSink\x20=\x20provisional;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hadProvisionalErrors\x20=\x20false;\x20//\x20somewhere\x20in\x20the\x20chain\x20a\x20provisional\x20typecheck\x20error\x20was\x20thrown\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20popContextualType()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tc\x20=\x20this.contextStack.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.pushToErrorSink\x20=\x20this.isProvisional();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.hadProvisionalErrors\x20=\x20this.hadProvisionalErrors\x20||\x20(tc.provisional\x20&&\x20(this.checker.errorReporter.getCapturedErrors().length));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.freeCapturedErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20tc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getContextualType():\x20ContextualTypeContext\x20{\x20return\x20(!this.contextStack.length\x20?\x20null\x20:\x20this.contextStack[this.contextStack.length\x20-\x201]);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getContextID()\x20{\x20return\x20(!this.contextStack.length\x20?\x20TypeCheckStatus.Finished\x20:\x20this.contextStack[this.contextStack.length\x20-\x201].contextID);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isProvisional()\x20{\x20return\x20(!this.contextStack.length\x20?\x20false\x20:\x20this.contextStack[this.contextStack.length\x20-\x201].provisional);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20checker:\x20TypeChecker)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeChecker\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorReporter:\x20ErrorReporter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globalScope:\x20SymbolScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkControlFlow\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20printControlFlowGraph\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkControlFlowUseDef\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20styleSettings:\x20StyleSettings\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20units:\x20LocationInfo[]\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20voidType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20booleanType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20numberType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20stringType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20anyType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nullType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20undefinedType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20anon\x20=\x20\x22_anonymous\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globals:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globalTypes:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientGlobals:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientGlobalTypes:\x20DualStringHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20gloModType:\x20ModuleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20gloMod:\x20TypeSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20wildElm:\x20TypeSymbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20locationInfo:\x20LocationInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeFlow:\x20TypeFlow\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentCompareA:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentCompareB:\x20Symbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentModDecl:\x20ModuleDeclaration\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inBind\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inWith\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorsOnWith\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typingContextStack:\x20ContextualTypingContextStack;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentContextualTypeContext:\x20ContextualTypeContext\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolvingBases\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20canCallDefinitionSignature\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20assignableCache:\x20any[]\x20=\x20<any>{};\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20subtypeCache:\x20any[]\x20=\x20<any>{};\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20identicalCache:\x20any[]\x20=\x20<any>{};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20provisionalStartedTypecheckObjects:\x20PhasedTypecheckObject[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mustCaptureGlobalThis\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20persistentState:\x20PersistentGlobalTypeState)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.voidType\x20=\x20this.persistentState.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.booleanType\x20=\x20this.persistentState.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.numberType\x20=\x20this.persistentState.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stringType\x20=\x20this.persistentState.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.anyType\x20=\x20this.persistentState.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nullType\x20=\x20this.persistentState.nullType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.undefinedType\x20=\x20this.persistentState.undefinedType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globals\x20=\x20this.persistentState.dualGlobalValues;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalTypes\x20=\x20this.persistentState.dualGlobalTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientGlobals\x20=\x20this.persistentState.dualAmbientGlobalValues;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientGlobalTypes\x20=\x20this.persistentState.dualAmbientGlobalTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.gloModType\x20=\x20this.persistentState.mod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.gloMod\x20=\x20this.persistentState.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.wildElm\x20=\x20this.persistentState.wildElm;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalScope\x20=\x20this.persistentState.globalScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typingContextStack\x20=\x20new\x20ContextualTypingContextStack(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setStyleOptions(style:\x20StyleSettings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.styleSettings\x20=\x20style;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Contextual\x20typing\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setContextualType(type:\x20Type,\x20provisional:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typingContextStack.pushContextualType(type,\x20provisional);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentContextualTypeContext\x20=\x20this.typingContextStack.getContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unsetContextualType()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lastTC\x20=\x20this.typingContextStack.popContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentContextualTypeContext\x20=\x20this.typingContextStack.getContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20lastTC;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hadProvisionalErrors()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.typingContextStack.hadProvisionalErrors;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resetProvisionalErrors()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.typingContextStack.getContextualType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typingContextStack.hadProvisionalErrors\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckWithContextualType(contextType:\x20Type,\x20provisional:\x20bool,\x20condition:\x20bool,\x20ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(condition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setContextualType(contextType,\x20this.typingContextStack.isProvisional()\x20||\x20provisional);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(condition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.unsetContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resetTargetType()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentContextualTypeContext\x20=\x20this.typingContextStack.getContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Unset\x20the\x20current\x20contextual\x20type\x20without\x20disturbing\x20the\x20stack,\x20effectively\x20\x22killing\x22\x20the\x20contextual\x20typing\x20process\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20killCurrentContextualType()\x20{\x20this.currentContextualTypeContext\x20=\x20null;\x20this.errorReporter.pushToErrorSink\x20=\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasTargetType()\x20{\x20return\x20this.currentContextualTypeContext\x20&&\x20this.currentContextualTypeContext.contextualType;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTargetTypeContext()\x20{\x20return\x20this.currentContextualTypeContext;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inProvisionalTypecheckMode()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.typingContextStack.isProvisional();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeCheckFinishedStatus()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inProvisionalTypecheckMode())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.typingContextStack.getContextID();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeStatusIsFinished(status:\x20TypeCheckStatus)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20status\x20==\x20TypeCheckStatus.Finished\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.inProvisionalTypecheckMode()\x20&&\x20status\x20==\x20this.typingContextStack.getContextID());\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addStartedPTO(pto:\x20PhasedTypecheckObject)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.inProvisionalTypecheckMode())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length]\x20=\x20pto;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cleanStartedPTO()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.provisionalStartedTypecheckObjects.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.provisionalStartedTypecheckObjects[i].typeCheckStatus\x20>=\x20this.typingContextStack.getContextID())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.provisionalStartedTypecheckObjects[i].typeCheckStatus\x20=\x20TypeCheckStatus.NotStarted;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.provisionalStartedTypecheckObjects\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20type\x20collection\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20collectTypes(ast:\x20AST):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Script)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.locationInfo\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20globalChain\x20=\x20new\x20ScopeChain(this.gloMod,\x20null,\x20this.globalScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20context\x20=\x20new\x20TypeCollectionContext(globalChain,\x20this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(ast,\x20preCollectTypes,\x20postCollectTypes,\x20null,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20makeArrayType(type:\x20Type):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.arrayCache\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.arrayCache\x20=\x20new\x20ArrayCache();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.arrayCache.arrayType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.arrayCache.arrayType.elementType\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.arrayCache.arrayType.symbol\x20=\x20type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20type.arrayCache.arrayType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getParameterList(funcDecl:\x20FuncDecl,\x20container:\x20Symbol):\x20SignatureData\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args\x20=\x20funcDecl.arguments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parameterTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parameterBuilder\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20args.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nonOptionalParams\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20ParameterSymbol[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterTable\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterBuilder\x20=\x20new\x20SymbolScopeBuilder(parameterTable,\x20null,\x20null,\x20null,\x20null,\x20container);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parameter\x20=\x20<ArgDecl>args.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramDef\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parameterSymbol\x20=\x20new\x20ParameterSymbol(parameter.id.text,\x20parameter.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.locationInfo.unitIndex,\x20paramDef);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterSymbol.declAST\x20=\x20parameter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterSymbol.funcDecl\x20=\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameter.id.sym\x20=\x20parameterSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameter.sym\x20=\x20parameterSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.symbol\x20=\x20parameterSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramDef.typeLink\x20=\x20getTypeLink(parameter.typeExpr,\x20this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameterBuilder.enter(null,\x20parameter,\x20parameterSymbol,\x20this.errorReporter,\x20true,\x20false,\x20false);\x20//\x20REVIEW:\x20Should\x20this\x20be\x20entered\x20into\x20the\x20private\x20scope?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result[result.length]\x20=\x20parameterSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!parameter.isOptionalArg())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nonOptionalParams++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20parameters:\x20result,\x20nonOptionalParameterCount:\x20nonOptionalParams\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20a\x20signature\x20for\x20a\x20function\x20definition\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20(E.g.,\x20has\x20a\x20function\x20body\x20-\x20function\x20declarations,\x20property\x20declarations,\x20lambdas)\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20createFunctionSignature(funcDecl:\x20FuncDecl,\x20container:\x20Symbol,\x20scope:\x20SymbolScope,\x20overloadGroupSym:\x20Symbol,\x20addToScope:\x20bool):\x20Signature\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Exported\x20|\x20FncFlags.ClassPropertyMethodExported)\x20||\x20container\x20==\x20this.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivate\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDefinition\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Definition);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isConstructor\x20=\x20funcDecl.isConstructMember()\x20||\x20funcDecl.isConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20container\x20==\x20this.gloMod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature:\x20Signature\x20=\x20new\x20Signature();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isLambda\x20=\x20funcDecl.fncFlags\x20&\x20FncFlags.IsFunctionExpression;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20a\x20return\x20type\x20has\x20been\x20declared\x20for\x20the\x20signature,\x20set\x20the\x20type\x20link.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Otherwise:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20if\x20it\x27s\x20a\x20signature,\x20its\x20type\x20will\x20be\x20\x27any\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20if\x20it\x27s\x20a\x20definition,\x20the\x20return\x20type\x20will\x20be\x20inferred\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.returnTypeAnnotation\x20||\x20isDefinition)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType\x20=\x20getTypeLink(funcDecl.returnTypeAnnotation,\x20this,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.hasVariableArgList\x20=\x20funcDecl.variableArgList;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sigData\x20=\x20this.getParameterList(funcDecl,\x20container);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.parameters\x20=\x20sigData.parameters;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.nonOptionalParameterCount\x20=\x20sigData.nonOptionalParameterCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.declAST\x20=\x20funcDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useOverloadGroupSym\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20overloadGroupSym\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20overloadGroupSym.getType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!overloadGroupSym.isAccessor()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(funcDecl.isSignature()\x20||\x20(isAmbient\x20==\x20hasFlag(overloadGroupSym.flags,\x20SymbolFlags.Ambient)));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(useOverloadGroupSym\x20&&\x20isPrivate\x20!=\x20hasFlag(overloadGroupSym.flags,\x20SymbolFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Public/Private\x20visibility\x20of\x20overloads\x20does\x20not\x20agree\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20groupType\x20=\x20useOverloadGroupSym\x20?\x20overloadGroupSym.getType()\x20:\x20new\x20Type();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.construct\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.construct\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.construct.addSignature(signature);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.construct.hasImplementation\x20=\x20!(funcDecl.isSignature());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.construct.hasImplementation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.index\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.index\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.index.flags\x20|=\x20SignatureFlags.IsIndexer;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.index.addSignature(signature);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.index.hasImplementation\x20=\x20!(funcDecl.isSignature());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.index.hasImplementation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.call\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.call\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.call.addSignature(signature);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.call.hasImplementation\x20=\x20!(funcDecl.isSignature());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.call.hasImplementation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType\x20=\x20groupType.instanceType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Ensure\x20that\x20the\x20function\x27s\x20symbol\x20is\x20properly\x20configured\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20(If\x20there\x20were\x20overloads,\x20we\x27ll\x20already\x20have\x20a\x20symbol,\x20otherwise\x20we\x20need\x20to\x20create\x20one)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcName:\x20string\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Set\x20the\x20function\x27s\x20name:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20In\x20the\x20case\x20of\x20anonymous\x20or\x20functions\x20resulting\x20from\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20correction\x20in\x20the\x20parser\x20(isMissing()\x20==\x20true),\x20we\x20do\x20not\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20want\x20to\x20set\x20a\x20function\x20name,\x20since\x20they\x20shouldn\x27t\x20be\x20inserted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20into\x20the\x20enclosing\x20scope\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20usedHint\x20prevents\x20functions\x20bound\x20to\x20object\x20literal\x20fields\x20from\x20being\x20added\x20to\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20enclosing\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20usedHint\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.name\x20&&\x20!funcDecl.name.isMissing())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcName\x20=\x20funcDecl.name.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.hint)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcName\x20=\x20funcDecl.hint;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20usedHint\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20TypeSymbol(funcName\x20?\x20funcName\x20:\x20this.anon,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.minChar,\x20funcDecl.limChar\x20-\x20funcDecl.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!useOverloadGroupSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.declAST\x20=\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Are\x20we\x20missing\x20any\x20other\x20flags?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.flags\x20|=\x20SymbolFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.flags\x20|=\x20SymbolFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isPrivate)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.flags\x20|=\x20SymbolFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.isMethod\x20=\x20funcDecl.isMethod();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(groupType.symbol.isMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.flags\x20|=\x20SymbolFlags.Property;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type\x20=\x20groupType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20the\x20function\x20symbol\x20to\x20the\x20appropriate\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20funcDecl\x20is\x20a\x20constructor,\x20it\x20will\x20be\x20added\x20to\x20the\x20enclosing\x20scope\x20as\x20a\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20the\x20function\x27s\x20symbol\x20to\x20its\x20enclosing\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcName\x20&&\x20!isLambda\x20&&\x20!funcDecl.isAccessor()\x20&&\x20!usedHint)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x27re\x20not\x20setting\x20the\x20isDecl\x20flags\x20for\x20fuctions\x20bound\x20to\x20object\x20literal\x20properties\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20so\x20removing\x20the\x20isDefiniton\x20clause\x20would\x20break\x20object\x20literals\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(addToScope)\x20{\x20\x20//\x20REVIEW:\x20If\x20we\x20combine\x20this\x20with\x20createFunctionDeclarationSignature,\x20we\x27ll\x20need\x20to\x20broaden\x20this\x20for\x20both\x20decls\x20and\x20defs\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20a\x20static\x20method,\x20enter\x20directly\x20into\x20the\x20container\x27s\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isMethod()\x20&&\x20isStatic)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20What\x20about\x20private\x20statics?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(<TypeSymbol>container).type.members.publicMembers.add(funcName,\x20groupType.symbol))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.duplicateIdentifier(funcDecl,\x20funcName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20//\x20REVIEW:\x20Another\x20check\x20for\x20overloads...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(overloadGroupSym\x20==\x20null\x20||\x20(overloadGroupSym.declAST\x20&&\x20!(<FuncDecl>overloadGroupSym.declAST).isOverload\x20&&\x20(container.isType())))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scope.enter(container,\x20funcDecl,\x20groupType.symbol,\x20this.errorReporter,\x20!isPrivate\x20&&\x20(isExported\x20||\x20isStatic\x20||\x20isGlobal),\x20false,\x20isAmbient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.container\x20=\x20container;\x20//\x20REVIEW:\x20Set\x20container\x20for\x20overloads\x20or\x20anonymous?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20groupType.symbol.container\x20=\x20container;\x20//\x20REVIEW:\x20Set\x20container\x20for\x20lambdas\x20and\x20accessors?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If,\x20say,\x20a\x20call\x20signature\x20overload\x20was\x20declared\x20before\x20the\x20class\x20type\x20was,\x20we\x20want\x20to\x20reuse\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20type\x20that\x27s\x20already\x20been\x20instantiated\x20for\x20the\x20class\x20type,\x20rather\x20than\x20allocate\x20a\x20new\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(useOverloadGroupSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20overloadGroupType\x20=\x20overloadGroupSym\x20?\x20overloadGroupSym.getType()\x20:\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classType\x20=\x20groupType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType\x20!=\x20overloadGroupType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType.construct\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(overloadGroupType\x20&&\x20overloadGroupType.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.construct\x20=\x20overloadGroupType.construct;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.construct\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(overloadGroupType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(overloadGroupType.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.construct.signatures.concat(overloadGroupType.construct.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20sync\x20call\x20and\x20index\x20signatures\x20as\x20well,\x20but\x20don\x27t\x20allocate\x20should\x20they\x20not\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20already\x20exist\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(overloadGroupType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType.call\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.call\x20=\x20overloadGroupType.call;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(overloadGroupType.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.call.signatures.concat(overloadGroupType.call.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20function\x20is\x20not\x20static,\x20we\x20need\x20to\x20add\x20any\x20call\x20overloads\x20onto\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20instance\x20type\x27s\x20call\x20signature\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isStatic)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType.instanceType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType\x20=\x20overloadGroupType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType\x20=\x20classType.instanceType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType.call\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.call\x20=\x20overloadGroupType.call;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(overloadGroupType.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.call.signatures.concat(overloadGroupType.call.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType.index\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.index\x20=\x20overloadGroupType.index;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(overloadGroupType.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.index.signatures.concat(overloadGroupType.index.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Creates\x20a\x20new\x20symbol\x20for\x20an\x20accessor\x20property\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note\x20that\x20funcDecl.type.symbol\x20and\x20fgSym\x20may\x20not\x20be\x20the\x20same\x20(E.g.,\x20in\x20the\x20case\x20of\x20type\x20collection)\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20createAccessorSymbol(funcDecl:\x20FuncDecl,\x20fgSym:\x20Symbol,\x20enclosingClass:\x20Type,\x20addToMembers:\x20bool,\x20isClassProperty:\x20bool,\x20scope:\x20SymbolScope,\x20container:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorSym:\x20FieldSymbol\x20=\x20null\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig\x20=\x20funcDecl.signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nameText\x20=\x20funcDecl.name.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivate\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Private);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym\x20=\x20new\x20FieldSymbol(nameText,\x20funcDecl.minChar,\x20this.locationInfo.unitIndex,\x20false,\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20accessorSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.declAST\x20=\x20funcDecl;\x20//\x20REVIEW:\x20need\x20to\x20reset\x20for\x20getters\x20and\x20setters\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSym.getter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Redeclaration\x20of\x20property\x20getter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.getter\x20=\x20<TypeSymbol>sig.declAST.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSym.setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Redeclaration\x20of\x20property\x20setter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.setter\x20=\x20<TypeSymbol>sig.declAST.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20getTypeLink(null,\x20this,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20static,\x20enter\x20it\x20into\x20the\x20class\x27s\x20member\x20list\x20directly\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(addToMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!enclosingClass.members.publicMembers.add(nameText,\x20accessorSym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.duplicateIdentifier(funcDecl,\x20accessorSym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.container\x20=\x20enclosingClass.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Accessor\x20property\x20may\x20not\x20be\x20added\x20in\x20this\x20context\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scope.enter(container,\x20funcDecl,\x20accessorSym,\x20this.errorReporter,\x20!isPrivate\x20||\x20isStatic,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20set\x20the\x20flags\x20here,\x20instead\x20of\x20below,\x20because\x20the\x20accessor\x20symbol\x20does\x20not\x20yet\x20have\x20a\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isClassProperty)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.flags\x20|=\x20SymbolFlags.Property;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.flags\x20|=\x20SymbolFlags.Static;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isPrivate)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.flags\x20|=\x20SymbolFlags.Private;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.flags\x20|=\x20SymbolFlags.Public;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym\x20=\x20<FieldSymbol>(<any>fgSym);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isPrivate\x20!=\x20hasFlag(accessorSym.flags,\x20SymbolFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Getter\x20and\x20setter\x20accessors\x20do\x20not\x20agree\x20in\x20visibility\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSym.getter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Redeclaration\x20of\x20property\x20getter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.getter\x20=\x20<TypeSymbol>funcDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorSym.setter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(funcDecl,\x20\x22Redeclaration\x20of\x20property\x20setter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym.setter\x20=\x20<TypeSymbol>funcDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20accessorSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addBases(resultScope:\x20SymbolAggregateScope,\x20type:\x20Type,\x20baseContext:\x20{\x20base:\x20string;\x20baseId:\x20number;\x20}):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultScope.addParentScope(new\x20SymbolTableScope(type.members,\x20type.ambientMembers,\x20type.getAllEnclosedTypes(),\x20type.getAllAmbientEnclosedTypes(),\x20type.symbol));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parent:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20len\x20=\x20type.extendsList.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent\x20=\x20type.extendsList[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseContext.baseId\x20==\x20parent.typeID)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.reportErrorFromSym(parent.symbol,\x20\x22Type\x20\x27\x22\x20+\x20baseContext.base\x20+\x20\x22\x27\x20is\x20recursively\x20referenced\x20as\x20a\x20base\x20class\x20of\x20itself\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent.symbol.flags\x20|=\x20SymbolFlags.RecursivelyReferenced;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addBases(resultScope,\x20parent,\x20baseContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scopeOf(type:\x20Type):\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resultScope\x20=\x20new\x20SymbolAggregateScope(type.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseContext\x20=\x20{\x20base:\x20type.symbol\x20&&\x20type.symbol.name\x20?\x20type.symbol.name\x20:\x20\x22{}\x22,\x20baseId:\x20type.typeID\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addBases(resultScope,\x20type,\x20baseContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20resultScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20lookupMemberTypeSymbol(containingType:\x20Type,\x20name:\x20string):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(containingType.containedScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20containingType.containedScope.find(name,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(containingType.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20containingType.members.allMembers.lookup(name);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null\x20&&\x20containingType.ambientMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20containingType.ambientMembers.allMembers.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeMembers\x20=\x20containingType.getAllEnclosedTypes();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientTypeMembers\x20=\x20containingType.getAllAmbientEnclosedTypes();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20typeMembers.allMembers.lookup(name);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null\x20&&\x20ambientTypeMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20ambientTypeMembers.allMembers.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20&&\x20symbol.isType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findSymbolForDynamicModule(idText:\x20string,\x20currentFileName:\x20string,\x20search:\x20(id:\x20string)\x20=>Symbol):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20originalIdText\x20=\x20idText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20perhaps\x20it\x27s\x20a\x20dynamic\x20module?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20swapQuotes(originalIdText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20the\x20literal\x20path\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20stripQuotes(originalIdText)\x20+\x20\x22.ts\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20stripQuotes(originalIdText)\x20+\x20\x22.str\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20check\x20for\x20.d.str\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20stripQuotes(originalIdText)\x20+\x20\x22.d.ts\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20stripQuotes(originalIdText)\x20+\x20\x22.d.str\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20literal\x20path\x20doesn\x27t\x20work,\x20begin\x20the\x20search\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol\x20&&\x20!isRelative(originalIdText))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20the\x20full\x20path\x20first,\x20as\x20this\x20is\x20the\x20most\x20likely\x20scenario\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20originalIdText;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20strippedIdText\x20=\x20stripQuotes(idText);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Technically,\x20we\x20shouldn\x27t\x20have\x20to\x20normalize\x20here\x20-\x20we\x20should\x20normalize\x20in\x20addUnit.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Still,\x20normalizing\x20here\x20alows\x20any\x20language\x20services\x20to\x20be\x20free\x20of\x20assumptions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20path\x20=\x20getRootFilePath(switchToForwardSlashes(currentFileName));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(symbol\x20==\x20null\x20&&\x20path\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20normalizePath(path\x20+\x20strippedIdText\x20+\x20\x22.ts\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20for\x20.str\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20changePathToSTR(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20for\x20.d.ts\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20changePathToDTS(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20for\x20.d.str\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20idText\x20=\x20changePathToDSTR(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20search(idText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x09\x09\x09\x09\x09\x09\x09if(path\x20===\x20\x27/\x27)\x20{\x0a\x09\x09\x09\x09\x09\x09\x09\x09path\x20=\x20\x27\x27;\x0a\x09\x09\x09\x09\x09\x09\x09}\x20else\x20{\x0a\x09\x09\x09\x09\x09\x09\x09\x09path\x20=\x20normalizePath(path\x20+\x20\x22..\x22);\x0a\x09\x09\x09\x09\x09\x09\x09\x09path\x20=\x20path\x20&&\x20path\x20!=\x20\x27/\x27\x20?\x20path\x20+\x20\x27/\x27\x20:\x20path;\x0a\x09\x09\x09\x09\x09\x09\x09}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveTypeMember(scope:\x20SymbolScope,\x20dotNode:\x20BinaryExpression):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lhs\x20=\x20dotNode.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rhs\x20=\x20dotNode.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lhsType\x20=\x20this.anyType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lhs\x20&&\x20rhs\x20&&\x20(rhs.nodeType\x20==\x20NodeType.Name))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lhs.nodeType\x20==\x20NodeType.Dot)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lhsType\x20=\x20this.resolveTypeMember(scope,\x20<BinaryExpression>lhs);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(lhs.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20identifier\x20=\x20<Identifier>lhs;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20scope.find(identifier.text,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.unresolvedSymbol(identifier,\x20identifier.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(symbol.isType())\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol\x20=\x20<TypeSymbol>\x20symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.aliasLink\x20&&\x20!typeSymbol.type\x20&&\x20typeSymbol.aliasLink.alias.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modPath\x20=\x20(<Identifier>typeSymbol.aliasLink.alias).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modSym\x20=\x20this.findSymbolForDynamicModule(modPath,\x20this.locationInfo.filename,\x20(id)\x20=>\x20scope.find(id,\x20false,\x20true));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.type\x20=\x20modSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(optimizeModuleCodeGen\x20&&\x20symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symType\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Once\x20the\x20type\x20has\x20been\x20referenced\x20outside\x20of\x20a\x20type\x20ref\x20position,\x20there\x27s\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20going\x20back\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symType\x20&&\x20typeSymbol.aliasLink\x20&&\x20typeSymbol.onlyReferencedAsTypeRef)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modDecl\x20=\x20<ModuleDeclaration>symType.symbol.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modDecl\x20&&\x20hasFlag(modDecl.modFlags,\x20ModuleFlags.IsDynamic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.onlyReferencedAsTypeRef\x20=\x20!this.resolvingBases;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol.visible(scope,\x20this))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(lhs,\x20\x22The\x20symbol\x20\x27\x22\x20+\x20identifier.actualText\x20+\x20\x22\x27\x20is\x20not\x20visible\x20at\x20this\x20point\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lhsType\x20=\x20symbol.getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20identifier.sym\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(lhs,\x20\x22Expected\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20LHS\x20type\x20is\x20a\x20module\x20alias,\x20we\x20won\x27t\x20be\x20able\x20to\x20resolve\x20it\x20until\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20typecheck\x20type.\x20\x20If\x20this\x20is\x20called\x20during\x20binding,\x20lhsType\x20will\x20be\x20null\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!lhsType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20lhsType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(lhsType\x20!=\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rhsIdentifier\x20=\x20<Identifier>rhs;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resultSymbol\x20=\x20this.lookupMemberTypeSymbol(lhsType,\x20rhsIdentifier.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resultSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(dotNode,\x20\x22Expected\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20resultSymbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!resultSymbol.visible(scope,\x20this))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(lhs,\x20\x22The\x20symbol\x20\x27\x22\x20+\x20(<Identifier>rhs).actualText\x20+\x20\x22\x27\x20is\x20not\x20visible\x20at\x20this\x20point\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rhsIdentifier.sym\x20=\x20resultType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resultType.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20resultType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20resultType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveFuncDecl(funcDecl:\x20FuncDecl,\x20scope:\x20SymbolScope,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym:\x20TypeSymbol):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20functionGroupSymbol\x20=\x20this.createFunctionSignature(funcDecl,\x20scope.container,\x20scope,\x20fgSym,\x20false).declAST.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signatures:\x20Signature[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signatures\x20=\x20functionGroupSymbol.type.construct.signatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signatures\x20=\x20functionGroupSymbol.type.getInstanceType().index.signatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signatures\x20=\x20functionGroupSymbol.type.call.signatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20signatures[signatures.length\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20signature.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramSym:\x20ParameterSymbol\x20=\x20signature.parameters[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveTypeLink(scope,\x20paramSym.parameter.typeLink,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20a\x20vararg\x20list\x20is\x20present,\x20check\x20that\x20the\x20type\x20is\x20an\x20array\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20&&\x20funcDecl.variableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!signature.parameters[len\x20-\x201].parameter.typeLink.type.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleErrorFromSym(signature.parameters[len\x20-\x201].parameter.symbol,\x20\x22...\x20parameter\x20must\x20have\x20array\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.parameters[len\x20-\x201].parameter.typeLink.type\x20=\x20this.makeArrayType(signature.parameters[len\x20-\x201].parameter.typeLink.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveTypeLink(scope,\x20signature.returnType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isSignature());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20functionGroupSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveVarDecl(varDecl:\x20VarDecl,\x20scope:\x20SymbolScope):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSymbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20FieldSymbol(varDecl.id.text,\x20varDecl.minChar,\x20this.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(varDecl.varFlags\x20&\x20VarFlags.Readonly)\x20==\x20VarFlags.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.transferVarFlags(varDecl.varFlags);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.declAST\x20=\x20varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20getTypeLink(varDecl.typeExpr,\x20this,\x20varDecl.init\x20==\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveTypeLink(scope,\x20field.typeLink,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20field.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveTypeLink(scope:\x20SymbolScope,\x20typeLink:\x20TypeLink,\x20supplyVar:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arrayCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLink.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast:\x20AST\x20=\x20typeLink.ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(typeLink.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ast.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Name:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20identifier\x20=\x20<Identifier>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20scope.find(identifier.text,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.unresolvedSymbol(identifier,\x20identifier.actualText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(symbol.isType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol.visible(scope,\x20this))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(ast,\x20\x22The\x20symbol\x20\x27\x22\x20+\x20identifier.actualText\x20+\x20\x22\x27\x20is\x20not\x20visible\x20at\x20this\x20point\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20identifier.sym\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLink.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLink.type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20typeLink.type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(ast,\x20\x22Expected\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Dot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.resolveTypeMember(scope,\x20<BinaryExpression>ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.TypeRef:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeRef\x20=\x20<TypeReference>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arrayCount\x20=\x20typeRef.arrayCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20typeRef.term;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.InterfaceDeclaration:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl\x20=\x20<InterfaceDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceSymbol\x20=\x20new\x20TypeSymbol((<Identifier>interfaceDecl.name).text,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.limChar\x20-\x20ast.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.symbol\x20=\x20interfaceSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.containedScope\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20SymbolTableScope(interfaceType.members,\x20null,\x20null,\x20null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.containedScope.container\x20=\x20interfaceSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.memberScope\x20=\x20interfaceType.containedScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberList\x20=\x20<ASTList>interfaceDecl.members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20props:\x20AST[]\x20=\x20memberList.members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propsLen\x20=\x20props.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20propsLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propDecl\x20=\x20props[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propSym:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20addMember\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id:\x20Identifier\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(propDecl.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>propDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x20=\x20funcDecl.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propSym\x20=\x20interfaceType.members.allMembers.lookup(funcDecl.getNameText());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addMember\x20=\x20(propSym\x20==\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addMember\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propSym\x20=\x20this.resolveFuncDecl(funcDecl,\x20scope,\x20interfaceSymbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propSym\x20=\x20this.resolveFuncDecl(funcDecl,\x20scope,\x20<TypeSymbol>propSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type\x20=\x20(<TypeSymbol>propSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x20=\x20(<VarDecl>propDecl).id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propSym\x20=\x20this.resolveVarDecl(<VarDecl>propDecl,\x20scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Don\x27t\x20add\x20the\x20member\x20if\x20it\x20was\x20missing\x20a\x20name.\x20\x20This\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20generally\x20just\x20leads\x20to\x20cascading\x20errors\x20that\x20make\x20things\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20more\x20confusing\x20for\x20the\x20user.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addMember\x20=\x20!id.isMissing();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(addMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(id\x20&&\x20hasFlag(id.flags,\x20ASTFlags.OptionalName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propSym.flags\x20|=\x20SymbolFlags.Optional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!interfaceType.members.allMembers.add(propSym.name,\x20propSym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.duplicateIdentifier(ast,\x20propSym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20interfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20interfaceType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tsym\x20=\x20<TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast,\x20scope,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20tsym.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.simpleError(ast,\x20\x22Expected\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20count\x20=\x20arrayCount;\x20count\x20>\x200;\x20count--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.makeArrayType(typeLink.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(supplyVar\x20&&\x20(typeLink.type\x20==\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLink.ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.ast.type\x20=\x20typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20else\x20wait\x20for\x20type\x20inference\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveBaseTypeLink(typeLink:\x20TypeLink,\x20scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvingBases\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveTypeLink(scope,\x20typeLink,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolvingBases\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20extendsType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeLink.type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsType\x20=\x20typeLink.type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20extendsType\x20=\x20typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20extendsType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findMostApplicableSignature(signatures:\x20ApplicableSignature[],\x20args:\x20ASTList):\x20{\x20sig:\x20Signature;\x20ambiguous:\x20bool;\x20}\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signatures.length\x20==\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20sig:\x20signatures[0].signature,\x20ambiguous:\x20false\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20best:\x20ApplicableSignature\x20=\x20signatures[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20Q:\x20ApplicableSignature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20AType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20PType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20QType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambiguous\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20qSig\x20=\x201;\x20qSig\x20<\x20signatures.length;\x20qSig++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Q\x20=\x20signatures[qSig];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20find\x20the\x20better\x20conversion\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20args\x20&&\x20i\x20<\x20args.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20AType\x20=\x20args.members[i].type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20PType\x20=\x20i\x20<\x20best.signature.parameters.length\x20?\x20best.signature.parameters[i].getType()\x20:\x20best.signature.parameters[best.signature.parameters.length\x20-\x201].getType().elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20QType\x20=\x20i\x20<\x20Q.signature.parameters.length\x20?\x20Q.signature.parameters[i].getType()\x20:\x20Q.signature.parameters[Q.signature.parameters.length\x20-\x201].getType().elementType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typesAreIdentical(PType,\x20QType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.typesAreIdentical(AType,\x20PType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.typesAreIdentical(AType,\x20QType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20best\x20=\x20Q;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.sourceIsSubtypeOfTarget(PType,\x20QType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.sourceIsSubtypeOfTarget(QType,\x20PType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20best\x20=\x20Q;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(Q.hadProvisionalErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(best.hadProvisionalErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20best\x20=\x20Q;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!args\x20||\x20i\x20==\x20args.members.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20collection:\x20ITypeCollection\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getLength:\x20()\x20=>\x20{\x20return\x202;\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20setTypeAtIndex:\x20(index:\x20number,\x20type:\x20Type)\x20=>\x20{\x20},\x20//\x20no\x20contextual\x20typing\x20here,\x20so\x20no\x20need\x20to\x20do\x20anything\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getTypeAtIndex:\x20(index:\x20number)\x20=>\x20{\x20return\x20index\x20?\x20Q.signature.returnType.type\x20:\x20best.signature.returnType.type;\x20}\x20//\x20we\x20only\x20want\x20the\x20\x22second\x22\x20type\x20-\x20the\x20\x22first\x22\x20is\x20skipped\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bct\x20=\x20this.findBestCommonType(best.signature.returnType.type,\x20null,\x20collection,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambiguous\x20=\x20!bct;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ambiguous\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20{\x20sig:\x20best.signature,\x20ambiguous:\x20ambiguous\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getApplicableSignatures(signatures:\x20Signature[],\x20args:\x20ASTList,\x20comparisonInfo:\x20TypeComparisonInfo):\x20ApplicableSignature[]\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applicableSigs:\x20ApplicableSignature[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20miss\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cxt:\x20ContextualTypeContext\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hadProvisionalErrors\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20signatures.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20args.members.length;\x20j++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20>=\x20signatures[i].parameters.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberType\x20=\x20signatures[i].parameters[j].getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20account\x20for\x20varargs\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signatures[i].declAST.variableArgList\x20&&\x20(j\x20>=\x20signatures[i].nonOptionalParameterCount\x20-\x201)\x20&&\x20memberType.isArray())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memberType\x20=\x20memberType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberType\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(args.members[j].nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.functionInterfaceType\x20&&\x20memberType\x20==\x20this.typeFlow.functionInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canContextuallyTypeFunction(memberType,\x20<FuncDecl>args.members[j],\x20true))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20just\x20annotations\x20that\x20are\x20blocking\x20us,\x20typecheck\x20the\x20function\x20and\x20add\x20it\x20to\x20the\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.canContextuallyTypeFunction(memberType,\x20<FuncDecl>args.members[j],\x20false))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20//\x20if\x20it\x20can\x20be\x20contextually\x20typed,\x20try\x20it\x20out...\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckWithContextualType(memberType,\x20true,\x20true,\x20args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadProvisionalErrors\x20=\x20this.hadProvisionalErrors();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.setMessage(\x22Could\x20not\x20apply\x20type\x20\x27\x22\x20+\x20memberType.getTypeName()\x20+\x20\x22\x27\x20to\x20argument\x20\x22\x20+\x20(j\x20+\x201)\x20+\x20\x22,\x20which\x20is\x20of\x20type\x20\x27\x22\x20+\x20args.members[j].type.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20clean\x20the\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(hadProvisionalErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20cxt\x20=\x20this.currentContextualTypeContext;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.typeCheckWithContextualType(null,\x20true,\x20true,\x20args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resetProvisionalErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(miss)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(args.members[j].nodeType\x20==\x20NodeType.ObjectLit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20now\x20actually\x20attempt\x20to\x20typecheck\x20as\x20the\x20contextual\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.objectInterfaceType\x20&&\x20memberType\x20==\x20this.typeFlow.objectInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckWithContextualType(memberType,\x20true,\x20true,\x20args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadProvisionalErrors\x20=\x20this.hadProvisionalErrors();\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.setMessage(\x22Could\x20not\x20apply\x20type\x20\x27\x22\x20+\x20memberType.getTypeName()\x20+\x20\x22\x27\x20to\x20argument\x20\x22\x20+\x20(j\x20+\x201)\x20+\x20\x22,\x20which\x20is\x20of\x20type\x20\x27\x22\x20+\x20args.members[j].type.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20clean\x20the\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(hadProvisionalErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.typeCheckWithContextualType(null,\x20true,\x20true,\x20args.members[j]);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20//\x20is\x20the\x20\x22cleaned\x22\x20type\x20even\x20assignable?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resetProvisionalErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(miss)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(args.members[j].nodeType\x20==\x20NodeType.ArrayLit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20attempt\x20to\x20contextually\x20type\x20the\x20array\x20literal\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.arrayInterfaceType\x20&&\x20memberType\x20==\x20this.typeFlow.arrayInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckWithContextualType(memberType,\x20true,\x20true,\x20args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadProvisionalErrors\x20=\x20this.hadProvisionalErrors();\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.setMessage(\x22Could\x20not\x20apply\x20type\x20\x27\x22\x20+\x20memberType.getTypeName()\x20+\x20\x22\x27\x20to\x20argument\x20\x22\x20+\x20(j\x20+\x201)\x20+\x20\x22,\x20which\x20is\x20of\x20type\x20\x27\x22\x20+\x20args.members[j].type.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20clean\x20the\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(hadProvisionalErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.typeCheckWithContextualType(null,\x20true,\x20true,\x20args.members[j]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20if\x20(!this.sourceIsAssignableToTarget(args.members[j].type,\x20memberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20miss\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20this.cleanStartedPTO();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resetProvisionalErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(miss)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x20args.members.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applicableSigs[applicableSigs.length]\x20=\x20{\x20signature:\x20signatures[i],\x20hadProvisionalErrors:\x20hadProvisionalErrors\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hadProvisionalErrors\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20applicableSigs;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20canContextuallyTypeFunction(candidateType:\x20Type,\x20funcDecl:\x20FuncDecl,\x20beStringent:\x20bool):\x20bool\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20these\x20cases,\x20we\x20do\x20not\x20attempt\x20to\x20apply\x20a\x20contextual\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20RE:\x20isInlineCallLiteral\x20-\x20if\x20the\x20call\x20target\x20is\x20a\x20function\x20literal,\x20we\x20don\x27t\x20want\x20to\x20apply\x20the\x20target\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20to\x20its\x20body\x20-\x20instead,\x20it\x20should\x20be\x20applied\x20to\x20its\x20return\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isParenthesized\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isMethod()\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beStringent\x20&&\x20funcDecl.returnTypeAnnotation\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isInlineCallLiteral)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20beStringent\x20=\x20beStringent\x20||\x20(this.typeFlow.functionInterfaceType\x20==\x20candidateType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20At\x20this\x20point,\x20if\x20we\x27re\x20not\x20being\x20stringent,\x20there\x27s\x20no\x20need\x20to\x20check\x20for\x20multiple\x20call\x20sigs\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20or\x20count\x20parameters\x20-\x20we\x20just\x20want\x20to\x20unblock\x20typecheck\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!beStringent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x27re\x20coming\x20from\x20an\x20in-scope\x20typecheck,\x20lambdas\x20may\x20not\x20have\x20had\x20function\x20signatures\x20created\x20for\x20them\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Should\x20we\x20search\x20out\x20the\x20overload\x20group\x20here?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.signature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.createFunctionSignature(funcDecl,\x20this.typeFlow.scope.container,\x20this.typeFlow.scope,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20funcDecl.signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLen\x20=\x20signature.parameters.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20that\x20the\x20argument\x20declarations\x20have\x20no\x20type\x20annotations\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20paramLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20param\x20=\x20signature.parameters[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20<ParameterSymbol>param;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argDecl\x20=\x20<ArgDecl>symbol.declAST;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20a\x20valid\x20typeExpr\x20is\x20a\x20requirement\x20for\x20varargs,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20so\x20we\x20may\x20want\x20to\x20revise\x20our\x20invariant\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(beStringent\x20&&\x20argDecl.typeExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(candidateType.construct\x20&&\x20candidateType.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateSigs\x20=\x20candidateType.construct\x20?\x20candidateType.construct\x20:\x20candidateType.call;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!candidateSigs\x20||\x20candidateSigs.signatures.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20we\x27re\x20here,\x20the\x20contextual\x20type\x20can\x20be\x20applied\x20to\x20the\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20canContextuallyTypeObjectLiteral(targetType:\x20Type,\x20objectLit:\x20UnaryExpression):\x20bool\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType\x20==\x20this.typeFlow.objectInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberDecls\x20=\x20<ASTList>objectLit.operand;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(memberDecls\x20&&\x20targetType.memberScope))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetMember:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20foundSyms\x20=\x20{};\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20that\x20each\x20property\x20in\x20the\x20object\x20literal\x20is\x20present\x20in\x20the\x20target\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20memberDecls.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x20=\x20(<BinaryExpression>memberDecls.members[i]).operand1;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(id.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20(<Identifier>id).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(id.nodeType\x20==\x20NodeType.QString)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20set\x20text\x20to\x20unescaped\x20string\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idText\x20=\x20(<StringLiteral>id).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20idText.substring(1,\x20idText.length\x20-\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetMember\x20=\x20targetType.memberScope.find(text,\x20true,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!targetMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundSyms[text]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20that\x20all\x20members\x20in\x20the\x20target\x20type\x20are\x20present\x20in\x20the\x20object\x20literal\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetMembers\x20=\x20targetType.memberScope.getAllValueSymbolNames(true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20targetMembers.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberName\x20=\x20targetMembers[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberSym\x20=\x20targetType.memberScope.find(memberName,\x20true,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!foundSyms[targetMembers[i]]\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(memberSym.flags,\x20SymbolFlags.Optional))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20widenType(t:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t\x20==\x20this.undefinedType\x20||\x20t\x20==\x20this.nullType)\x20{\x20//\x20REVIEW:\x20not\x20isNullOrUndefinedType\x20for\x20perf\x20reasons\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20t;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNullOrUndefinedType(t:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20t\x20==\x20this.undefinedType\x20||\x20t\x20==\x20this.nullType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findBestCommonType(initialType:\x20Type,\x20targetType:\x20Type,\x20collection:\x20ITypeCollection,\x20acceptVoid:bool,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20collection.getLength();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nlastChecked\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bestCommonType\x20=\x20initialType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bestCommonType\x20=\x20bestCommonType\x20?\x20bestCommonType.mergeOrdered(targetType,\x20this,\x20acceptVoid)\x20:\x20targetType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20it\x27s\x20important\x20that\x20we\x20set\x20the\x20convergence\x20type\x20here,\x20and\x20not\x20in\x20the\x20loop,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20since\x20the\x20first\x20element\x20considered\x20may\x20be\x20the\x20contextual\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20convergenceType:\x20Type\x20=\x20bestCommonType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(nlastChecked\x20<\x20len)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20use\x20in\x20comparing\x20a\x20type\x20against\x20itself\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20==\x20nlastChecked)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(convergenceType\x20&&\x20(bestCommonType\x20=\x20convergenceType.mergeOrdered(collection.getTypeAtIndex(i),\x20this,\x20acceptVoid,\x20comparisonInfo)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20convergenceType\x20=\x20bestCommonType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bestCommonType\x20==\x20this.anyType\x20||\x20bestCommonType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(targetType)\x20{\x20//\x20set\x20the\x20element\x20type\x20to\x20the\x20target\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20collection.setTypeAtIndex(i,\x20targetType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20the\x20type\x20if\x20we\x27ve\x20agreed\x20upon\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(convergenceType\x20&&\x20bestCommonType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nlastChecked++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nlastChecked\x20<\x20len)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20convergenceType\x20=\x20collection.getTypeAtIndex(nlastChecked);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20acceptVoid\x20?\x20bestCommonType\x20:\x20(bestCommonType\x20==\x20this.voidType\x20?\x20null\x20:\x20bestCommonType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Type\x20Identity\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typesAreIdentical(t1:\x20Type,\x20t2:\x20Type)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20clause\x20will\x20cover\x20both\x20primitive\x20types\x20(since\x20the\x20type\x20objects\x20are\x20shared),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20as\x20well\x20as\x20shared\x20brands\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1\x20==\x20t2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!t1\x20||\x20!t2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1.isClass()\x20||\x20t1.isClassInstance())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comboId\x20=\x20(t2.typeID\x20<<\x2016)\x20|\x20t1.typeID;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.identicalCache[comboId])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20one\x20is\x20an\x20enum,\x20and\x20they\x27re\x20not\x20the\x20same\x20type,\x20they\x27re\x20not\x20identical\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((t1.typeFlags\x20&\x20TypeFlags.IsEnum)\x20||\x20(t2.typeFlags\x20&\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1.isArray()\x20||\x20t2.isArray())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(t1.isArray()\x20&&\x20t2.isArray()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ret\x20=\x20this.typesAreIdentical(t1.elementType,\x20t2.elementType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ret)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.subtypeCache[comboId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.subtypeCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ret;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1.primitiveTypeClass\x20!=\x20t2.primitiveTypeClass)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20properties\x20are\x20identical\x20in\x20name,\x20optionality,\x20and\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20TypeChanges\x20-\x20The\x20compiler\x20does\x20not\x20currently\x20check\x20against\x20the\x20members\x20of\x20parent\x20types!\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20TypeChanges\x20-\x20What\x20about\x20ambientMembers?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1.memberScope\x20&&\x20t2.memberScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t1MemberKeys\x20=\x20t1.memberScope.getAllValueSymbolNames(true).sort();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t2MemberKeys\x20=\x20t2.memberScope.getAllValueSymbolNames(true).sort();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1MemberKeys.length\x20!=\x20t2MemberKeys.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t1MemberSymbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t2MemberSymbol:\x20Symbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t1MemberType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20t2MemberType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iMember\x20=\x200;\x20iMember\x20<\x20t1MemberKeys.length;\x20iMember++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1MemberKeys[iMember]\x20!=\x20t2MemberKeys[iMember])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t1MemberSymbol\x20=\x20<Symbol>t1.memberScope.find(t1MemberKeys[iMember],\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t2MemberSymbol\x20=\x20<Symbol>t2.memberScope.find(t2MemberKeys[iMember],\x20false,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((t1MemberSymbol.flags\x20&\x20SymbolFlags.Optional)\x20!=\x20(t2MemberSymbol.flags\x20&\x20SymbolFlags.Optional))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t1MemberType\x20=\x20t1MemberSymbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20t2MemberType\x20=\x20t2MemberSymbol.getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20catch\x20the\x20mutually\x20recursive\x20or\x20cached\x20cases\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(t1MemberType\x20&&\x20t2MemberType\x20&&\x20(this.identicalCache[(t2MemberType.typeID\x20<<\x2016)\x20|\x20t1MemberType.typeID]\x20!=\x20undefined))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.typesAreIdentical(t1MemberType,\x20t2MemberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(t1.memberScope\x20||\x20t2.memberScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupsAreIdentical(t1.call,\x20t2.call))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupsAreIdentical(t1.construct,\x20t2.construct))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupsAreIdentical(t1.index,\x20t2.index))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.identicalCache[comboId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureGroupsAreIdentical(sg1:\x20SignatureGroup,\x20sg2:\x20SignatureGroup)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20covers\x20the\x20null\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sg1\x20==\x20sg2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20covers\x20the\x20mixed-null\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!sg1\x20||\x20!sg2)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sg1.signatures.length\x20!=\x20sg2.signatures.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig1:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig2:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sigsMatch\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20signatures\x20in\x20the\x20signature\x20group\x20may\x20not\x20be\x20ordered...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Should\x20definition\x20signatures\x20be\x20required\x20to\x20be\x20identical\x20as\x20well?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iSig1\x20=\x200;\x20iSig1\x20<\x20sg1.signatures.length;\x20iSig1++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig1\x20=\x20sg1.signatures[iSig1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iSig2\x20=\x200;\x20iSig2\x20<\x20sg2.signatures.length;\x20iSig2++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig2\x20=\x20sg2.signatures[iSig2];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signaturesAreIdentical(sig1,\x20sig2))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sigsMatch\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sigsMatch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sigsMatch\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20match\x20found\x20for\x20a\x20specific\x20signature\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signaturesAreIdentical(s1:\x20Signature,\x20s2:\x20Signature)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s1.hasVariableArgList\x20!=\x20s2.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s1.nonOptionalParameterCount\x20!=\x20s2.nonOptionalParameterCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(s1.parameters.length\x20!=\x20s2.parameters.length)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.typesAreIdentical(s1.returnType.type,\x20s2.returnType.type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iParam\x20=\x200;\x20iParam\x20<\x20s1.parameters.length;\x20iParam++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type,\x20s2.parameters[iParam].parameter.typeLink.type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Subtyping\x20and\x20Assignment\x20compatibility\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceIsSubtypeOfTarget(source:\x20Type,\x20target:\x20Type,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.sourceIsRelatableToTarget(source,\x20target,\x20false,\x20this.subtypeCache,\x20comparisonInfo);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureGroupIsSubtypeOfTarget(sg1:\x20SignatureGroup,\x20sg2:\x20SignatureGroup,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.signatureGroupIsRelatableToTarget(sg1,\x20sg2,\x20false,\x20this.subtypeCache,\x20comparisonInfo);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureIsSubtypeOfTarget(s1:\x20Signature,\x20s2:\x20Signature,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.signatureIsRelatableToTarget(s1,\x20s2,\x20false,\x20this.subtypeCache,\x20comparisonInfo);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceIsAssignableToTarget(source:\x20Type,\x20target:\x20Type,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.sourceIsRelatableToTarget(source,\x20target,\x20true,\x20this.assignableCache,\x20comparisonInfo);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureGroupIsAssignableToTarget(sg1:\x20SignatureGroup,\x20sg2:\x20SignatureGroup,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.signatureGroupIsRelatableToTarget(sg1,\x20sg2,\x20true,\x20this.assignableCache,\x20comparisonInfo);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureIsAssignableToTarget(s1:\x20Signature,\x20s2:\x20Signature,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x20return\x20this.signatureIsRelatableToTarget(s1,\x20s2,\x20true,\x20this.assignableCache,\x20comparisonInfo);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20sourceIsRelatableToTarget(source:\x20Type,\x20target:\x20Type,\x20assignableTo:\x20bool,\x20comparisonCache:\x20any,\x20comparisonInfo:\x20TypeComparisonInfo)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Does\x20this\x20check\x20even\x20matter?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(this.typesAreIdentical(source,\x20target))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source\x20==\x20target)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20An\x20error\x20has\x20already\x20been\x20reported\x20in\x20this\x20case\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(source\x20&&\x20target))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comboId\x20=\x20(source.typeID\x20<<\x2016)\x20|\x20target.typeID;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20the\x20case\x20of\x20a\x20\x27false\x27,\x20we\x20want\x20to\x20short-circuit\x20a\x20recursive\x20typecheck\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonCache[comboId]\x20!=\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20is\x20one\x20difference\x20between\x20subtyping\x20and\x20assignment\x20compatibility\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(assignableTo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source\x20==\x20this.anyType\x20||\x20target\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20is\x20one\x20difference\x20between\x20assignment\x20compatibility\x20and\x20subtyping\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source\x20==\x20this.undefinedType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((source\x20==\x20this.nullType)\x20&&\x20(target\x20!=\x20this.undefinedType\x20&&\x20target\x20!=\x20this.voidType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20enum\x20types\x20aren\x27t\x20explicitly\x20covered\x20in\x20the\x20spec\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target\x20==\x20this.numberType\x20&&\x20(source.typeFlags\x20&\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source\x20==\x20this.numberType\x20&&\x20(target.typeFlags\x20&\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((source.typeFlags\x20&\x20TypeFlags.IsEnum)\x20||\x20(target.typeFlags\x20&\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.isArray()\x20||\x20target.isArray())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(source.isArray()\x20&&\x20target.isArray()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ret\x20=\x20this.sourceIsRelatableToTarget(source.elementType,\x20target.elementType,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ret)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ret;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20check\x20ensures\x20that\x20we\x20only\x20operate\x20on\x20object\x20types\x20from\x20this\x20point\x20forward,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20since\x20the\x20checks\x20involving\x20primitives\x20occurred\x20above\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.primitiveTypeClass\x20!=\x20target.primitiveTypeClass)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.primitiveTypeClass\x20==\x20Primitive.None)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source\x20==\x20this.numberType\x20&&\x20this.typeFlow.numberInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20source\x20=\x20this.typeFlow.numberInterfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(source\x20==\x20this.stringType\x20&&\x20this.typeFlow.stringInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20source\x20=\x20this.typeFlow.stringInterfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(source\x20==\x20this.booleanType\x20&&\x20this.typeFlow.booleanInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20source\x20=\x20this.typeFlow.booleanInterfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.hasBase(target))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.objectInterfaceType\x20&&\x20target\x20==\x20this.typeFlow.objectInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.functionInterfaceType\x20&&\x20(source.call\x20||\x20source.construct)\x20&&\x20target\x20==\x20this.typeFlow.functionInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x20should\x20perhaps\x20do\x20this,\x20though\x20it\x20wouldn\x27t\x20be\x20quite\x20right\x20without\x20generics\x20support\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//if\x20(this.typeFlow.arrayInterfaceType\x20&&\x20(source.index)\x20&&\x20target\x20==\x20this.typeFlow.arrayInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20At\x20this\x20point,\x20if\x20the\x20target\x20is\x20a\x20class,\x20but\x20not\x20the\x20source\x20or\x20a\x20parent\x20of\x20the\x20source,\x20bail\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.isClass()\x20||\x20target.isClassInstance())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.memberScope\x20&&\x20source.memberScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mPropKeys\x20=\x20target.memberScope.getAllValueSymbolNames(true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mProp:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nProp:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mPropType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nPropType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inferenceSymbol:\x20InferenceSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iMProp\x20=\x200;\x20iMProp\x20<\x20mPropKeys.length;\x20iMProp++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mProp\x20=\x20target.memberScope.find(mPropKeys[iMProp],\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nProp\x20=\x20source.memberScope.find(mPropKeys[iMProp],\x20false,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20methods\x20do\x20not\x20have\x20the\x20\x22arguments\x22\x20field\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mProp.name\x20==\x20\x22arguments\x22\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.iargumentsInterfaceType\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.typeFlow.iargumentsInterfaceType.symbol.flags\x20&\x20SymbolFlags.CompilerGenerated)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mProp.kind()\x20==\x20SymbolKind.Variable\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<VariableSymbol>mProp).variable.typeLink.type\x20==\x20this.typeFlow.iargumentsInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mProp.isInferenceSymbol())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inferenceSymbol\x20=\x20<InferenceSymbol>mProp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inferenceSymbol.typeCheckStatus\x20==\x20TypeCheckStatus.NotStarted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20TypeChanges:\x20Does\x20this\x20ever\x20really\x20happen?\x20\x20Maybe\x20for\x20out-of-order\x20typecheck?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(mProp.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mPropType\x20=\x20mProp.getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!nProp)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x27s\x20not\x20present\x20on\x20the\x20type\x20in\x20question,\x20look\x20for\x20the\x20property\x20on\x20\x27Object\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.objectInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nProp\x20=\x20this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp],\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!nProp)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Now,\x20the\x20property\x20was\x20not\x20found\x20on\x20Object,\x20but\x20the\x20type\x20in\x20question\x20is\x20a\x20function,\x20look\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20it\x20on\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.typeFlow.functionInterfaceType\x20&&\x20(mPropType.call\x20||\x20mPropType.construct))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nProp\x20=\x20this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp],\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20finally,\x20check\x20to\x20see\x20if\x20the\x20property\x20is\x20optional\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!nProp)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(mProp.flags\x20&\x20SymbolFlags.Optional))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x20//\x20only\x20surface\x20the\x20first\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.RequiredPropertyIsMissing;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Type\x20\x27\x22\x20+\x20source.getTypeName()\x20+\x20\x22\x27\x20is\x20missing\x20property\x20\x27\x22\x20+\x20mPropKeys[iMProp]\x20+\x20\x22\x27\x20from\x20type\x20\x27\x22\x20+\x20target.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nProp.isInferenceSymbol())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inferenceSymbol\x20=\x20<InferenceSymbol>nProp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(inferenceSymbol.typeCheckStatus\x20==\x20TypeCheckStatus.NotStarted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(nProp.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nPropType\x20=\x20nProp.getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20catch\x20the\x20mutually\x20recursive\x20or\x20cached\x20cases\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mPropType\x20&&\x20nPropType\x20&&\x20(comparisonCache[(nPropType.typeID\x20<<\x2016)\x20|\x20mPropType.typeID]\x20!=\x20undefined))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsRelatableToTarget(nPropType,\x20mPropType,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x20//\x20only\x20surface\x20the\x20first\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatiblePropertyTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Types\x20of\x20property\x20\x27\x22\x20+\x20mProp.name\x20+\x20\x22\x27\x20of\x20types\x20\x27\x22\x20+\x20source.getTypeName()\x20+\x20\x22\x27\x20and\x20\x27\x22\x20+\x20target.getTypeName()\x20+\x20\x22\x27\x20are\x20incompatible\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20signature\x20groups\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.call\x20||\x20target.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupIsRelatableToTarget(source.call,\x20target.call,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.call\x20&&\x20target.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Call\x20signatures\x20of\x20types\x20\x27\x22\x20+\x20source.getTypeName()\x20+\x20\x22\x27\x20and\x20\x27\x22\x20+\x20target.getTypeName()\x20+\x20\x22\x27\x20are\x20incompatible\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasSig\x20=\x20target.call\x20?\x20target.getTypeName()\x20:\x20source.getTypeName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lacksSig\x20=\x20!target.call\x20?\x20target.getTypeName()\x20:\x20source.getTypeName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.setMessage(\x22Type\x20\x27\x22\x20+\x20hasSig\x20+\x20\x22\x27\x20requires\x20a\x20call\x20signature,\x20but\x20Type\x20\x27\x22\x20+\x20lacksSig\x20+\x20\x22\x27\x20lacks\x20one\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatibleSignatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.construct\x20||\x20target.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupIsRelatableToTarget(source.construct,\x20target.construct,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(source.construct\x20&&\x20target.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Construct\x20signatures\x20of\x20types\x20\x27\x22\x20+\x20source.getTypeName()\x20+\x20\x22\x27\x20and\x20\x27\x22\x20+\x20target.getTypeName()\x20+\x20\x22\x27\x20are\x20incompatible\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasSig\x20=\x20target.construct\x20?\x20target.getTypeName()\x20:\x20source.getTypeName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lacksSig\x20=\x20!target.construct\x20?\x20target.getTypeName()\x20:\x20source.getTypeName();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.setMessage(\x22Type\x20\x27\x22\x20+\x20hasSig\x20+\x20\x22\x27\x20requires\x20a\x20construct\x20signature,\x20but\x20Type\x20\x27\x22\x20+\x20lacksSig\x20+\x20\x22\x27\x20lacks\x20one\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatibleSignatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetIndex\x20=\x20!target.index\x20&&\x20this.typeFlow.objectInterfaceType\x20?\x20this.typeFlow.objectInterfaceType.index\x20:\x20target.index;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceIndex\x20=\x20!source.index\x20&&\x20this.typeFlow.objectInterfaceType\x20?\x20this.typeFlow.objectInterfaceType.index\x20:\x20source.index;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.signatureGroupIsRelatableToTarget(sourceIndex,\x20targetIndex,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Index\x20signatures\x20of\x20types\x20\x27\x22\x20+\x20source.getTypeName()\x20+\x20\x22\x27\x20and\x20\x27\x22\x20+\x20target.getTypeName()\x20+\x20\x22\x27\x20are\x20incompatible\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatibleSignatures;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20undefined;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonCache[comboId]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20TypeChanges:\x20Return\x20an\x20error\x20context\x20object\x20so\x20the\x20user\x20can\x20get\x20better\x20diagnostic\x20info\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureGroupIsRelatableToTarget(sourceSG:\x20SignatureGroup,\x20targetSG:\x20SignatureGroup,\x20assignableTo:\x20bool,\x20comparisonCache:\x20any,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sourceSG\x20==\x20targetSG)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(sourceSG\x20&&\x20targetSG))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mSig:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nSig:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20foundMatch\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iMSig\x20=\x200;\x20iMSig\x20<\x20targetSG.signatures.length;\x20iMSig++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mSig\x20=\x20targetSG.signatures[iMSig];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iNSig\x20=\x200;\x20iNSig\x20<\x20sourceSG.signatures.length;\x20iNSig++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nSig\x20=\x20sourceSG.signatures[iNSig];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.signatureIsRelatableToTarget(nSig,\x20mSig,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundMatch\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(foundMatch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundMatch\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20signatureIsRelatableToTarget(sourceSig:\x20Signature,\x20targetSig:\x20Signature,\x20assignableTo:\x20bool,\x20comparisonCache:\x20any,\x20comparisonInfo?:\x20TypeComparisonInfo)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!sourceSig.parameters\x20||\x20!targetSig.parameters)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetVarArgCount\x20=\x20targetSig.hasVariableArgList\x20?\x20targetSig.nonOptionalParameterCount\x20-\x201\x20:\x20targetSig.nonOptionalParameterCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceVarArgCount\x20=\x20sourceSig.hasVariableArgList\x20?\x20sourceSig.nonOptionalParameterCount\x20-\x201\x20:\x20sourceSig.nonOptionalParameterCount;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sourceVarArgCount\x20>\x20targetVarArgCount\x20&&\x20!targetSig.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.addMessageToFront(\x22Call\x20signature\x20expects\x20\x22\x20+\x20targetVarArgCount\x20+\x20\x22\x20or\x20fewer\x20parameters\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceReturnType\x20=\x20sourceSig.returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetReturnType\x20=\x20targetSig.returnType.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetReturnType\x20!=\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.sourceIsRelatableToTarget(sourceReturnType,\x20targetReturnType,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatibleReturnTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20No\x20need\x20to\x20print\x20this\x20one\x20here\x20-\x20it\x27s\x20printed\x20as\x20part\x20of\x20the\x20signature\x20error\x20in\x20sourceIsRelatableToTarget\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//comparisonInfo.addMessageToFront(\x22Incompatible\x20return\x20types:\x20\x27\x22\x20+\x20sourceReturnType.getTypeName()\x20+\x20\x22\x27\x20and\x20\x27\x22\x20+\x20targetReturnType.getTypeName()\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20(sourceVarArgCount\x20<\x20targetVarArgCount\x20&&\x20sourceSig.hasVariableArgList)\x20?\x20targetVarArgCount\x20:\x20sourceVarArgCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceParamType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetParamType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sourceParamName\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetParamName\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20iSource\x20=\x200,\x20iTarget\x20=\x200;\x20iSource\x20<\x20len;\x20iSource++,\x20iTarget++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!sourceSig.hasVariableArgList\x20||\x20iSource\x20<\x20sourceVarArgCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceParamType\x20=\x20(<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceParamName\x20=\x20(<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(iSource\x20==\x20sourceVarArgCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceParamType\x20=\x20(<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sourceParamType.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceParamType\x20=\x20sourceParamType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sourceParamName\x20=\x20(<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(iTarget\x20<\x20targetSig.parameters.length\x20&&\x20iTarget\x20<\x20targetVarArgCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParamType\x20=\x20(<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParamName\x20=\x20(<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(targetSig.hasVariableArgList\x20&&\x20iTarget\x20==\x20targetVarArgCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParamType\x20=\x20(<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetParamType.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParamType\x20=\x20targetParamType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParamName\x20=\x20(<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(this.sourceIsRelatableToTarget(sourceParamType,\x20targetParamType,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.sourceIsRelatableToTarget(targetParamType,\x20sourceParamType,\x20assignableTo,\x20comparisonCache,\x20comparisonInfo)))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.flags\x20|=\x20TypeRelationshipFlags.IncompatibleParameterTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20Continuation\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20exceptionBlock\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20normalBlock:\x20number)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20getBaseTypeLinks(bases:\x20ASTList,\x20baseTypeLinks:\x20TypeLink[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20bases.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseTypeLinks\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseTypeLinks\x20=\x20new\x20TypeLink[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseExpr\x20=\x20bases.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20baseExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeLink.ast\x20=\x20name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseTypeLinks[baseTypeLinks.length]\x20=\x20typeLink;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20baseTypeLinks;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20getBases(type:\x20Type,\x20typeDecl:\x20TypeDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20type.extendsTypeLinks\x20=\x20getBaseTypeLinks(typeDecl.extendsList,\x20type.extendsTypeLinks);\x0a\x20\x20\x20\x20\x20\x20\x20\x20type.implementsTypeLinks\x20=\x20getBaseTypeLinks(typeDecl.implementsList,\x20type.implementsTypeLinks);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20addPrototypeField(classType:\x20Type,\x20ast:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink.ast\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink.type\x20=\x20classType.instanceType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSymbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20FieldSymbol(\x22prototype\x22,\x20ast.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x20true,\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.flags\x20|=\x20(SymbolFlags.Property\x20|\x20SymbolFlags.BuiltIn);\x0a\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.declAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20classType.members.addPublicMember(\x22prototype\x22,\x20fieldSymbol);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20createNewConstructGroupForType(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20new\x20Signature();\x0a\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20signature.parameters\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20type.construct\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20type.construct.addSignature(signature);\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20cloneParentConstructGroupForChildType(child:\x20Type,\x20parent:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20child.construct\x20=\x20new\x20SignatureGroup();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig:\x20Signature\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!parent.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createNewConstructGroupForType(parent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20parent.construct.signatures.length;\x20i++)\x20{\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig\x20=\x20new\x20Signature();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.parameters\x20=\x20parent.construct.signatures[i].parameters;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.nonOptionalParameterCount\x20=\x20parent.construct.signatures[i].nonOptionalParameterCount;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.typeCheckStatus\x20=\x20parent.construct.signatures[i].typeCheckStatus;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.declAST\x20=\x20parent.construct.signatures[i].declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.returnType\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sig.returnType.type\x20=\x20child.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20child.construct.addSignature(sig);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20globalId\x20=\x20\x22__GLO\x22;\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IAliasScopeContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20topLevelScope:\x20ScopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20members:\x20IHashTable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20tcContext:\x20TypeCollectionContext;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20findTypeSymbolInScopeChain(name:\x20string,\x20scopeChain:\x20ScopeChain):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20scopeChain.scope.find(name,\x20false,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null\x20&&\x20scopeChain.previous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20findTypeSymbolInScopeChain(name,\x20scopeChain.previous);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20symbol;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20function\x20findSymbolFromAlias(alias:\x20AST,\x20context:\x20IAliasScopeContext):\x20Symbol\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(alias.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Name:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20(<Identifier>alias).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamic\x20=\x20isQuoted(name);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20findSym\x20=\x20(id:\x20string)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20context.members.lookup(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20findTypeSymbolInScopeChain(name,\x20context.topLevelScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isDynamic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20context.tcContext.checker.findSymbolForDynamicModule(name,\x20context.tcContext.script.locationInfo.filename,\x20findSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20findSym(name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Dot:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dottedExpr\x20=\x20<BinaryExpression>alias;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20op1Sym\x20=\x20findSymbolFromAlias(dottedExpr.operand1,\x20context);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(op1Sym\x20&&\x20op1Sym.getType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20findSymbolFromAlias(dottedExpr.operand2,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symType\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20symType.members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.members\x20=\x20members.publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20symbol;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectImportTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modType:\x20ModuleType\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20importDecl\x20=\x20<ImportDeclaration>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20technically,\x20this\x20call\x20isn\x27t\x20strictly\x20necessary,\x20since\x20we\x27ll\x20find\x20the\x20type\x20during\x20the\x20call\x20to\x20resolveTypeMembers\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20aliasedModSymbol\x20=\x20findSymbolFromAlias(importDecl.alias,\x20{\x20topLevelScope:\x20scopeChain,\x20members:\x20null,\x20tcContext:\x20context\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20context.scopeChain.container\x20==\x20context.checker.gloMod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(aliasedModSymbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aliasedModType\x20=\x20aliasedModSymbol.getType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(aliasedModType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType\x20=\x20<ModuleType>aliasedModType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20new\x20TypeSymbol(importDecl.id.text,\x20importDecl.id.minChar,\x20importDecl.limChar\x20-\x20importDecl.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x20modType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.aliasLink\x20=\x20importDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declAST\x20=\x20importDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20importDecl.id.sym\x20=\x20typeSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20scopeChain.scope.enter(scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isGlobal,\x20true,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20scopeChain.scope.enter(scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isGlobal,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectModuleTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleDecl:\x20ModuleDeclaration\x20=\x20<ModuleDeclaration>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isEnum\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.IsEnum);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20context.scopeChain.container\x20==\x20context.checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(moduleDecl.modFlags,\x20ModuleFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modName\x20=\x20(<Identifier>moduleDecl.name).text;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamic\x20=\x20isQuoted(modName);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20scopeChain.scope.findLocal(modName,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20modType:\x20ModuleType\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20((symbol\x20==\x20null)\x20||\x20(symbol.kind()\x20!=\x20SymbolKind.Type))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientEnclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType\x20=\x20new\x20ModuleType(enclosedTypes,\x20ambientEnclosedTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isEnum)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.typeFlags\x20|=\x20TypeFlags.IsEnum;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20new\x20TypeSymbol(modName,\x20moduleDecl.name.minChar,\x20modName.length,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x20modType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.isDynamic\x20=\x20isQuoted(moduleDecl.prettyName);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declAST\x20=\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.prettyName\x20=\x20moduleDecl.prettyName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scopeChain.scope.enter(scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isExported\x20||\x20isGlobal,\x20true,\x20isAmbient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20scopeChain.scope.enter(scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isExported\x20||\x20isGlobal,\x20false,\x20isAmbient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.symbol\x20=\x20typeSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20&&\x20symbol.declAST\x20&&\x20symbol.declAST.nodeType\x20!=\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.simpleError(moduleDecl,\x20\x22Conflicting\x20symbol\x20name\x20for\x20module\x20\x27\x22\x20+\x20modName\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20<TypeSymbol>symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20initialize\x20new\x20private\x20scope\x20for\x20the\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicEnclosedTypes\x20=\x20typeSymbol.type.getAllEnclosedTypes().publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicEnclosedTypesTable\x20=\x20(publicEnclosedTypes\x20==\x20null)\x20?\x20new\x20StringHashTable()\x20:\x20publicEnclosedTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(publicEnclosedTypesTable,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicEnclosedAmbientTypes\x20=\x20typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicAmbientEnclosedTypesTable\x20=\x20(publicEnclosedAmbientTypes\x20==\x20null)\x20?\x20new\x20StringHashTable()\x20:\x20publicEnclosedAmbientTypes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientEnclosedTypes\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(publicAmbientEnclosedTypesTable,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicMembers\x20=\x20typeSymbol.type.members.publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicMembersTable\x20=\x20(publicMembers\x20==\x20null)\x20?\x20new\x20StringHashTable()\x20:\x20publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(publicMembersTable,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicAmbientMembers\x20=\x20typeSymbol.type.ambientMembers.publicMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicAmbientMembersTable\x20=\x20(publicAmbientMembers\x20==\x20null)\x20?\x20new\x20StringHashTable()\x20:\x20publicAmbientMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(publicAmbientMembersTable,\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType\x20=\x20new\x20ModuleType(enclosedTypes,\x20ambientEnclosedTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isEnum)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.typeFlags\x20|=\x20TypeFlags.IsEnum;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.members\x20=\x20members;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.ambientMembers\x20=\x20ambientMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.symbol\x20=\x20typeSymbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.addLocation(moduleDecl.minChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.expansions.push(modType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.expansionsDeclAST.push(moduleDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl.recordNonInterface();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20If\x20multiple\x20disparate\x20module\x20decls\x20for\x20the\x20same\x20module\x20don\x27t\x20agree\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20export\x20privileges,\x20how\x20should\x20we\x20handle\x20it?\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20((context.scopeChain.moduleDecl)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(context.scopeChain.container\x20==\x20context.checker.gloMod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.mod\x20=\x20modType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushTypeCollectionScope(typeSymbol,\x20modType.members,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.ambientMembers,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.enclosedTypes,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modType.ambientEnclosedTypes,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context,\x20null,\x20null,\x20moduleDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectClassTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20classDecl\x20=\x20<ClassDeclaration>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20classType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20className\x20=\x20(<Identifier>classDecl.name).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20alreadyInScope\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20hasFlag(classDecl.varFlags,\x20VarFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(classDecl.varFlags,\x20VarFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20context.scopeChain.container\x20==\x20context.checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20containerMod\x20=\x20<TypeSymbol>scopeChain.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20foundValSymbol\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20<TypeSymbol>scopeChain.scope.findLocal(className,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20the\x20value\x20space,\x20since\x20an\x20override\x20may\x20have\x20been\x20declared\x20with\x20the\x20type\x27s\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW-CLASSES\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!typeSymbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20valTypeSymbol\x20=\x20scopeChain.scope.findLocal(className,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(valTypeSymbol\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20valTypeSymbol.isType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20valTypeSymbol.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20valTypeSymbol.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>valTypeSymbol.declAST).isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20<TypeSymbol>valTypeSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundValSymbol\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20class\x20was\x20never\x20entered\x20into\x20type\x20space,\x20so\x20add\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isExported\x20||\x20isGlobal,\x20true,\x20isAmbient);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol\x20&&\x20!foundValSymbol\x20&&\x20(typeSymbol.declAST\x20!=\x20classDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20valueSymbol\x20=\x20scopeChain.scope.findLocal(className,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType\x20=\x20instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20addPrototypeField(classType,\x20classDecl,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol\x20=\x20new\x20TypeSymbol(className,\x20classDecl.name.minChar,\x20className.length,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x20classType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declAST\x20=\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.instanceType\x20=\x20instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.symbol\x20=\x20typeSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.symbol\x20=\x20typeSymbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl.recordNonInterface();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.flags\x20|=\x20SymbolFlags.Ambient;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20classType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20class\x20in\x20both\x20name\x20spaces\x20(type\x20for\x20instance\x20type;\x20constructor\x20representative\x20in\x20value\x20space)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isExported\x20||\x20isGlobal,\x20true,\x20isAmbient);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(valueSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x20ast,\x20typeSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x20isExported\x20||\x20isGlobal,\x20false,\x20isAmbient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType\x20=\x20typeSymbol.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20instance\x20type\x20is\x20null,\x20a\x20call\x20overload\x20was\x20likely\x20declared\x20before\x20the\x20class\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classType.instanceType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType.setHasImplementation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.instanceType.symbol\x20=\x20classType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classType.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType\x20=\x20classType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20classType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20class\x20has\x20no\x20declared\x20constructor,\x20either\x20create\x20a\x20default\x20signature\x20or\x20adapt\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20it\x27s\x20base\x20class\x27s\x20signature\x20group\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!classDecl.constructorDecl)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol\x20&&\x20typeSymbol.declAST\x20&&\x20typeSymbol.declAST.type\x20&&\x20typeSymbol.declAST.type.call\x20&&\x20!(<FuncDecl>typeSymbol.declAST).isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST,\x20typeSymbol.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20createNewConstructGroupForType(classDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20classType.typeFlags\x20|=\x20TypeFlags.IsClass;\x0a\x20\x20\x20\x20\x20\x20\x20\x20instanceType.typeFlags\x20|=\x20TypeFlags.IsClass;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20getBases(instanceType,\x20classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushTypeCollectionScope(typeSymbol,\x20instanceType.members,\x20instanceType.ambientMembers,\x20null,\x20null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context,\x20instanceType,\x20classType,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectInterfaceTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl\x20=\x20<InterfaceDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceSymbol:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(interfaceDecl.varFlags,\x20VarFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20context.scopeChain.container\x20==\x20context.checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20alreadyInScope\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20alreadyInScope\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceName\x20=\x20(<Identifier>interfaceDecl.name).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol\x20=\x20<TypeSymbol>scopeChain.scope.findLocal(interfaceName,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol\x20=\x20new\x20TypeSymbol(interfaceName,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.name.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceName.length,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.symbol\x20=\x20interfaceSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Shouldn\x27t\x20allocate\x20another\x20table\x20for\x20interface\x20privates\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol.declAST\x20=\x20interfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20alreadyInScope\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType\x20=\x20interfaceSymbol.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!interfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceType\x20=\x20context.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20interfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20getBases(interfaceType,\x20interfaceDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!alreadyInScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceSymbol,\x20context.checker.errorReporter,\x20isGlobal\x20||\x20isExported,\x20true,\x20false);\x20//\x20REVIEW:\x20Technically,\x20interfaces\x20should\x20be\x20ambient\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20pushTypeCollectionScope(interfaceSymbol,\x20interfaceType.members,\x20interfaceType.ambientMembers,\x20null,\x20null,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context,\x20interfaceType,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectArgDeclTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20argDecl\x20=\x20<ArgDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(argDecl.varFlags,\x20VarFlags.Public\x20|\x20VarFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivate\x20=\x20hasFlag(argDecl.varFlags,\x20VarFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSymbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20FieldSymbol(argDecl.id.text,\x20argDecl.id.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(argDecl.varFlags,\x20VarFlags.Readonly),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.transferVarFlags(argDecl.varFlags);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.declAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argDecl.parameterPropertySym\x20=\x20fieldSymbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol,\x20context.checker.errorReporter,\x20!isPrivate,\x20false,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20getTypeLink(argDecl.typeExpr,\x20context.checker,\x20argDecl.init\x20==\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argDecl.sym\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectVarDeclTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isAmbient\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.Ambient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.Exported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20context.scopeChain.container\x20==\x20context.checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isProperty\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.Property);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivate\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isOptional\x20=\x20hasFlag(varDecl.id.flags,\x20ASTFlags.OptionalName);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl.recordNonInterface();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isProperty\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isExported\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(context.scopeChain.container\x20==\x20context.checker.gloMod)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isAmbient)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20existingSym\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(existingSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym\x20=\x20existingSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Defensive\x20error\x20detection...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.id\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.simpleError(varDecl,\x20\x22Expected\x20variable\x20identifier\x20at\x20this\x20location\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSymbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20FieldSymbol(varDecl.id.text,\x20varDecl.id.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(varDecl.varFlags\x20&\x20VarFlags.Readonly)\x20==\x20VarFlags.None,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.transferVarFlags(varDecl.varFlags);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isOptional)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.flags\x20|=\x20SymbolFlags.Optional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.declAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((context.scopeChain.moduleDecl)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(context.scopeChain.container\x20==\x20context.checker.gloMod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20static,\x20enter\x20it\x20into\x20the\x20class\x27s\x20member\x20list\x20directly\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Property)\x20&&\x20isStatic\x20&&\x20context.scopeChain.classType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text,\x20fieldSymbol))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.duplicateIdentifier(ast,\x20fieldSymbol.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.container\x20=\x20context.scopeChain.classType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.scope.enter(context.scopeChain.container,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!isPrivate\x20&&\x20(isProperty\x20||\x20isExported\x20||\x20isGlobal\x20||\x20isStatic),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20false,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20isAmbient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20getTypeLink(varDecl.typeExpr,\x20context.checker,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20==\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectFuncDeclTypes(ast:\x20AST,\x20parent:\x20AST,\x20context:\x20TypeCollectionContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20will\x20have\x20to\x20change\x20when\x20we\x20move\x20to\x20\x22export\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl.recordNonInterface();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20fgSym:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20nameText\x20=\x20funcDecl.getNameText();\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isExported\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Exported\x20|\x20FncFlags.ClassPropertyMethodExported);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isStatic\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Static);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPrivate\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Private);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isConstructor\x20=\x20funcDecl.isConstructMember()\x20||\x20funcDecl.isConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20containerSym:TypeSymbol\x20=\x20<TypeSymbol>\x20(((funcDecl.isMethod()\x20&&\x20isStatic)\x20||\x20funcDecl.isAccessor())\x20&&\x20context.scopeChain.classType\x20?\x20context.scopeChain.classType.symbol\x20:\x20context.scopeChain.container);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20containerScope:\x20SymbolScope\x20=\x20context.scopeChain.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGlobal\x20=\x20containerSym\x20==\x20context.checker.gloMod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20isOptional\x20=\x20funcDecl.name\x20&&\x20hasFlag(funcDecl.name.flags,\x20ASTFlags.OptionalName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20foundSymbol\x20=\x20false;\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20this\x20is\x20a\x20class\x20constructor,\x20the\x20\x22container\x22\x20is\x20actually\x20the\x20class\x20declaration\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isConstructor\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containerSym\x20=\x20<TypeSymbol>containerSym.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containerScope\x20=\x20scopeChain.previous.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.unitIndex\x20=\x20context.checker.locationInfo.unitIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20parent\x20is\x20the\x20constructor,\x20and\x20this\x20isn\x27t\x20an\x20instance\x20method,\x20skip\x20it.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20That\x20way,\x20we\x27ll\x20set\x20the\x20type\x20during\x20scope\x20assignment,\x20and\x20can\x20be\x20sure\x20that\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20function\x20will\x20be\x20placed\x20in\x20the\x20constructor-local\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isConstructor\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containerSym\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containerSym.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containerSym.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>containerSym.declAST).isConstructor\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.isMethod())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Interfaces\x20and\x20overloads\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Signature))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instType\x20=\x20context.scopeChain.thisType;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20function\x20is\x20static,\x20search\x20in\x20the\x20class\x20type\x27s\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nameText\x20&&\x20nameText\x20!=\x20\x22__missing\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20containerSym.type.members.allMembers.lookup(nameText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20logic\x20should\x20be\x20symmetric\x20with\x20preCollectClassTypes\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20<TypeSymbol>containerScope.findLocal(nameText,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x20could\x20not\x20find\x20the\x20function\x20symbol\x20in\x20the\x20value\x20context,\x20look\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20the\x20type\x20context.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20would\x20be\x20the\x20case,\x20for\x20example,\x20if\x20a\x20class\x20constructor\x20override\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20were\x20declared\x20before\x20a\x20call\x20override\x20for\x20a\x20given\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20<TypeSymbol>containerScope.findLocal(nameText,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundSymbol\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x27ll\x20combine\x20ambient\x20and\x20non-ambient\x20funcdecls\x20during\x20typecheck\x20(for\x20contextual\x20typing).,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20So,\x20if\x20they\x20don\x27t\x20agree,\x20don\x27t\x20use\x20the\x20symbol\x20we\x27ve\x20found\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isSignature()\x20&&\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.Ambient)\x20!=\x20hasFlag(fgSym.flags,\x20SymbolFlags.Ambient)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20a\x20function\x20with\x20this\x20symbol\x20has\x20not\x20yet\x20been\x20declared\x20in\x20this\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20In\x20the\x20code\x20below,\x20we\x20need\x20to\x20ensure\x20that\x20only\x20function\x20overloads\x20are\x20considered\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20(E.g.,\x20if\x20a\x20vardecl\x20has\x20the\x20same\x20id\x20as\x20a\x20function\x20or\x20class,\x20we\x20may\x20use\x20the\x20vardecl\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20as\x20the\x20overload.)\x20\x20Defensively,\x20however,\x20the\x20vardecl\x20won\x27t\x20have\x20a\x20type\x20yet,\x20so\x20it\x20should\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20suffice\x20to\x20just\x20check\x20for\x20a\x20null\x20type\x20when\x20considering\x20the\x20overload\x20symbol\x20in\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20createFunctionSignature\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(funcDecl.isSpecialFn()))\x20{\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20context.checker.createFunctionSignature(funcDecl,\x20containerSym,\x20containerScope,\x20null,\x20!foundSymbol).declAST.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20context.checker.createFunctionSignature(funcDecl,\x20containerSym,\x20containerScope,\x20containerSym,\x20false).declAST.type.symbol;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20the\x20symbol\x27s\x20declAST,\x20which\x20will\x20point\x20back\x20to\x20the\x20first\x20declaration\x20(symbol\x20or\x20otherwise)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20related\x20to\x20this\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym.declAST\x20==\x20null\x20||\x20!funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.declAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x20//\x20there\x20exists\x20a\x20symbol\x20with\x20this\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((fgSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20context.checker.createFunctionSignature(funcDecl,\x20containerSym,\x20containerScope,\x20fgSym,\x20false).declAST.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.simpleError(funcDecl,\x20\x22Function\x20or\x20method\x20\x27\x22\x20+\x20funcDecl.name.actualText\x20+\x20\x22\x27\x20already\x20declared\x20as\x20a\x20property\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isSpecialFn()\x20&&\x20!isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type\x20=\x20instType\x20?\x20instType\x20:\x20fgSym.type;\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type\x20=\x20fgSym.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20declarations\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nameText)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20containerSym.type.members.allMembers.lookup(nameText);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20the\x20constructor\x20case,\x20we\x20want\x20to\x20check\x20the\x20parent\x20scope\x20for\x20overloads\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20context.scopeChain.previous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20<TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20<TypeSymbol>containerScope.findLocal(nameText,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundSymbol\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isConstructor\x20&&\x20fgSym.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20!(<FuncDecl>fgSym.declAST).isAccessor()\x20&&\x20!(<FuncDecl>fgSym.declAST).isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundSymbol\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Move\x20this\x20check\x20into\x20the\x20typecheck\x20phase?\x20\x20It\x27s\x20only\x20being\x20run\x20over\x20properties...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!fgSym.isAccessor()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.type\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.type.construct\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.type.construct.signatures\x20!=\x20[]\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(fgSym.type.construct.signatures[0].declAST\x20==\x20null\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags,\x20FncFlags.Ambient))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.simpleError(funcDecl,\x20\x22Functions\x20may\x20not\x20have\x20class\x20overloads\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20&&\x20!(fgSym.kind()\x20==\x20SymbolKind.Type)\x20&&\x20funcDecl.isMethod()\x20&&\x20!funcDecl.isAccessor()\x20&&\x20!funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.checker.errorReporter.simpleError(funcDecl,\x20\x22Function\x20or\x20method\x20\x27\x22\x20+\x20funcDecl.name.actualText\x20+\x20\x22\x27\x20already\x20declared\x20as\x20a\x20property\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.type\x20=\x20context.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig\x20=\x20context.checker.createFunctionSignature(funcDecl,\x20containerSym,\x20containerScope,\x20fgSym,\x20!foundSymbol);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20it\x27s\x20a\x20getter\x20or\x20setter\x20function\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((!fgSym\x20||\x20fgSym.declAST.nodeType\x20!=\x20NodeType.FuncDecl)\x20&&\x20funcDecl.isAccessor())\x20||\x20(fgSym\x20&&\x20fgSym.isAccessor()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.accessorSymbol\x20=\x20context.checker.createAccessorSymbol(funcDecl,\x20fgSym,\x20containerSym.type,\x20(funcDecl.isMethod()\x20&&\x20isStatic),\x20true,\x20containerScope,\x20containerSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.declAST\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x20//\x20REVIEW:\x20Remove\x20when\x20classes\x20completely\x20replace\x20oldclass\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isExported)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Accessors\x20are\x20set\x20to\x20\x27exported\x27\x20above\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20&&\x20!fgSym.isAccessor()\x20&&\x20fgSym.kind()\x20==\x20SymbolKind.Type\x20&&\x20fgSym.type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.flags\x20|=\x20SymbolFlags.Exported;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.scopeChain.moduleDecl\x20&&\x20!funcDecl.isSpecialFn())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.flags\x20|=\x20SymbolFlags.ModuleMember;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.declModule\x20=\x20context.scopeChain.moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fgSym\x20&&\x20isOptional)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.flags\x20|=\x20SymbolFlags.Optional;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20go;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20preCollectTypes(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:\x20TypeCollectionContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20scopeChain\x20=\x20context.scopeChain;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.Script)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script:\x20Script\x20=\x20<Script>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.script\x20=\x20script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.List)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ImportDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectImportTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.With)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectModuleTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectClassTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectInterfaceTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20will\x20be\x20a\x20constructor\x20arg\x20because\x20this\x20pass\x20only\x20traverses\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20constructor\x20arg\x20lists\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ArgDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectArgDeclTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectVarDeclTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20preCollectFuncDeclTypes(ast,\x20parent,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.isStatementOrExpression()\x20&&\x20context.scopeChain.moduleDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.scopeChain.moduleDecl.recordNonInterface();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20postCollectTypes(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:\x20TypeCollectionContext\x20=\x20walker.state;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popTypeCollectionScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popTypeCollectionScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20popTypeCollectionScope(context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20}\x0a\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x20\x20\x20\x20export\x20class\x20ScopeChain\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20fnc:\x20FuncDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20moduleDecl:\x20ModuleDeclaration;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20container:\x20Symbol,\x20public\x20previous:\x20ScopeChain,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20scope:\x20SymbolScope)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BBUseDefInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20defsBySymbol\x20=\x20new\x20bool[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20gen:\x20BitVector;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20kill:\x20BitVector;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20top:\x20BitVector;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20lists\x20by\x20symbol\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useIndexBySymbol\x20=\x20new\x20number[][];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20bb:\x20BasicBlock)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20updateTop()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20temp\x20=\x20new\x20BitVector(this.top.bitCount);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20succLen\x20=\x20this.bb.successors.length;\x20i\x20<\x20succLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20succ\x20=\x20this.bb.successors[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(succ.useDef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp.union(succ.useDef.top);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp.difference(this.kill);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20temp.union(this.gen);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20changed\x20=\x20temp.notEq(this.top);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.top\x20=\x20temp;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20changed;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20initialize(useDefContext:\x20UseDefContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20defSym\x20=\x20(sym:\x20Symbol,\x20context:\x20UseDefContext)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.isLocalSym(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20context.getSymbolIndex(sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20clear\x20pending\x20uses\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.useIndexBySymbol[index]\x20=\x20new\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.defsBySymbol[index]\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useSym\x20=\x20(sym:\x20Symbol,\x20context:\x20UseDefContext,\x20ast:\x20AST)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(context.isLocalSym(sym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symIndex\x20=\x20context.getSymbolIndex(sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.useIndexBySymbol[symIndex]\x20==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.useIndexBySymbol[symIndex]\x20=\x20new\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symUses\x20=\x20this.useIndexBySymbol[symIndex];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20astIndex\x20=\x20context.getUseIndex(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context.addUse(symIndex,\x20astIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symUses.push(astIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20initUseDefPre(cur:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:\x20UseDefContext\x20=\x20walker.state;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cur\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cur.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<BoundDecl>cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init\x20||\x20hasFlag(varDecl.varFlags,\x20VarFlags.AutoInit))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20defSym(varDecl.sym,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(cur.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parent)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parent.nodeType\x20==\x20NodeType.Asg)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20asg\x20=\x20<BinaryExpression>parent;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(asg.operand1\x20==\x20cur)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(parent.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parentDecl\x20=\x20<BoundDecl>parent;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(parentDecl.id\x20==\x20cur)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20<Identifier>cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20useSym(id.sym,\x20context,\x20cur);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((cur.nodeType\x20>=\x20NodeType.Asg)\x20&&\x20(cur.nodeType\x20<=\x20NodeType.LastAsg))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20def\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20asg\x20=\x20<BinaryExpression>cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(asg.operand1\x20&&\x20(asg.operand1.nodeType\x20==\x20NodeType.Name))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20<Identifier>asg.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20defSym(id.sym,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(cur.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20cur;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20options\x20=\x20new\x20AstWalkOptions();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20traverse\x20ASTs\x20in\x20reverse\x20order\x20of\x20execution\x20(to\x20match\x20uses\x20with\x20preceding\x20defs)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20options.reverseSiblings\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(this.bb.content,\x20initUseDefPre,\x20null,\x20options,\x20useDefContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20initializeGen(useDefContext:\x20UseDefContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbolLen\x20=\x20this.useIndexBySymbol.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bitCount\x20=\x20useDefContext.uses.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.gen\x20=\x20new\x20BitVector(bitCount);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20s\x20=\x200;\x20s\x20<\x20symbolLen;\x20s++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symUses\x20=\x20this.useIndexBySymbol[s];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((symUses\x20!=\x20undefined)\x20&&\x20(symUses.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20u\x20=\x200,\x20uLen\x20=\x20symUses.length;\x20u\x20<\x20uLen;\x20u++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.gen.set(symUses[u],\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.top\x20=\x20this.gen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20initializeKill(useDefContext:\x20UseDefContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.kill\x20=\x20new\x20BitVector(this.gen.bitCount);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20s\x20=\x200,\x20symbolLen\x20=\x20this.defsBySymbol.length;\x20s\x20<\x20symbolLen;\x20s++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.defsBySymbol[s])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20globalSymUses\x20=\x20useDefContext.useIndexBySymbol[s];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(globalSymUses)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20u\x20=\x200,\x20useLen\x20=\x20globalSymUses.length;\x20u\x20<\x20useLen;\x20u++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.kill.set(globalSymUses[u],\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20UseDefContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20global\x20use\x20lists\x20by\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useIndexBySymbol\x20=\x20new\x20number[][];\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20global\x20list\x20of\x20uses\x20(flat)\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20uses\x20=\x20new\x20AST[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbols\x20=\x20new\x20VariableSymbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbolMap\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbolCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20func:\x20Symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getSymbolIndex(sym:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20sym.name;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20<number>(this.symbolMap.lookup(name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(index\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20index\x20=\x20this.symbolCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.symbols[index]\x20=\x20<VariableSymbol>sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.symbolMap.add(name,\x20index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20index;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addUse(symIndex:\x20number,\x20astIndex:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useBySym\x20=\x20this.useIndexBySymbol[symIndex];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(useBySym\x20==\x20undefined)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20useBySym\x20=\x20new\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.useIndexBySymbol[symIndex]\x20=\x20useBySym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20useBySym[useBySym.length]\x20=\x20astIndex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getUseIndex(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.uses[this.uses.length]\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.uses.length\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isLocalSym(sym:\x20Symbol)\x20{\x20return\x20(sym\x20&&\x20(sym.container\x20==\x20this.func)\x20&&\x20(sym.kind()\x20==\x20SymbolKind.Variable));\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20killSymbol(sym:\x20VariableSymbol,\x20bbUses:\x20BitVector)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index:\x20number\x20=\x20this.symbolMap.lookup(sym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20usesOfSym\x20=\x20this.useIndexBySymbol[index];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20usesOfSym.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bbUses.set(usesOfSym[k],\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BitVector\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20packBits\x20=\x2030;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20firstBits\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20restOfBits:\x20number[]\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20bitCount:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.bitCount\x20>\x20BitVector.packBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits\x20=\x20new\x20number[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20Math.floor(this.bitCount\x20/\x20BitVector.packBits);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[i]\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20set(bitIndex:\x20number,\x20value:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bitIndex\x20<\x20BitVector.packBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(value)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.firstBits\x20|=\x20(1\x20<<\x20bitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.firstBits\x20&=\x20(~(1\x20<<\x20bitIndex));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20offset\x20=\x20Math.floor(bitIndex\x20/\x20BitVector.packBits)\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20localIndex\x20=\x20bitIndex\x20%\x20BitVector.packBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(value)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[offset]\x20|=\x20(1\x20<<\x20localIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[offset]\x20&=\x20(~(1\x20<<\x20localIndex));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20map(fn:\x20(index:\x20number)\x20=>any)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20k:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(k\x20=\x200;\x20k\x20<\x20BitVector.packBits;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(k\x20==\x20this.bitCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((1\x20<<\x20k)\x20&\x20this.firstBits)\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fn(k);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.restOfBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cumu\x20=\x20BitVector.packBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(k\x20=\x200,\x20len\x20=\x20this.restOfBits.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20myBits\x20=\x20this.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20BitVector.packBits;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((1\x20<<\x20j)\x20&\x20myBits)\x20!=\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fn(cumu);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cumu++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(cumu\x20==\x20this.bitCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20assume\x20conforming\x20sizes\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20union(b:\x20BitVector)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.firstBits\x20|=\x20b.firstBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.restOfBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20this.restOfBits.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20myBits\x20=\x20this.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bBits\x20=\x20b.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[k]\x20=\x20myBits\x20|\x20bBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20assume\x20conforming\x20sizes\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20intersection(b:\x20BitVector)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.firstBits\x20&=\x20b.firstBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.restOfBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20this.restOfBits.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20myBits\x20=\x20this.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bBits\x20=\x20b.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[k]\x20=\x20myBits\x20&\x20bBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20assume\x20conforming\x20sizes\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20notEq(b:\x20BitVector)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.firstBits\x20!=\x20b.firstBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.restOfBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20this.restOfBits.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20myBits\x20=\x20this.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bBits\x20=\x20b.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(myBits\x20!=\x20bBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20difference(b:\x20BitVector)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldFirstBits\x20=\x20this.firstBits;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.firstBits\x20&=\x20(~b.firstBits);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.restOfBits)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20this.restOfBits.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20myBits\x20=\x20this.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bBits\x20=\x20b.restOfBits[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.restOfBits[k]\x20&=\x20(~bBits);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BasicBlock\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20blocks\x20that\x20branch\x20to\x20the\x20block\x20after\x20this\x20one\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20predecessors\x20=\x20new\x20BasicBlock[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20index\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20markValue\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20marked(markBase:\x20number)\x20{\x20return\x20this.markValue\x20>\x20markBase;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mark()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.markValue++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20successors\x20=\x20new\x20BasicBlock[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useDef:\x20BBUseDefInfo\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20content\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addSuccessor(successor:\x20BasicBlock):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.successors[this.successors.length]\x20=\x20successor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20successor.predecessors[successor.predecessors.length]\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ITargetInfo\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20stmt:\x20AST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20continueBB:\x20BasicBlock;\x0a\x20\x20\x20\x20\x20\x20\x20\x20breakBB:\x20BasicBlock;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ControlFlowContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20entry\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20first\x20unreachable\x20ast\x20for\x20each\x20unreachable\x20code\x20segment\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unreachable:\x20AST[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20noContinuation\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20statements\x20enclosing\x20the\x20current\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20statementStack\x20=\x20new\x20ITargetInfo[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentSwitch\x20=\x20new\x20BasicBlock[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20walker:\x20IAstWalker;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20current:\x20BasicBlock,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20exit:\x20BasicBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.entry\x20=\x20this.current;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20walk(ast:\x20AST,\x20parent:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.walker.walk(ast,\x20parent);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushSwitch(bb:\x20BasicBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentSwitch.push(bb);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20popSwitch()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.currentSwitch.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reportUnreachable(er:\x20ErrorReporter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.unreachable\x20&&\x20(this.unreachable.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.unreachable.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unreachableAST\x20=\x20this.unreachable[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(unreachableAST.nodeType\x20!=\x20NodeType.EndCode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20er.simpleError(unreachableAST,\x20\x22unreachable\x20code\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20printAST(ast:\x20AST,\x20outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20printContext\x20=\x20new\x20PrintContext(outfile,\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printContext.increaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//ast.walk(prePrintAST,\x20postPrintAST,\x20null,\x20printContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(ast,\x20prePrintAST,\x20postPrintAST,\x20null,\x20printContext);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20printContext.decreaseIndent();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20printBlockContent(bb:\x20BasicBlock,\x20outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20content\x20=\x20bb.content;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20content.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20content.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printAST(ast,\x20outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20markBase\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20bfs(nodeFunc:\x20(bb:\x20BasicBlock)\x20=>void\x20,\x20edgeFunc:\x20(node1:\x20BasicBlock,\x20node2:\x20BasicBlock)\x20=>void\x20,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preEdges:\x20()\x20=>void\x20,\x20postEdges:\x20()\x20=>void\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20markValue\x20=\x20this.markBase++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20q\x20=\x20new\x20BasicBlock[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20q[q.length]\x20=\x20this.entry;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(q.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bb\x20=\x20q.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(bb.marked(markValue)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bb.mark();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nodeFunc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodeFunc(bb);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20succLen\x20=\x20bb.successors.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(succLen\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preEdges)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preEdges();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x20succLen\x20-\x201;\x20j\x20>=\x200;\x20j--)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20successor\x20=\x20bb.successors[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(successor.marked(this.markBase)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(edgeFunc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20edgeFunc(bb,\x20successor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20q[q.length]\x20=\x20successor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(postEdges)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20postEdges();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20linearBBs\x20=\x20new\x20BasicBlock[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useDef(er:\x20ErrorReporter,\x20funcSym:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useDefContext\x20=\x20new\x20UseDefContext();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20useDefContext.func\x20=\x20funcSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20useDefInit\x20=\x20(bb:\x20BasicBlock)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bb.useDef\x20=\x20new\x20BBUseDefInfo(bb);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bb.useDef.initialize(useDefContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.linearBBs[this.linearBBs.length]\x20=\x20bb;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bfs(useDefInit,\x20null,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i:\x20number,\x20bbLen:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200,\x20bbLen\x20=\x20this.linearBBs.length;\x20i\x20<\x20bbLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.linearBBs[i].useDef.initializeGen(useDefContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.linearBBs[i].useDef.initializeKill(useDefContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20changed\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(changed)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20changed\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20bbLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20changed\x20=\x20this.linearBBs[i].useDef.updateTop()\x20||\x20changed;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20top\x20=\x20this.entry.useDef.top;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20top.map((index)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20<Identifier>useDefContext.uses[<number>index];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20er.simpleError(ast,\x20\x22use\x20of\x20variable\x20\x27\x22\x20+\x20ast.actualText\x20+\x20\x22\x27\x20that\x20is\x20not\x20definitely\x20assigned\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20print(outfile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20node\x20=\x20(bb:\x20BasicBlock)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bb.index\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bb.index\x20=\x20index++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bb\x20==\x20this.exit)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22Exit\x20block\x20with\x20index\x20\x22\x20+\x20bb.index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22Basic\x20block\x20with\x20index\x20\x22\x20+\x20bb.index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printBlockContent(bb,\x20outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20preEdges()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.Write(\x22\x20\x20Branches\x20to\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20postEdges()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20edge(node1:\x20BasicBlock,\x20node2:\x20BasicBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(node2.index\x20<\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20node2.index\x20=\x20index++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.Write(node2.index\x20+\x20\x22\x20\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.bfs(node,\x20edge,\x20preEdges,\x20postEdges);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.unreachable\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.unreachable.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outfile.WriteLine(\x22Unreachable\x20basic\x20block\x20...\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.printAST(this.unreachable[i],\x20outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20pushStatement(stmt:\x20Statement,\x20continueBB:\x20BasicBlock,\x20breakBB:\x20BasicBlock)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.statementStack.push({\x20stmt:\x20stmt,\x20continueBB:\x20continueBB,\x20breakBB:\x20breakBB\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20popStatement()\x20{\x20return\x20this.statementStack.pop();\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnStmt()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20make\x20successor\x20finally\x20block\x20if\x20return\x20stmt\x20inside\x20of\x20try/finally\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.current.addSuccessor(this.exit);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setUnreachable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setUnreachable()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.current\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.noContinuation\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addUnreachable(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.unreachable\x20===\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.unreachable\x20=\x20new\x20AST[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.unreachable[this.unreachable.length]\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20unconditionalBranch(target:\x20AST,\x20isContinue:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetBB\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.statementStack.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetInfo\x20=\x20this.statementStack[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetInfo.stmt\x20==\x20target)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isContinue)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetBB\x20=\x20targetInfo.continueBB;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetBB\x20=\x20targetInfo.breakBB;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetBB)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.current.addSuccessor(targetBB);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setUnreachable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addContent(ast:\x20AST):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.current)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.current.content.append(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20IResolutionData\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20actuals:\x20Type[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20exactCandidates:\x20Signature[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20conversionCandidates:\x20Signature[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20id:\x20number;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ResolutionDataCache\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cacheSize\x20=\x2016;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20rdCache:\x20IResolutionData[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nextUp:\x20number\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20this.cacheSize;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.rdCache[i]\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20actuals:\x20new\x20Type[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exactCandidates:\x20new\x20Signature[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20conversionCandidates:\x20new\x20Signature[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id:\x20i\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getResolutionData():\x20IResolutionData\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rd:\x20IResolutionData\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nextUp\x20<\x20this.cacheSize)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rd\x20=\x20this.rdCache[this.nextUp];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rd\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cacheSize++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rd\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20actuals:\x20new\x20Type[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exactCandidates:\x20new\x20Signature[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20conversionCandidates:\x20new\x20Signature[],\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id:\x20this.cacheSize\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.rdCache[this.cacheSize]\x20=\x20rd;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20cache\x20operates\x20as\x20a\x20stack\x20-\x20RD\x20is\x20always\x20served\x20up\x20in-order\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextUp++;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rd;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20returnResolutionData(rd:\x20IResolutionData)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Pop\x20to\x20save\x20on\x20array\x20allocations,\x20which\x20are\x20a\x20bottleneck\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20On\x20some\x20VMs,\x20Array.pop\x20doesn\x27t\x20always\x20pop\x20the\x20last\x20value\x20in\x20the\x20array\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rd.actuals.length\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rd.exactCandidates.length\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rd.conversionCandidates.length\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nextUp\x20=\x20rd.id;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeFlow\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scope:\x20SymbolScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20globalScope:\x20SymbolScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisFnc:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20thisClassNode:\x20TypeDeclaration\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingFncIsMethod\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Prune\x20in\x20favor\x20of\x20typechecker\x20fields\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20doubleType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20booleanType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20stringType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20anyType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20regexType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nullType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20voidType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20arrayAnyType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20arrayInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20stringInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20objectInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20functionInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20numberInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20booleanInterfaceType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20iargumentsInterfaceType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20currentScript:\x20Script\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inImportTypeCheck\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inTypeRefTypeCheck\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inArrayElementTypeCheck\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolutionDataCache\x20=\x20new\x20ResolutionDataCache();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20nestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inSuperCall\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20logger:\x20ILogger,\x20public\x20initScope:\x20SymbolScope,\x20public\x20parser:\x20Parser,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeFlow\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20this.initScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.globalScope\x20=\x20this.initScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.doubleType\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.booleanType\x20=\x20this.checker.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stringType\x20=\x20this.checker.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.anyType\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.regexType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nullType\x20=\x20this.checker.nullType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.voidType\x20=\x20this.checker.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.arrayAnyType\x20=\x20this.checker.makeArrayType(this.anyType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20initLibs()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arraySym\x20=\x20this.globalScope.find(\x22Array\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arraySym\x20&&\x20(arraySym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.arrayInterfaceType\x20=\x20(<TypeSymbol>arraySym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20stringSym\x20=\x20this.globalScope.find(\x22String\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stringSym\x20&&\x20(stringSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.stringInterfaceType\x20=\x20(<TypeSymbol>stringSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20objectSym\x20=\x20this.globalScope.find(\x22Object\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(objectSym\x20&&\x20(objectSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.objectInterfaceType\x20=\x20(<TypeSymbol>objectSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnSym\x20=\x20this.globalScope.find(\x22Function\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnSym\x20&&\x20(fnSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.functionInterfaceType\x20=\x20(<TypeSymbol>fnSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20numberSym\x20=\x20this.globalScope.find(\x22Number\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(numberSym\x20&&\x20(numberSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.numberInterfaceType\x20=\x20(<TypeSymbol>numberSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20booleanSym\x20=\x20this.globalScope.find(\x22Boolean\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(booleanSym\x20&&\x20(booleanSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.booleanInterfaceType\x20=\x20(<TypeSymbol>booleanSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20regexSym\x20=\x20this.globalScope.find(\x22RegExp\x22,\x20false,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(regexSym\x20&&\x20(regexSym.kind()\x20==\x20SymbolKind.Type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.regexType\x20=\x20(<TypeSymbol>regexSym).type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cast(ast:\x20AST,\x20type:\x20Type):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.castWithCoercion(ast,\x20type,\x20true,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20castWithCoercion(ast:\x20AST,\x20type:\x20Type,\x20applyCoercion:\x20bool,\x20typeAssertion:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comparisonInfo\x20=\x20new\x20TypeComparisonInfo();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.sourceIsAssignableToTarget(ast.type,\x20type,\x20comparisonInfo)\x20||\x20(typeAssertion\x20&&\x20this.checker.sourceIsAssignableToTarget(type,\x20ast.type,\x20comparisonInfo)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(applyCoercion)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(ast,\x20ast.type,\x20type,\x20null,\x20this.scope,\x20comparisonInfo);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inScopeTypeCheck(ast:\x20AST,\x20enclosingScope:\x20SymbolScope):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20enclosingScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svThisFnc\x20=\x20this.thisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svThisClassNode\x20=\x20this.thisClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svCurrentModDecl\x20=\x20this.checker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevMethodStatus\x20=\x20this.enclosingFncIsMethod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container\x20=\x20this.scope.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnc:\x20FuncDecl\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(container.kind()\x20==\x20SymbolKind.Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSym\x20=\x20<TypeSymbol>container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20typeSym.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnc\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20innermost\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20typeSym.isMethod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnc\x20=\x20<FuncDecl>container.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSym.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(typeSym.declAST.nodeType\x20==\x20NodeType.ClassDeclaration))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20<TypeDeclaration>typeSym.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20innermost\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20<ModuleDeclaration>typeSym.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20use\x20innermost\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20container.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20fnc;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20updated\x20=\x20this.typeCheck(ast);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20svThisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20svThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20svThisClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20svCurrentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20prevMethodStatus;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20updated;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast.typeCheck(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inScopeTypeCheckDecl(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.VarDecl\x20||\x20ast.nodeType\x20==\x20NodeType.ArgDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckFunction(funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20inScopeTypeCheckBoundDecl(varDecl:\x20BoundDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20varDecl.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svThisFnc\x20=\x20this.thisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevMethodStatus\x20=\x20this.enclosingFncIsMethod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevLocationInfo\x20=\x20this.checker.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym\x20&&\x20sym.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceScope\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.ClassConstructorProperty)\x20?\x20sym.container.getType().constructorScope\x20:\x20sym.container.instanceScope();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Property)\x20&&\x20sym.container.declAST.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20<FuncDecl>sym.container.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20instanceScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container\x20=\x20sym.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svCurrentModDecl\x20=\x20this.checker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.units\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.unitIndex\x20>=\x200)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(sym.unitIndex\x20<\x20this.checker.units.length))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20this.checker.units[sym.unitIndex];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20unknownLocationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20container\x20linkage\x20for\x20function\x20expressions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(container.kind()\x20==\x20SymbolKind.Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSym\x20=\x20<TypeSymbol>container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20typeSym.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20typeSym.isMethod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20type.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20<ModuleDeclaration>container.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20container\x20=\x20container.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBoundDecl(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20svCurrentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20svThisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20svThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20prevLocationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20prevMethodStatus;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveBoundDecl(varDecl:\x20BoundDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr.type\x20==\x20null\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(varDecl.typeExpr.type\x20&&\x20varDecl.typeExpr.type\x20==\x20this.anyType\x20&&\x20this.scope)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.typeExpr.type.symbol\x20==\x20null\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(varDecl.typeExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20varDecl.typeExpr.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym.setType(varDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(varDecl.init\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.implicitAny)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(varDecl,\x20\x22type\x20implicitly\x20set\x20to\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym.isType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tsym\x20=\x20<TypeSymbol>varDecl.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(tsym.isMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22Cannot\x20bind\x20method\x20group\x20to\x20variable.\x20\x20(Did\x20you\x20mean\x20to\x20use\x20\x27declare\x20function\x27\x20instead\x20of\x20\x27declare\x20var\x27?)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22Cannot\x20bind\x20type\x20to\x20variable\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym.setType(varDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBoundDecl(varDecl:\x20BoundDecl):\x20VarDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20symbol\x20has\x20already\x20been\x20added\x20to\x20the\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20infSym\x20=\x20<InferenceSymbol>varDecl.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(infSym\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.typeCheck(varDecl.init);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.checker.widenType(varDecl.init.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.implicitAny)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(varDecl,\x20\x22type\x20implicitly\x20set\x20to\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(infSym.typeCheckStatus\x20==\x20TypeCheckStatus.Started)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.implicitAny)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(varDecl,\x20\x22type\x20implicitly\x20set\x20to\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20infSym.setType(this.anyType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(infSym.typeCheckStatus\x20==\x20TypeCheckStatus.NotStarted)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20infSym.typeCheckStatus\x20=\x20TypeCheckStatus.Started;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.addStartedPTO(infSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resolved\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20propagate\x20declared\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveBoundDecl(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resolved\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20varDecl.typeExpr.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20infSym.typeCheckStatus\x20=\x20this.checker.getTypeCheckFinishedStatus();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20bound\x20decl\x20is\x20a\x20function-local\x20static,\x20we\x20need\x20to\x20set\x20the\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20encapsulating\x20scope\x20to\x20the\x20function\x27s\x20member\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isLocalStatic\x20=\x20hasFlag(varDecl.varFlags,\x20VarFlags.LocalStatic);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applyTargetType\x20=\x20!varDecl.init.isParenthesized;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isLocalStatic)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20varDecl.sym.container.getType().memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Mark\x20Lambda\x20expressions\x20with\x20IsPropertyBound\x20flag\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Property)\x20&&\x20this.thisClassNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(varDecl.init,\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast\x20&&\x20ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag((<FuncDecl>ast).fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Found\x20a\x20Lambda,\x20mark\x20it\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>ast).fncFlags\x20|=\x20FncFlags.IsPropertyBound;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Only\x20mark\x20the\x20top\x20level\x20functions\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(varDecl.type,\x20this.checker.inProvisionalTypecheckMode(),\x20applyTargetType,\x20varDecl.init);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20cast\x20is\x20to\x20a\x20target\x20type,\x20in\x20the\x20case\x20of\x20a\x20funcdecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20we\x20may\x20overwrite\x20the\x20init\x27s\x20type\x20with\x20one\x20generated\x20from\x20a\x20signature.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20that\x20case,\x20we\x20need\x20to\x20preserve\x20the\x20contained\x20scope\x20of\x20the\x20actual\x20decl\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preserveScope\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preservedContainedScope\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preservedContainedScope\x20=\x20varDecl.init.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preserveScope\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init.type\x20==\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22Cannot\x20assign\x20type\x20\x27void\x27\x20to\x20variable\x20\x27\x22\x20+\x20varDecl.id.actualText\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.castWithCoercion(varDecl.init,\x20varDecl.type,\x20applyTargetType\x20&&\x20!this.checker.inProvisionalTypecheckMode(),\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preserveScope\x20&&\x20varDecl.init.type.containedScope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init.type.containedScope\x20=\x20preservedContainedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.checker.widenType(varDecl.init.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.type\x20==\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22Cannot\x20assign\x20type\x20\x27void\x27\x20to\x20variable\x20\x27\x22\x20+\x20varDecl.id.actualText\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20infSym.setType(varDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!resolved)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveBoundDecl(varDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20infSym.typeCheckStatus\x20=\x20this.checker.getTypeCheckFinishedStatus();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.typeStatusIsFinished(infSym.typeCheckStatus)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(infSym.declAST\x20!=\x20varDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.init)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.typeCheck(varDecl.init);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.type\x20=\x20infSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.init\x20=\x20this.cast(varDecl.init,\x20varDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.id\x20&&\x20varDecl.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.id.sym\x20=\x20varDecl.sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20if\x20variable\x20satisfies\x20type\x20privacy\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym\x20&&\x20varDecl.sym.container)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(varDecl.sym.getType(),\x20varDecl.sym,\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20this.varPrivacyErrorReporter(varDecl,\x20typeName,\x20isModuleName));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20<VarDecl>varDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20varPrivacyErrorReporter(varDecl:\x20BoundDecl,\x20typeName:\x20string,\x20isModuleName:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isModuleName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quotestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isQuoted(typeName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quotestring\x20=\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20is\x20using\x20inaccessible\x20module\x20\x22\x20+\x20quotestring\x20+\x20typeName\x20+\x20quotestring;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20has\x20or\x20is\x20using\x20private\x20type\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Public))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym.container.declAST.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22property\x20\x27\x22\x20+\x20varDecl.sym.name\x20+\x20\x22\x27\x20of\x20exported\x20interface\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22public\x20member\x20\x27\x22\x20+\x20varDecl.sym.name\x20+\x20\x22\x27\x20of\x20exported\x20class\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22exported\x20variable\x20\x27\x22\x20+\x20varDecl.sym.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckSuper(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisType\x20&&\x20(this.enclosingFncIsMethod\x20&&\x20!this.thisFnc.isStatic())\x20&&\x20this.thisType.baseClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.thisType.baseClass();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20redirect\x20\x27super\x27\x20used\x20within\x20lambdas\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.enclosingFncIsMethod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20&&\x20this.thisType.baseClass()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20&&\x20hasFlag(this.thisFnc.fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Find\x20the\x20closest\x20non\x20lambda\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosingFnc\x20=\x20this.thisFnc.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(hasFlag(enclosingFnc.fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingFnc\x20=\x20enclosingFnc.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20lambda\x20is\x20enclosed\x20is\x20a\x20valid\x20member,\x20use\x20the\x20base\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingFnc\x20&&\x20(enclosingFnc.isMethod()\x20||\x20enclosingFnc.isConstructor)\x20&&\x20!enclosingFnc.isStatic())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.thisType.baseClass();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingFnc.setHasSuperReferenceInFatArrowFunction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.invalidSuperReference(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckThis(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20illegalThisRef\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x27this\x27\x20in\x20class\x20bodies\x20should\x20bind\x20to\x20\x27any\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode\x20&&\x20this.thisClassNode.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20illegalThisRef\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.currentModDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(ast,\x20\x22\x27this\x27\x20may\x20not\x20be\x20referenced\x20within\x20module\x20bodies\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode\x20&&\x20(hasFlag(this.thisFnc.fncFlags,\x20FncFlags.IsPropertyBound)\x20||\x20(this.inSuperCall\x20&&\x20hasFlag((<ClassDeclaration>this.thisClassNode).varFlags,\x20VarFlags.ClassSuperMustBeFirstCallInConstructor))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20illegalThisRef\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc.isMethod()\x20||\x20this.thisFnc.isConstructor\x20||\x20this.thisFnc.isTargetTypedAsMethod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisType\x20&&\x20!(this.thisFnc.fncFlags\x20&\x20FncFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20redirect\x20\x27this\x27\x20used\x20within\x20lambdas\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.enclosingFncIsMethod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(this.thisFnc.fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20enclosing\x20function\x20was\x20bound\x20to\x20a\x20property,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20checkInitSelf\x20would\x20not\x20have\x20been\x20able\x20to\x20mark\x20the\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20function\x20for\x20a\x20self\x20init\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc.boundToProperty)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container\x20=\x20this.thisFnc.boundToProperty.sym.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(container.declAST.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>container.declAST).setHasSelfReference();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20encFnc\x20=\x20this.thisFnc.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20firstEncFnc\x20=\x20encFnc;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20while\x20(encFnc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode\x20&&\x20hasFlag(encFnc.fncFlags,\x20FncFlags.IsPropertyBound))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20illegalThisRef\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(encFnc.fncFlags,\x20FncFlags.IsFatArrowFunction)\x20||\x20encFnc.hasSelfReference())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20encFnc.setHasSelfReference();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20encFnc\x20=\x20encFnc.enclosingFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!encFnc\x20&&\x20firstEncFnc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20encFnc\x20=\x20firstEncFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20encFnc.setHasSelfReference();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!encFnc)\x20{\x20//\x20the\x20lambda\x20is\x20bound\x20at\x20the\x20top-level...\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ClassDeclaration>this.thisClassNode).varFlags\x20|=\x20VarFlags.MustCaptureThis;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.currentModDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl.modFlags\x20|=\x20ModuleFlags.MustCaptureThis;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.mustCaptureGlobalThis\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(encFnc\x20&&\x20(encFnc.isMethod()\x20||\x20encFnc.isConstructor)\x20&&\x20this.thisType\x20&&\x20!hasFlag(encFnc.fncFlags,\x20FncFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(illegalThisRef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(ast,\x20\x22Keyword\x20\x27this\x27\x20cannot\x20be\x20referenced\x20in\x20initializers\x20in\x20a\x20class\x20body,\x20or\x20in\x20super\x20constructor\x20calls\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setTypeFromSymbol(ast:\x20AST,\x20symbol:\x20Symbol):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.isVariable())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.isInferenceSymbol())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20infSym\x20=\x20<InferenceSymbol>symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(infSym.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!this.checker.typeStatusIsFinished(infSym.typeCheckStatus))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inScopeTypeCheckDecl(infSym.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.checker.styleSettings.innerScopeDeclEscape)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(infSym.declAST\x20&&\x20(infSym.declAST.nodeType\x20==\x20NodeType.VarDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.nestingLevel\x20<\x20(<VarDecl>infSym.declAST).nestingLevel)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(ast,\x20\x22Illegal\x20reference\x20to\x20a\x20variable\x20defined\x20in\x20more\x20nested\x20scope\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol.writeable())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20=\x20ast.flags\x20&\x20(~(ASTFlags.Writeable));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(symbol.isType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.flags\x20=\x20ast.flags\x20&\x20(~(ASTFlags.Writeable));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.symbolDoesNotReferToAValue(ast,\x20symbol.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckName(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20identifier\x20=\x20<Identifier>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.inWith)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20identifier.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typespace\x20=\x20this.inTypeRefTypeCheck;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idText\x20=\x20identifier.text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20originalIdText\x20=\x20idText;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isDynamicModuleName\x20=\x20isQuoted(identifier.text);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20this.scope.find(idText,\x20false,\x20typespace);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null\x20&&\x20isDynamicModuleName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20this.checker.findSymbolForDynamicModule(idText,\x20this.currentScript.locationInfo.filename,\x20(id)\x20=>\x20this.scope.find(id,\x20false,\x20typespace));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!identifier.isMissing())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.unresolvedSymbol(identifier,\x20identifier.text);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20identifier.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(optimizeModuleCodeGen\x20&&\x20symbol\x20&&\x20symbol.isType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symType\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Once\x20the\x20type\x20has\x20been\x20referenced\x20outside\x20of\x20a\x20type\x20ref\x20position,\x20there\x27s\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20going\x20back\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symType\x20&&\x20(<TypeSymbol>symbol).aliasLink\x20&&\x20(<TypeSymbol>symbol).onlyReferencedAsTypeRef)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modDecl\x20=\x20<ModuleDeclaration>symType.symbol.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(modDecl\x20&&\x20hasFlag(modDecl.modFlags,\x20ModuleFlags.IsDynamic))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>symbol).onlyReferencedAsTypeRef\x20=\x20this.inTypeRefTypeCheck;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.declAST.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!(<FuncDecl>symbol.declAST).returnTypeAnnotation\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>symbol.declAST).signature.typeCheckStatus\x20==\x20TypeCheckStatus.Started)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>symbol.declAST).type.symbol.flags\x20|=\x20SymbolFlags.RecursivelyReferenced;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>symbol.declAST).signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setTypeFromSymbol(ast,\x20symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20identifier.sym\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc.type\x20&&\x20symbol.container\x20!=\x20this.thisFnc.type.symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc.freeVariables[this.thisFnc.freeVariables.length]\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckScript(script:\x20Script):\x20Script\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20this.checker.globalScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20a\x20top-level\x20module,\x20the\x20globals\x20have\x20already\x20been\x20added\x20to\x20the\x20implicit\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20module\x20decl\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!script.topLevelMod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addLocalsFromScope(this.scope,\x20this.checker.gloMod,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.vars,\x20this.checker.globals,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentScript\x20=\x20script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.bod\x20=\x20<ASTList>this.typeCheck(script.bod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentScript\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20script;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBitNot(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unex\x20=\x20<UnaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.operand\x20=\x20this.typeCheck(unex.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.type\x20=\x20this.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20unex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckUnaryNumberOperator(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unex\x20=\x20<UnaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.operand\x20=\x20this.typeCheck(unex.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.type\x20=\x20this.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckLogNot(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unex\x20=\x20<UnaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.operand\x20=\x20this.typeCheck(unex.operand);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.type\x20=\x20this.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20unex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20astIsWriteable(ast:\x20AST):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20hasFlag(ast.flags,\x20ASTFlags.Writeable);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckIncOrDec(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20unex\x20=\x20<UnaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lval\x20=\x20unex.operand;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.astIsWriteable(unex))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.valueCannotBeModified(unex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex.type\x20=\x20this.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unex\x20=\x20<UnaryExpression>\x20this.typeCheckUnaryNumberOperator(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(unex.operand.type\x20!=\x20this.checker.numberType\x20&&\x20unex.operand.type\x20!=\x20this.checker.anyType\x20&&\x20!(unex.operand.type.typeFlags\x20&\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(ast,\x20\x22\x27++\x27\x20and\x20\x27--\x27\x20may\x20only\x20be\x20applied\x20to\x20operands\x20of\x20type\x20\x27number\x27\x20or\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20unex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBitwiseOperator(ast:\x20AST,\x20assignment:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resultType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20binex.operand2.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(assignment\x20&&\x20(!this.astIsWriteable(binex)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.valueCannotBeModified(binex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.bitwise)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(ast,\x20\x22use\x20of\x20\x22\x20+\x20nodeTypeTable[binex.nodeType]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.sourceIsSubtypeOfTarget(leftType,\x20this.doubleType)\x20&&\x20(this.checker.sourceIsSubtypeOfTarget(rightType,\x20this.doubleType)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((leftType\x20==\x20this.booleanType)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(rightType\x20==\x20this.booleanType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((rightType\x20==\x20this.anyType)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(rightType\x20==\x20this.doubleType)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(rightType\x20==\x20this.booleanType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(rightType\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((leftType\x20==\x20this.anyType)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(leftType\x20==\x20this.doubleType)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(leftType\x20==\x20this.booleanType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(resultType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(binex,\x20leftType,\x20rightType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.printLabel(),\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20resultType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckArithmeticOperator(ast:\x20AST,\x20assignment:\x20bool):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20binex.operand2.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(assignment\x20&&\x20(!this.astIsWriteable(binex.operand1)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.valueCannotBeModified(binex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.bitwise\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((binex.nodeType\x20==\x20NodeType.And)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.nodeType\x20==\x20NodeType.Or)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.nodeType\x20==\x20NodeType.AsgAnd)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.nodeType\x20==\x20NodeType.AsgOr)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(ast,\x20\x22use\x20of\x20\x22\x20+\x20nodeTypeTable[binex.nodeType]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20null\x20||\x20rightType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22Could\x20not\x20typecheck\x20arithmetic\x20operation.\x20\x20Possible\x20recursive\x20typecheck\x20error?\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nodeType\x20=\x20binex.nodeType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.isNullOrUndefinedType(leftType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftType\x20=\x20rightType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.isNullOrUndefinedType(rightType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rightType\x20=\x20leftType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftType\x20=\x20this.checker.widenType(leftType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20rightType\x20=\x20this.checker.widenType(rightType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(nodeType\x20==\x20NodeType.Add\x20||\x20nodeType\x20==\x20NodeType.AsgAdd)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20this.checker.stringType\x20||\x20rightType\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.numberType\x20&&\x20rightType\x20==\x20this.checker.numberType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.sourceIsSubtypeOfTarget(leftType,\x20this.checker.numberType)\x20&&\x20this.checker.sourceIsSubtypeOfTarget(rightType,\x20this.checker.numberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.anyType\x20||\x20rightType\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(binex,\x20leftType,\x20rightType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.printLabel(),\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20this.checker.numberType\x20&&\x20rightType\x20==\x20this.checker.numberType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.sourceIsSubtypeOfTarget(leftType,\x20this.checker.numberType)\x20&&\x20this.checker.sourceIsSubtypeOfTarget(rightType,\x20this.checker.numberType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.anyType\x20||\x20rightType\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(binex,\x20leftType,\x20rightType,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.printLabel(),\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckDotOperator(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftIsFnc\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftScope:\x20SymbolScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20replace\x20with\x20get\x20member\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.stringInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20this.stringInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.doubleType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.numberInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20this.numberInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.booleanType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.booleanInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20this.booleanInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((leftType.call\x20||\x20leftType.construct)\x20&&\x20leftType.members\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.functionInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20this.functionInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.arrayInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arrInstType\x20=\x20leftType.elementType.getArrayBase(this.arrayInterfaceType,\x20this.checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20arrInstType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20leftScope\x20=\x20leftType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftScope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.expectedClassOrInterface(binex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20propertyName\x20=\x20<Identifier>binex.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lhsIsEnclosingType\x20=\x20(this.thisClassNode\x20&&\x20binex.operand1.type\x20==\x20this.thisClassNode.type.instanceType)\x20||\x20this.inTypeRefTypeCheck;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20leftScope.find(propertyName.text,\x20!lhsIsEnclosingType,\x20this.inTypeRefTypeCheck);\x20//\x20only\x20search\x20the\x20public\x20members,\x20unless\x20the\x20rhs\x20is\x20a\x20\x27this\x27\x20pointer\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20symbol\x20wasn\x27t\x20found,\x20delegate\x20to\x20the\x20appropriate\x20\x27virtual\x27\x20parent\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.objectInterfaceType\x20&&\x20leftType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20\x27Object\x27\x20for\x20the\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType.isReferenceType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20this.objectInterfaceType.memberScope.find(propertyName.text,\x20false,\x20this.inTypeRefTypeCheck);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20check\x20\x27Function\x27,\x20if\x20appropriate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.functionInterfaceType\x20&&\x20(leftType.call\x20||\x20leftType.construct))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20this.functionInterfaceType.memberScope.find(propertyName.text,\x20false,\x20this.inTypeRefTypeCheck);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!symbol\x20||\x20(!symbol.visible(leftScope,\x20this.checker)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(propertyName,\x20\x22The\x20property\x20\x27\x22\x20+\x20propertyName.actualText\x20+\x20\x22\x27\x20does\x20not\x20exist\x20on\x20value\x20of\x20type\x20\x27\x22\x20+\x20leftType.getScopedTypeName(this.scope)\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!this.inTypeRefTypeCheck)\x20{\x20\x20//\x20if\x20it\x27s\x20a\x20dotted\x20type\x20reference,\x20we\x27ll\x20catch\x20the\x20visibility\x20error\x20during\x20binding\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22The\x20property\x20\x27\x22\x20+\x20propertyName.actualText\x20+\x20\x22\x20on\x20type\x20\x27\x22\x20+\x20leftType.getScopedTypeName(this.scope)\x20+\x20\x22\x27\x20is\x20not\x20visible\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.isVariable())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol.isInferenceSymbol())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20infSym\x20=\x20<InferenceSymbol>symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(infSym.declAST\x20&&\x20!this.checker.typeStatusIsFinished(infSym.typeCheckStatus))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inScopeTypeCheckDecl(infSym.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20propertyName.sym\x20=\x20symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binex.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBooleanOperator(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20binex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!(this.checker.sourceIsAssignableToTarget(leftType,\x20rightType)))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(!(this.checker.sourceIsAssignableToTarget(rightType,\x20leftType))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(binex,\x20leftType,\x20rightType,\x20binex.printLabel(),\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckAsgOperator(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applyTargetType\x20=\x20!binex.operand2.isParenthesized;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(binex.operand1.type,\x20this.checker.inProvisionalTypecheckMode(),\x20applyTargetType,\x20binex.operand2);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20binex.operand2.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(this.astIsWriteable(binex.operand1)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.valueCannotBeModified(binex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binex.operand1.nodeType\x20==\x20NodeType.Call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20callEx\x20=\x20<CallExpression>binex.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preserveScope\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preservedContainedScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binex.operand2.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preservedContainedScope\x20=\x20binex.operand2.type.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20preserveScope\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Do\x20not\x20re-write\x20the\x20AST\x20in\x20provisional\x20typecheck\x20mode\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.castWithCoercion(binex.operand2,\x20leftType,\x20applyTargetType\x20&&\x20!this.checker.inProvisionalTypecheckMode(),\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(preserveScope\x20&&\x20binex.operand2.type.containedScope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2.type.containedScope\x20=\x20preservedContainedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20rightType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckIndex(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x20//\x20ObjExpr\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x20//\x20IndexExpr\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.checker.styleSettings.literalSubscript)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binex.operand2.nodeType\x20==\x20NodeType.QString)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(ast,\x20\x22use\x20literal\x20subscript\x20(\x27.\x27)\x20notation\x20instead)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20objExprType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20indexExprType\x20=\x20binex.operand2.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(objExprType.elementType)\x20{\x20//\x20arrays\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indexExprType\x20==\x20this.checker.anyType\x20||\x20indexExprType\x20==\x20this.checker.numberType\x20||\x20hasFlag(indexExprType.typeFlags,\x20TypeFlags.IsEnum))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20objExprType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(indexExprType\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22Illegal\x20property\x20access\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(objExprType.index)\x20{\x20//\x20types\x20with\x20index\x20sigs\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(indexExprType\x20==\x20this.checker.anyType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!((objExprType.index.flags\x20&\x20SignatureFlags.IsStringIndexer)\x20||\x20(objExprType.index.flags\x20&\x20SignatureFlags.IsNumberIndexer))\x20||\x20//\x20REVIEW:\x20unvalidated\x20type\x20expression\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((objExprType.index.flags\x20&\x20SignatureFlags.IsStringIndexer)\x20&&\x20indexExprType\x20==\x20this.checker.stringType)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20((objExprType.index.flags\x20&\x20SignatureFlags.IsNumberIndexer)\x20&&\x20(indexExprType\x20==\x20this.checker.numberType\x20||\x20hasFlag(indexExprType.typeFlags,\x20TypeFlags.IsEnum))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig\x20=\x20this.resolveOverload(ast,\x20objExprType.index);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sig)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(indexExprType\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22Illegal\x20property\x20access\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((objExprType\x20==\x20this.checker.anyType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objExprType\x20==\x20this.checker.stringType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objExprType\x20==\x20this.checker.numberType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objExprType\x20==\x20this.checker.booleanType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objExprType.isReferenceType())\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(indexExprType\x20==\x20this.checker.anyType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20indexExprType\x20==\x20this.checker.stringType\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(indexExprType\x20==\x20this.checker.numberType\x20||\x20hasFlag(indexExprType.typeFlags,\x20TypeFlags.IsEnum))))\x20{\x20//\x20REVIEW:\x20Do\x20we\x20want\x20to\x20allow\x20indexes\x20of\x20type\x20\x27number\x27?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22Illegal\x20property\x20access\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckInOperator(binex:\x20BinaryExpression):\x20BinaryExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.cast(this.typeCheck(binex.operand1),\x20this.stringType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!((binex.operand1.type\x20==\x20this.checker.anyType\x20||\x20binex.operand1.type\x20==\x20this.checker.stringType)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.operand2.type\x20==\x20this.anyType\x20||\x20this.checker.sourceIsSubtypeOfTarget(binex.operand2.type,\x20this.objectInterfaceType))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(binex,\x20\x22The\x20in\x20operator\x20requires\x20the\x20left\x20operand\x20to\x20be\x20of\x20type\x20Any\x20or\x20the\x20String\x20primitive\x20type,\x20and\x20the\x20right\x20operand\x20to\x20be\x20of\x20type\x20Any\x20or\x20an\x20object\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckShift(binex:\x20BinaryExpression,\x20assignment:\x20bool):\x20BinaryExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.cast(this.typeCheck(binex.operand1),\x20this.doubleType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.cast(this.typeCheck(binex.operand2),\x20this.doubleType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(assignment\x20&&\x20(!(this.astIsWriteable(binex.operand1))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.valueCannotBeModified(binex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.doubleType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckQMark(trinex:\x20ConditionalExpression):\x20ConditionalExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.operand1\x20=\x20this.typeCheck(trinex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.operand2\x20=\x20this.typeCheck(trinex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.operand3\x20=\x20this.typeCheck(trinex.operand3);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20trinex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20trinex.operand3.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20rightType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.type\x20=\x20leftType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.sourceIsSubtypeOfTarget(leftType,\x20rightType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.type\x20=\x20rightType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.sourceIsSubtypeOfTarget(rightType,\x20leftType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.type\x20=\x20leftType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20trinex.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.incompatibleTypes(trinex,\x20leftType,\x20rightType,\x20trinex.printLabel(),\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20trinex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addFormals(container:\x20Symbol,\x20signature:\x20Signature,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table:\x20IHashTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20signature.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20<ParameterSymbol>signature.parameters[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table.add(symbol.name,\x20symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20We\x20use\x20isModContainer\x20instead\x20of\x20container.getType().isModuleType\x20because\x20container.type\x20may\x20be\x20null\x20at\x20this\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20juncture\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addLocalsFromScope(scope:\x20SymbolScope,\x20container:\x20Symbol,\x20vars:\x20ASTList,\x20table:\x20IHashTable,\x20isModContainer:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20vars.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasArgsDef\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20local\x20=\x20<VarDecl>vars.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(((local.sym\x20==\x20null)\x20||\x20(local.sym.kind()\x20!=\x20SymbolKind.Field)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((result\x20=\x20table.lookup(local.id.text))\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20localVar:\x20ValueLocation\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varSym\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(local.varFlags,\x20VarFlags.Static))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.varFlags\x20|=\x20VarFlags.LocalStatic;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varSym\x20=\x20new\x20FieldSymbol(local.id.text,\x20local.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x20localVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varSym\x20=\x20new\x20VariableSymbol(local.id.text,\x20local.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varSym.transferVarFlags(local.varFlags);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.symbol\x20=\x20varSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varSym.declAST\x20=\x20local;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.typeLink.ast\x20=\x20local.typeExpr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.resolveTypeLink(scope,\x20localVar.typeLink,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((local.type\x20==\x20null)\x20&&\x20(local.init\x20==\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.typeLink.type\x20=\x20local.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.sym\x20=\x20localVar.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table.add(local.id.text,\x20varSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(local.id.text\x20==\x20\x22arguments\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasArgsDef\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.type\x20=\x20result.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.sym\x20=\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isModContainer)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasArgsDef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argLoc\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argLoc.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20theArgSym\x20=\x20new\x20VariableSymbol(\x22arguments\x22,\x20vars.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argLoc);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20user\x20is\x20using\x20a\x20custom\x20lib.d.ts\x20where\x20IArguments\x20has\x20not\x20been\x20defined\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20(or\x20they\x27re\x20compiling\x20with\x20the\x20--nolib\x20option),\x20use\x20\x27any\x27\x20as\x20the\x20argument\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.iargumentsInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argumentsSym\x20=\x20scope.find(\x22IArguments\x22,\x20false,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(argumentsSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argumentsSym.flags\x20|=\x20SymbolFlags.CompilerGenerated;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.iargumentsInterfaceType\x20=\x20argumentsSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.iargumentsInterfaceType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argLoc.typeLink.type\x20=\x20this.iargumentsInterfaceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table.add(\x22arguments\x22,\x20theArgSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20isClass\x20param\x20may\x20now\x20be\x20redundant\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addConstructorLocalArgs(container:\x20Symbol,\x20args:\x20ASTList,\x20table:\x20IHashTable,\x20isClass:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(args)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20args.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20local\x20=\x20<ArgDecl>args.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((local.sym\x20==\x20null)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(isClass\x20||\x20(local.sym.kind()\x20!=\x20SymbolKind.Field)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((result\x20=\x20table.lookup(local.id.text))\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolveBoundDecl(local);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20localVar:\x20ValueLocation\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varSym\x20=\x20new\x20ParameterSymbol(local.id.text,\x20local.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varSym.declAST\x20=\x20local;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.symbol\x20=\x20varSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.typeLink.type\x20=\x20local.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20localVar.symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.sym\x20=\x20localVar.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20table.add(local.id.text,\x20varSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.type\x20=\x20result.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20local.sym\x20=\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkInitSelf(funcDecl:\x20FuncDecl):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isMethod())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20freeVars\x20=\x20funcDecl.freeVariables;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20freeVars.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20freeVars[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym.isInstanceProperty())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fns\x20=\x20funcDecl.scopes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnsLen\x20=\x20fns.members.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20fnsLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fn\x20=\x20<FuncDecl>fns.members[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checkInitSelf(fn))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkPromoteFreeVars(funcDecl:\x20FuncDecl,\x20constructorSym:\x20Symbol):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20freeVars\x20=\x20funcDecl.freeVariables;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20k\x20=\x200,\x20len\x20=\x20freeVars.length;\x20k\x20<\x20len;\x20k++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20freeVars[k];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((!sym.isInstanceProperty())\x20&&\x20(sym.container\x20==\x20constructorSym))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceFilter.reset();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scope.search(instanceFilter,\x20sym.name,\x20false,\x20false))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Constructor-local\x20variable\x20shadows\x20class\x20property\x20\x27\x22\x20+\x20sym.name\x20+\x20\x22\x27.\x20To\x20access\x20the\x20class\x20property,\x20use\x20\x27self.\x22\x20+\x20sym.name\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Constructor-local\x20variables\x20may\x20not\x20be\x20accessed\x20from\x20instance\x20method\x20bodies.\x20Consider\x20changing\x20local\x20variable\x20\x27\x22\x20+\x20sym.name\x20+\x20\x22\x27\x20to\x20a\x20class\x20property\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20allReturnsAreVoid(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20in\x20the\x20case\x20of\x20a\x20function\x20or\x20method\x20with\x20no\x20declared\x20return\x20type,\x20walk\x20the\x20body\x20to\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20pre-emptively\x20determine\x20if\x20the\x20function\x20has\x20a\x20return\x20type\x20of\x20void\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Eventually,\x20we\x27ll\x20want\x20to\x20perform\x20exit\x20graph\x20analysis\x20to\x20determine\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20function\x20ever\x20\x22escapes\x22\x20without\x20a\x20return\x20expression\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20would\x20require\x20moving\x20some\x20of\x20this\x20logic\x20into\x20the\x20function\x27s\x20typecheck-proper,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20which\x20would\x20slow\x20things\x20down\x20a\x20fair\x20bit,\x20but\x20would\x20open\x20up\x20more\x20analysis\x20opportunities\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20allReturnsAreVoid\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.signature.returnType.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preFindReturnExpressionTypes\x20=\x20function\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ast.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20don\x27t\x20recurse\x20into\x20a\x20function\x20decl\x20-\x20we\x20don\x27t\x20want\x20to\x20confuse\x20a\x20nested\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20return\x20type\x20with\x20the\x20top-level\x20function\x27s\x20return\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Return:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20returnStmt:\x20ReturnStatement\x20=\x20<ReturnStatement>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(returnStmt.returnExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allReturnsAreVoid\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goNextSibling\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(funcDecl.bod,\x20preFindReturnExpressionTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20allReturnsAreVoid;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20classConstructorHasSuperCall(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20foundSuper\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preFindSuperCall\x20=\x20function\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20go\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(ast.nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.Call:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20call\x20=\x20<CallExpression>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(call.target.nodeType\x20==\x20NodeType.Super)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20go\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20foundSuper\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20go;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(funcDecl.bod,\x20preFindSuperCall);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20foundSuper;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20baseListPrivacyErrorReporter(bases:\x20ASTList,\x20i:\x20number,\x20declSymbol:\x20Symbol,\x20extendsList:\x20bool,\x20typeName:\x20string,\x20isModuleName:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseSymbol\x20=\x20bases.members[i].type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declTypeString\x20=\x20(declSymbol.declAST.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20?\x20\x22interface\x22\x20:\x20\x22class\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseListTypeString\x20=\x20extendsList\x20?\x20\x22extends\x22\x20:\x20\x22implements\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseTypeString\x20=\x20(baseSymbol.declAST.nodeType\x20==\x20NodeType.InterfaceDeclaration)\x20?\x20\x22interface\x22\x20:\x20\x22class\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isModuleName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quotestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isQuoted(typeName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quotestring\x20=\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20is\x20using\x20inaccessible\x20module\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseTypeString\x20=\x20\x22\x20\x22\x20+\x20baseTypeString\x20+\x20\x22\x20from\x20private\x20module\x20\x22\x20+\x20quotestring\x20+\x20typeName\x20+\x20quotestring;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseTypeString\x20=\x20\x22\x20private\x20\x22\x20+\x20baseTypeString\x20+\x20\x22\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(bases.members[i],\x20\x22exported\x20\x22\x20+\x20declTypeString\x20+\x20\x22\x20\x27\x22\x20+\x20declSymbol.name\x20+\x20\x22\x27\x20\x22\x20+\x20baseListTypeString\x20+\x20baseTypeString);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20if\x20declSymbol\x20can\x20satisfy\x20baselist\x20privacy\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20typeCheckBaseListPrivacy(bases:\x20ASTList,\x20declSymbol:\x20Symbol,\x20extendsList:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20basesLen\x20=\x20bases.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20basesLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!bases.members[i].type\x20||\x20bases.members[i].type\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20type\x20is\x20coming\x20from\x20external\x20module\x20so\x20it\x20has\x20to\x20be\x20exported,\x20or\x20we\x27re\x20recovering\x20from\x20an\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20error\x20condition\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkSymbolPrivacy(bases.members[i].type.symbol,\x20declSymbol,\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20this.baseListPrivacyErrorReporter(bases,\x20i,\x20declSymbol,\x20extendsList,\x20typeName,\x20isModuleName));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Checks\x20if\x20the\x20privacy\x20is\x20satisfied\x20by\x20typeSymbol\x20that\x20is\x20used\x20in\x20the\x20declaration\x20inside\x20container\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20checkSymbolPrivacy(typeSymbol:\x20TypeSymbol,\x20declSymbol:\x20Symbol,\x20errorCallback:\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20void\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20externalModuleSymbol:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declSymbolPath:\x20Symbol[]\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Type\x20is\x20visible\x20type,\x20so\x20this\x20can\x20be\x20used\x20by\x20anyone.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.isExternallyVisible(this.checker))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Symbol\x20could\x20be\x20from\x20external\x20module,\x20go\x20ahead\x20and\x20find\x20the\x20external\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbolPath\x20=\x20typeSymbol.pathToRoot();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declSymbolPath\x20=\x20declSymbol.pathToRoot();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbolLength\x20=\x20typeSymbolPath.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declSymbolPathLength\x20=\x20declSymbolPath.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbolLength\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbolPath[typeSymbolLength\x20-\x201].getType().isModuleType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>typeSymbolPath[typeSymbolLength\x20-\x201]).isDynamic\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbolPath[typeSymbolLength\x20-\x201]\x20!=\x20declSymbolPath[declSymbolPathLength\x20-\x201])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Symbol\x20from\x20external\x20module\x20that\x20was\x20imported\x20using\x20one\x20of\x20the\x20import\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20externalModuleSymbol\x20=\x20<TypeSymbol>typeSymbolPath[typeSymbolLength\x20-\x201];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(typeSymbolLength\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Is\x20symbol\x20from\x20declared\x20quoted\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbolPath[typeSymbolLength\x20-\x202].getType().isModuleType()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>typeSymbolPath[typeSymbolLength\x20-\x202]).isDynamic\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(declSymbolPathLength\x20==\x201\x20||\x20typeSymbolPath[typeSymbolLength\x20-\x202]\x20!=\x20declSymbolPath[declSymbolPathLength\x20-\x202]))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20From\x20quoted\x20module\x20name\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20externalModuleSymbol\x20=\x20<TypeSymbol>typeSymbolPath[typeSymbolLength\x20-\x202];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(externalModuleSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Interface\x20symbol\x20doesn\x27t\x20reflect\x20correct\x20Exported\x20state\x20so\x20use\x20AST\x20instead\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceDecl:\x20InterfaceDeclaration\x20=\x20declSymbol.getInterfaceDeclFromSymbol(this.checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl\x20&&\x20!hasFlag(interfaceDecl.varFlags,\x20VarFlags.Exported))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20checkVisibilitySymbol\x20=\x20declSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Var\x20decl\x20symbol\x20doesnt\x20reflect\x20correct\x20exported\x20state\x20so\x20use\x20AST\x20instead\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20declSymbol.getVarDeclFromSymbol();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Private))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(hasFlag(varDecl.varFlags,\x20VarFlags.Public))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20a\x20member\x20from\x20class\x20so\x20check\x20visibility\x20of\x20its\x20container\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checkVisibilitySymbol\x20=\x20declSymbol.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20container\x20is\x20visible\x20from\x20global\x20scrope\x20it\x20is\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(checkVisibilitySymbol.isExternallyVisible(this.checker))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20privateSymbolName\x20=\x20typeSymbol.name;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20imported\x20typeSymbol\x20mark\x20it\x20as\x20visible\x20externally\x20and\x20verify\x20that\x20the\x20symbol\x20it\x20imports\x20is\x20visible\x20externally\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(externalModuleSymbol\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prettyName\x20=\x20externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prettyName\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol,\x20this.checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20privateSymbolName\x20=\x20externalModuleSymbol.prettyName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Visible\x20declaration\x20using\x20non\x20visible\x20type.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20errorCallback(privateSymbolName,\x20typeSymbol.name\x20!=\x20privateSymbolName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Checks\x20if\x20the\x20privacy\x20is\x20satisfied\x20by\x20type\x20that\x20is\x20used\x20in\x20the\x20declaration\x20inside\x20container\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20checkTypePrivacy(type:\x20Type,\x20declSymbol:\x20Symbol,\x20errorCallback:\x20(typeName:\x20string,\x20isModuleName\x20:\x20bool)\x20=>void\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Primitive\x20types\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(type\x20&&\x20type.primitiveTypeClass\x20==\x20Primitive.None))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20type\x20is\x20array,\x20check\x20element\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.isArray())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.checkTypePrivacy(type.elementType,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Going\x20to\x20be\x20printing\x20symbol\x20name,\x20verify\x20if\x20symbol\x20can\x20be\x20emitted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.symbol\x20&&\x20type.symbol.name\x20&&\x20type.symbol.name\x20!=\x20\x22_anonymous\x22\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(((type.call\x20==\x20null)\x20&&\x20(type.construct\x20==\x20null)\x20&&\x20(type.index\x20==\x20null))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(type.members\x20&&\x20(!type.isClass()))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.checkSymbolPrivacy(<TypeSymbol>type.symbol,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20symbols\x20for\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.members.allMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(sym.flags,\x20SymbolFlags.BuiltIn))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(sym.getType(),\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkSignatureGroupPrivacy(type.call,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkSignatureGroupPrivacy(type.construct,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkSignatureGroupPrivacy(type.index,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Checks\x20if\x20the\x20privacy\x20is\x20satisfied\x20by\x20typeSymbol\x20that\x20is\x20used\x20in\x20the\x20declaration\x20inside\x20container\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20checkSignatureGroupPrivacy(sgroup:\x20SignatureGroup,\x20declSymbol:\x20Symbol,\x20errorCallback:\x20(typeName:\x20string,\x20isModuleName\x20:\x20bool)\x20=>void\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sgroup)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20sgroup.signatures.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20sgroup.signatures.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20sgroup.signatures[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x201\x20&&\x20signature\x20==\x20sgroup.definitionSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20case\x20of\x20overloads\x20don\x27t\x20look\x20up\x20for\x20overload\x20defintion\x20types.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.returnType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(signature.returnType.type,\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLen\x20=\x20signature.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20paramLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20param\x20=\x20signature.parameters[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(param.getType(),\x20declSymbol,\x20errorCallback);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20functionArgumentPrivacyErrorReporter(funcDecl:\x20FuncDecl,\x20p:\x20number,\x20paramSymbol:\x20Symbol,\x20typeName:\x20string,\x20isModuleName:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isSetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.SetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPublicFunc\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Public);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isContainerInterface\x20=\x20funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker)\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isModuleName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quotestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isQuoted(typeName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quotestring\x20=\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20is\x20using\x20inaccessible\x20module\x20\x22\x20+\x20quotestring\x20+\x20typeName\x20+\x20quotestring;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20has\x20or\x20is\x20using\x20private\x20type\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isContainerInterface)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20\x22exported\x20class\x27s\x20constructor\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(isSetter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20(isPublicFunc\x20?\x20\x22public\x22\x20:\x20\x22exported\x22)\x20+\x20\x22\x20setter\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!isGetter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20(isPublicFunc\x20?\x20\x22public\x22\x20:\x20\x22exported\x22)\x20+\x20\x22\x20function\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20\x22exported\x20interface\x27s\x20constructor\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(funcDecl.isCallMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20\x22exported\x20interface\x27s\x20call\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[p],\x20\x22exported\x20interface\x27s\x20function\x20parameter\x20\x27\x22\x20+\x20paramSymbol.name\x20+\x20\x22\x27\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20returnTypePrivacyError(astError:\x20AST,\x20funcDecl:\x20FuncDecl,\x20typeName:\x20string,\x20isModuleName:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isSetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.SetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isPublicFunc\x20=\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.Public);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isContainerInterface\x20=\x20funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker)\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isModuleName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20quotestring\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isQuoted(typeName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20quotestring\x20=\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20is\x20using\x20inaccessible\x20module\x20\x22\x20+\x20quotestring\x20+\x20typeName\x20+\x20quotestring;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typestring\x20=\x20\x22\x20has\x20or\x20is\x20using\x20private\x20type\x20\x27\x22\x20+\x20typeName\x20+\x20\x22\x27\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!isContainerInterface)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isGetter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20(isPublicFunc\x20?\x20\x22public\x22\x20:\x20\x22exported\x22)\x20+\x20\x22\x20getter\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(!isSetter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20(isPublicFunc\x20?\x20\x22public\x22\x20:\x20\x22exported\x22)\x20+\x20\x22\x20function\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20\x22exported\x20interface\x27s\x20constructor\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(funcDecl.isCallMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20\x22exported\x20interface\x27s\x20call\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(funcDecl.isIndexerMember())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20\x22exported\x20interface\x27s\x20indexer\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(astError,\x20\x22exported\x20interface\x27s\x20function\x20return\x20type\x22\x20+\x20typestring);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20functionReturnTypePrivacyErrorReporter(funcDecl:\x20FuncDecl,\x20signature:\x20Signature,\x20typeName:\x20string,\x20isModuleName:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20reportOnFuncDecl\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Error\x20coming\x20from\x20return\x20annotation\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.returnTypeAnnotation\x20!=\x20null\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.returnTypeAnnotation.type\x20==\x20signature.returnType.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.returnTypePrivacyError(funcDecl.returnTypeAnnotation,\x20funcDecl,\x20typeName,\x20isModuleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Check\x20if\x20return\x20statement\x27s\x20type\x20matches\x20the\x20one\x20that\x20we\x20concluded\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20funcDecl.returnStatementsWithExpressions.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.returnStatementsWithExpressions[i].type\x20==\x20signature.returnType.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i],\x20funcDecl,\x20typeName,\x20isModuleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20reportOnFuncDecl\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(reportOnFuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Show\x20on\x20function\x20decl\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.returnTypePrivacyError(funcDecl,\x20funcDecl,\x20typeName,\x20isModuleName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckFunction(funcDecl:\x20FuncDecl):\x20FuncDecl\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnType\x20=\x20funcDecl.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fgSym\x20=\x20fnType.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20funcDecl.signature;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.typeStatusIsFinished(signature.typeCheckStatus))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(signature.typeCheckStatus\x20==\x20TypeCheckStatus.Started)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.returnTypeAnnotation\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.bod\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.isSignature()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!(funcDecl.isConstructor)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.allReturnsAreVoid(funcDecl))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.returnTypeAnnotation\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.implicitAny)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(funcDecl,\x20\x22type\x20implicitly\x20set\x20to\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.flags\x20|=\x20SymbolFlags.RecursivelyReferenced;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.typeCheckStatus\x20=\x20TypeCheckStatus.Started;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.addStartedPTO(signature);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevFnc\x20=\x20this.thisFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevMethodStatus\x20=\x20this.enclosingFncIsMethod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevClassNode\x20=\x20this.thisClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20funcDecl.isMethod()\x20||\x20funcDecl.isConstructor;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20container\x20=\x20funcDecl.type.symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevLocationInfo\x20=\x20this.checker.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcTable:\x20IHashTable\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20acceptedContextualType\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetParams:\x20ParameterSymbol[]\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetReturnType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isGetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isSetter\x20=\x20funcDecl.isAccessor()\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.SetAccessor);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorType:\x20Type\x20=\x20(isGetter\x20||\x20isSetter)\x20&&\x20funcDecl.accessorSymbol\x20?\x20funcDecl.accessorSymbol.getType()\x20:\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevModDecl\x20=\x20this.checker.currentModDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20!funcDecl.isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnType.instanceType\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Malformed\x20function\x20body\x20(is\x20this\x20a\x20class\x20named\x20the\x20same\x20as\x20an\x20existing\x20interface?)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20fnType.instanceType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ssb\x20=\x20<SymbolScopeBuilder>this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcTable\x20=\x20ssb.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((funcDecl.isSpecialFn()\x20&&\x20!(funcDecl.fncFlags\x20&\x20FncFlags.Signature))\x20||\x20funcDecl.isOverload)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcTable\x20=\x20funcDecl.symbols;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20function\x20is\x20static,\x20we\x20just\x20want\x20to\x20use\x20the\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20current\x20scope\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(funcDecl.fncFlags,\x20FncFlags.Static)\x20&&\x20fnType.containedScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20fnType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.bod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20fnType.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ssb\x20=\x20<SymbolScopeBuilder>this.scope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x20is\x20null,\x20it\x27s\x20an\x20ambient\x20declaration\x20with\x20no\x20body,\x20so\x20it\x20doesn\x27t\x20strictly\x20matter\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20funcTable\x20is\x20not\x20set\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ssb\x20&&\x20ssb.valueMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcTable\x20=\x20ssb.valueMembers.allMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20it\x27s\x20a\x20class\x20constructor,\x20we\x20need\x20to\x20check\x20for\x20the\x20presence\x20(or\x20absense)\x20of\x20calls\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20to\x20the\x20\x27super\x27\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20A\x20super\x20constructor\x20call\x20must\x20exist\x20if:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20the\x20class\x20has\x20a\x20base\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20A\x20super\x20constructor\x20call\x20must\x20be\x20the\x20first\x20statement\x20in\x20the\x20function\x20body\x20if:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20the\x20constructor\x20has\x20parameter\x20properties\x20or\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20the\x20class\x20body\x20has\x20initialized\x20property\x20decls\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20A\x20super\x20constructor\x20call\x20may\x20not\x20exist\x20if:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20-\x20The\x20class\x20has\x20no\x20base\x20type,\x20or\x20inherits\x20directly\x20from\x20\x27Object\x27\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor\x20&&\x20funcDecl.bod\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasBaseType\x20=\x20hasFlag(funcDecl.classDecl.type.instanceType.typeFlags,\x20TypeFlags.HasBaseType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20noSuperCallAllowed\x20=\x20!hasBaseType\x20||\x20hasFlag(funcDecl.classDecl.type.instanceType.typeFlags,\x20TypeFlags.HasBaseTypeOfObject);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20superCallMustBeFirst\x20=\x20hasFlag((<ClassDeclaration>funcDecl.classDecl).varFlags,\x20VarFlags.ClassSuperMustBeFirstCallInConstructor);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(noSuperCallAllowed\x20&&\x20this.classConstructorHasSuperCall(funcDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Calls\x20to\x20\x27super\x27\x20constructor\x20are\x20not\x20allowed\x20in\x20classes\x20that\x20either\x20inherit\x20directly\x20from\x20\x27Object\x27\x20or\x20have\x20no\x20base\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(hasBaseType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(superCallMustBeFirst)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.bod\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.bod.members.length\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!((funcDecl.bod.members[0].nodeType\x20==\x20NodeType.Call\x20&&\x20(<CallExpression>funcDecl.bod.members[0]).target.nodeType\x20==\x20NodeType.Super)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(hasFlag(funcDecl.bod.flags,\x20ASTFlags.StrictMode)\x20&&\x20funcDecl.bod.members.length\x20>\x201\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.bod.members[1].nodeType\x20==\x20NodeType.Call\x20&&\x20(<CallExpression>funcDecl.bod.members[1]).target.nodeType\x20==\x20NodeType.Super)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22If\x20a\x20derived\x20class\x20contains\x20initialized\x20properties\x20or\x20constructor\x20parameter\x20properties,\x20the\x20first\x20statement\x20in\x20the\x20constructor\x20body\x20must\x20be\x20a\x20call\x20to\x20the\x20super\x20constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(!this.classConstructorHasSuperCall(funcDecl))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Constructors\x20for\x20derived\x20classes\x20must\x20contain\x20a\x20call\x20to\x20the\x20class\x27s\x20\x27super\x27\x20constructor\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20we\x27ve\x20typechecked\x20this\x20method\x20\x22out\x20of\x20order\x22\x20(not\x20by\x20walking\x20the\x20class,\x20but\x20through\x20a\x20method\x20call\x20somewhere\x20else),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20we\x20need\x20to\x20reset\x20the\x20current\x20class\x20node\x20in\x20question,\x20so\x20that\x20visibility\x20checks\x20on\x20class\x20members\x20don\x27t\x20fail\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isMethod()\x20&&\x20funcDecl.type.enclosingType)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosingClassNode:\x20TypeDeclaration\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type.enclosingType.symbol.declAST.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingClassNode\x20=\x20<TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.type.enclosingType.symbol.declAST.nodeType\x20==\x20NodeType.ClassDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingClassNode\x20=\x20<TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingClassNode)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20enclosingClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20this\x20function\x20is\x20contained\x20in\x20a\x20module,\x20we\x20may\x20be\x20in\x20the\x20midst\x20of\x20a\x20recursive\x20typecheck\x20operation\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20should\x20that\x20be\x20the\x20case,\x20we\x20need\x20to\x20properly\x20set\x20the\x20current\x20module\x20(for\x20visibility\x20tests)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnType.enclosingType)\x20{;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosingSym\x20=\x20fnType.symbol.container;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20enclosing\x20type\x20is\x20a\x20class,\x20grab\x20the\x20parent\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingSym\x20&&\x20enclosingSym.isType()\x20&&\x20enclosingSym.getType().isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingSym\x20=\x20enclosingSym.container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingSym\x20&&\x20enclosingSym.declAST\x20&&\x20enclosingSym.declAST.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20<ModuleDeclaration>enclosingSym.declAST;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.unitIndex\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.units\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(funcDecl.unitIndex\x20<\x20this.checker.units.length))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20this.checker.units[funcDecl.unitIndex];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20unknownLocationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnType.enclosingType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20fnType.enclosingType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20prevThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramLen\x20=\x20signature.parameters.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isConstructor\x20&&\x20funcDecl.bod\x20&&\x20!funcDecl.isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tmpParamScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ssb\x20=\x20<SymbolScopeBuilder>this.scope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Attempt\x20to\x20contextually\x20type\x20the\x20function\x20declaration\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isMethod()\x20&&\x20funcDecl.returnTypeAnnotation\x20==\x20null)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20funcDecl\x20may\x20be\x20a\x20candidate\x20for\x20contextual\x20typing\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20prevScope\x20will\x20only\x20be\x20null\x20in\x20the\x20case\x20of\x20an\x20upstream\x20error\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(prevScope\x20&&\x20funcDecl.name\x20&&\x20!funcDecl.name.isMissing())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Go\x20ahead\x20and\x20check\x20for\x20an\x20ambient\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20considerSym:\x20Symbol\x20=\x20prevScope.findAmbient(funcDecl.name.text,\x20false,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(considerSym\x20&&\x20considerSym.declAST\x20&&\x20considerSym.declAST.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Ambients\x20beget\x20signatures,\x20and\x20signatures\x20don\x27t\x20need\x20to\x20be\x20typechecked\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//typeCheck(considerSym.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.setContextualType(considerSym.declAST.type,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.hasTargetType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateTypeContext\x20=\x20this.checker.getTargetTypeContext();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateType\x20=\x20candidateTypeContext.contextualType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.canContextuallyTypeFunction(candidateType,\x20funcDecl,\x20true))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Safe\x20to\x20do\x20this,\x20since\x20the\x20indices\x20and\x20fields\x20are\x20guaranteed\x20to\x20be\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20non-null\x20and\x20valid\x20by\x20the\x20above\x20call\x20to\x20canContextuallyTypeFunction\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateSigs\x20=\x20candidateType.construct\x20?\x20candidateType.construct\x20:\x20candidateType.call;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20candidateTypeContext.targetSig\x20=\x20candidateSigs.signatures[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateParams\x20=\x20candidateTypeContext.targetSig.parameters;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20target\x20type\x20has\x20been\x20accepted\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetParams\x20=\x20candidateParams;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetReturnType\x20=\x20candidateTypeContext.targetSig.returnType.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Set\x20\x22this\x22\x20if\x20applicable\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(candidateTypeContext.targetSig.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(candidateTypeContext.targetSig.declAST.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//candidateTypeContext.targetThis=candidateType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//this.thisType\x20=\x20candidateType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isTargetTypedAsMethod\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(candidateTypeContext.targetSig.declAST.isMethod())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//candidateTypeContext.targetThis=candidateTypeContext.targetSig.declAST.type.enclosingType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//this.thisType\x20=\x20candidateTypeContext.targetSig.declAST.type.enclosingType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.isTargetTypedAsMethod\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fgSym.type\x20=\x20candidateTypeContext.contextualType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20acceptedContextualType\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(candidateType\x20&&\x20funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorType\x20=\x20candidateType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20candidateTypeContext.targetAccessorType\x20=\x20accessorType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.killCurrentContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20typecheck\x20parameters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20parameter\x20symbols\x20to\x20current\x20scope\x20for\x20typechecking\x20(in\x20case\x20default\x20params\x20reference\x20each\x20other)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Order\x20matters\x20here\x20-\x20default\x20parameters\x20can\x20reference\x20previously\x20defined\x20parameters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20paramTable\x20=\x20ssb.valueMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20new\x20SymbolScopeBuilder(paramTable,\x20null,\x20null,\x20null,\x20prevScope,\x20container);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20p\x20=\x200;\x20p\x20<\x20paramLen;\x20p++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20signature.parameters[p];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ast\x20=\x20<ArgDecl>symbol.declAST\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.hasTargetType()\x20&&\x20(targetParams\x20&&\x20(this.checker.getTargetTypeContext().targetSig.hasVariableArgList\x20||\x20p\x20<\x20targetParams.length)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateTypeContext\x20=\x20this.checker.getTargetTypeContext();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasVarArgList\x20=\x20candidateTypeContext.targetSig.hasVariableArgList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20hasVarArgList\x20&&\x20p\x20>=\x20targetParams.length\x20-\x201\x20?\x20targetParams[targetParams.length\x20-\x201].getType().elementType\x20:\x20targetParams[p].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.sym.setType(ast.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<InferenceSymbol>ast.sym).typeCheckStatus\x20=\x20this.checker.getTypeCheckFinishedStatus();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(ast);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20infer\x20the\x20setter\x20type,\x20if\x20necessary\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isSetter\x20&&\x20accessorType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast\x20=\x20<ArgDecl>this.cast(ast,\x20accessorType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol.container\x20=\x20container;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20the\x20parameter\x20for\x20the\x20privacy\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(symbol.getType(),\x20container,\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20this.functionArgumentPrivacyErrorReporter(funcDecl,\x20p,\x20symbol,\x20typeName,\x20isModuleName));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20paramTable.publicMembers.add(symbol.name,\x20symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20tmpParamScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(funcDecl.arguments)\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Because\x20some\x20terms\x20were\x20not\x20yet\x20type-checkable\x20during\x20binding,\x20ensure\x20that\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20param\x20symbols\x20are\x20updated\x20with\x20the\x20proper\x20argument\x20types\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20p\x20=\x200;\x20p\x20<\x20paramLen;\x20p++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.parameters[p].parameter.typeLink.type\x20=\x20funcDecl.arguments.members[p].type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20the\x20parameter\x20for\x20the\x20privacy\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(signature.parameters[p].getType(),\x20container,\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20this.functionArgumentPrivacyErrorReporter(funcDecl,\x20p,\x20signature.parameters[p],\x20typeName,\x20isModuleName));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((funcDecl.fncFlags\x20&\x20FncFlags.IndexerMember))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!paramLen\x20||\x20paramLen\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Index\x20signatures\x20may\x20take\x20one\x20and\x20only\x20one\x20parameter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.arguments.members[0].type\x20==\x20this.checker.numberType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnType.index.flags\x20|=\x20SignatureFlags.IsNumberIndexer;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(funcDecl.arguments.members[0].type\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fnType.index.flags\x20|=\x20SignatureFlags.IsStringIndexer;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.arguments.members[0],\x20\x22Index\x20signatures\x20may\x20only\x20take\x20\x27string\x27\x20or\x20\x27number\x27\x20as\x20their\x20parameter\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20typecheck\x20body\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.bod\x20&&\x20(!funcDecl.isSignature()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(funcDecl.isConstructor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addFormals(container,\x20signature,\x20funcTable);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addConstructorLocalArgs(funcDecl.type.symbol,\x20funcDecl.arguments,\x20funcTable,\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.ClassMethod));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisClassNode\x20&&\x20this.thisClassNode.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tmpScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcMembers\x20=\x20new\x20ScopedMembers(<DualStringHashTable>funcTable);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20new\x20FilteredSymbolScopeBuilder(funcMembers,\x20prevScope,\x20funcDecl.type.symbol,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20sym.kind()\x20==\x20SymbolKind.Parameter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBaseCalls(this.thisClassNode.extendsList);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20tmpScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Because\x20this\x20function\x20may\x20have\x20been\x20typechecked\x20in\x20a\x20different\x20visiblity\x20context\x20as\x20its\x20caller\x20(e.g.,\x20this\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20function\x20is\x20being\x20typechecked\x20as\x20a\x20result\x20of\x20a\x20call,\x20before\x20the\x20declaration\x20could\x20be\x20typechecked),\x20we\x20need\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20to\x20set\x20the\x20enclosing\x20module\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevMod\x20=\x20this.checker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.type\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.isMethod()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.type.symbol.declModule)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20funcDecl.type.symbol.declModule;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20unset\x20the\x20contextual\x20type\x20before\x20typechecking\x20the\x20function\x20body\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(acceptedContextualType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.setContextualType(null,\x20this.checker.inProvisionalTypecheckMode());\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(funcDecl.bod);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(acceptedContextualType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.unsetContextualType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20prevMod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.checkControlFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20cfg\x20=\x20funcDecl.buildControlFlow();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.printControlFlowGraph)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cfg.print(this.checker.errorReporter.outfile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cfg.reportUnreachable(this.checker.errorReporter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.checkControlFlowUseDef)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cfg.useDef(this.checker.errorReporter,\x20funcDecl.type.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.isConstructor)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fns:\x20ASTList\x20=\x20funcDecl.scopes;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnsLen\x20=\x20fns.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20freeVars:\x20Symbol[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20Symbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20j\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(;\x20j\x20<\x20fnsLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fn\x20=\x20<FuncDecl>fns.members[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!fn.isSignature())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(fn.fncFlags,\x20FncFlags.Method)\x20&&\x20(!hasFlag(fn.fncFlags,\x20FncFlags.Static)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkPromoteFreeVars(fn,\x20funcDecl.type.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20=\x20prevFnc;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20prevClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.enclosingFncIsMethod\x20=\x20prevMethodStatus;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20prevThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20prevLocationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20prevModDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.typeCheckStatus\x20=\x20this.checker.getTypeCheckFinishedStatus();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20the\x20return\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.returnTypeAnnotation)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type,\x20funcDecl.returnTypeAnnotation);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.returnType.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.resolveTypeLink(this.scope,\x20signature.returnType,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(targetReturnType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20targetReturnType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20no\x20return\x20type\x20annotation\x20has\x20been\x20applied\x20to\x20the\x20function\x20declaration\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20unify\x20the\x20return\x20types\x20from\x20the\x20given\x20return\x20statements\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(fgSym.flags\x20&\x20SymbolFlags.RecursivelyReferenced)\x20&&\x20funcDecl.returnStatementsWithExpressions.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20collection:\x20ITypeCollection\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getLength:\x20()\x20=>\x20{\x20return\x20funcDecl.returnStatementsWithExpressions.length;\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20setTypeAtIndex:\x20(index:\x20number,\x20type:\x20Type)\x20=>\x20{\x20funcDecl.returnStatementsWithExpressions[index].type\x20=\x20type;\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getTypeAtIndex:\x20(index:\x20number)\x20=>\x20{\x20return\x20funcDecl.returnStatementsWithExpressions[index].type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bestCommonReturnType\x20=\x20funcDecl.returnStatementsWithExpressions[0].type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bestCommonReturnType\x20=\x20this.checker.findBestCommonType(bestCommonReturnType,\x20null,\x20collection,\x20true);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bestCommonReturnType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.checker.widenType(bestCommonReturnType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20funcDecl.returnStatementsWithExpressions.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i],\x20\x22Incompatible\x20return\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20onlyHasThrow\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.returnType.type\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.HasReturnExpression))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.implicitAny)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(funcDecl,\x20\x22type\x20implicitly\x20set\x20to\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(signature.returnType.type\x20==\x20this.nullType\x20||\x20signature.returnType.type\x20==\x20this.checker.undefinedType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20signature.returnType.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((signature.returnType.type\x20!=\x20this.voidType\x20&&\x20signature.returnType.type\x20!=\x20this.checker.undefinedType\x20&&\x20signature.returnType.type\x20!=\x20this.anyType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20signature\x20declared\x20a\x20non-void\x20type,\x20but\x20there\x27s\x20no\x20return\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isSignature()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!funcDecl.isConstructor\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(funcDecl.fncFlags,\x20FncFlags.HasReturnExpression)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20!hasFlag(funcDecl.fncFlags,\x20FncFlags.IsFatArrowFunction))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20relax\x20the\x20restriction\x20if\x20the\x20method\x20only\x20contains\x20a\x20single\x20\x22throw\x22\x20statement\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20onlyHasThrow\x20=\x20(funcDecl.bod.members.length\x20>\x200)\x20&&\x20(funcDecl.bod.members[0].nodeType\x20==\x20NodeType.Throw)\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!onlyHasThrow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation\x20||\x20funcDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Function\x20declared\x20a\x20non-void\x20return\x20type,\x20but\x20has\x20no\x20return\x20expression\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Type\x20check\x20for\x20return\x20type\x20Privacy\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkTypePrivacy(signature.returnType.type,\x20container,\x20(typeName:\x20string,\x20isModuleName:\x20bool)\x20=>\x20this.functionReturnTypePrivacyErrorReporter(funcDecl,\x20signature,\x20typeName,\x20isModuleName));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20function\x20declaration\x20is\x20a\x20getter\x20or\x20a\x20setter,\x20set\x20the\x20type\x20of\x20the\x20associated\x20getter/setter\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.accessorSymbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorType\x20=\x20funcDecl.accessorSymbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!onlyHasThrow\x20&&\x20hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor)\x20&&\x20!hasFlag(funcDecl.fncFlags,\x20FncFlags.HasReturnExpression))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Getters\x20must\x20return\x20a\x20value\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor)\x20&&\x20accessorType\x20!=\x20signature.returnType.type)\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(funcDecl.arguments.members.length\x20>\x200\x20&&\x20accessorType\x20!=\x20funcDecl.arguments.members[0].type))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Getter\x20and\x20setter\x20types\x20do\x20not\x20agree\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.accessorSymbol.setType(signature.returnType.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(funcDecl.arguments.members.length\x20!=\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(funcDecl,\x20\x22Setters\x20may\x20have\x20one\x20and\x20only\x20one\x20argument\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckOverloadSignatures(fnType,\x20funcDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBases(type:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20seenInterface\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bases\x20=\x20type.extendsList;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseLinks\x20=\x20type.extendsTypeLinks;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20bases.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.typeFlags\x20|=\x20TypeFlags.HasBaseType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases[i]\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20This\x20may\x20be\x20the\x20type\x20from\x20imported\x20module\x20and\x20hence\x20the\x20type\x20was\x20not\x20really\x20resolved\x20to\x20the\x20correct\x20one.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Try\x20resolving\x20it\x20again\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20baseLinks[i].type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20There\x20are\x20no\x20contextual\x20errors\x20when\x20trying\x20to\x20verify\x20the\x20base\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldErrors\x20=\x20this.checker.errorReporter.getCapturedErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.assert(oldErrors.length\x20==\x200,\x20\x22There\x20shouldnt\x20be\x20any\x20contextual\x20errors\x20when\x20typechecking\x20base\x20type\x20names\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.pushToErrorSink\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bases[i]\x20=\x20this.checker.resolveBaseTypeLink(baseLinks[i],\x20type.containedScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.pushToErrorSink\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.freeCapturedErrors();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20base\x20=\x20bases[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseRef\x20=\x20baseLinks[i].ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20make\x20sure\x20it\x27s\x20the\x20global\x20\x27Object\x27\x20and\x20not\x20some\x20alias\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseTypeOfObject\x20=\x20base.symbol\x20&&\x20base.symbol.name\x20==\x20\x22Object\x22\x20&&\x20base.symbol.container\x20==\x20this.checker.gloMod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseTypeOfObject)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.typeFlags\x20|=\x20TypeFlags.HasBaseTypeOfObject;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(base.isClassInstance())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(type.isClassInstance()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x20\x22Interface\x20base\x20type\x20must\x20be\x20interface\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(seenInterface)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x20\x22Class\x20may\x20not\x20follow\x20interface\x20as\x20base\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(base.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x20\x22Types\x20may\x20not\x20be\x20derived\x20from\x20module\x20types\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(base.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!seenInterface)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20seenInterface\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(type.isClassInstance()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Interface\x20base\x20type\x20must\x20be\x20interface\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(baseRef,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Base\x20type\x20must\x20be\x20interface\x20or\x20class\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkMembersImplementInterfaces(implementingType:\x20Type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType\x20=\x20implementingType.getInstanceType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType.implementsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20instanceType.implementsList.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20interfaceType\x20=\x20instanceType.implementsList[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comparisonInfo\x20=\x20new\x20TypeComparisonInfo();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.checker.sourceIsSubtypeOfTarget(instanceType,\x20interfaceType,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emsg\x20=\x20\x22Class\x20\x27\x22\x20+\x20instanceType.getTypeName()\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x27\x20declares\x20interface\x20\x27\x22\x20+\x20interfaceType.getTypeName()\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22\x27\x20but\x20does\x20not\x20implement\x20it\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!comparisonInfo.message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol,\x20emsg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol,\x20emsg\x20+\x20\x22:\x20\x22\x20+\x20comparisonInfo.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckBaseCalls(bases:\x20ASTList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bases\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20basesLen\x20=\x20bases.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20basesLen;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseExpr\x20=\x20bases.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20baseSymbol:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseExpr.nodeType\x20==\x20NodeType.Call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckNew(baseExpr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20assertUniqueNamesInBaseTypes(names:\x20IHashTable,\x20type:\x20Type,\x20classDecl:\x20InterfaceDeclaration,\x20checkUnique:\x20bool):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.members.publicMembers.map((key,\x20s,\x20c)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20dup\x20=\x20names.lookup(sym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(dup)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(checkUnique)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(classDecl,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22duplicate\x20member\x20name\x20in\x20bases\x20for\x20\x22\x20+\x20classDecl.name.actualText\x20+\x20\x22:\x20\x22\x20+\x20type.symbol.name\x20+\x20\x22\x20and\x20\x22\x20+\x20dup.container.name\x20+\x20\x22\x20both\x20contain\x20member\x20with\x20name\x20\x22\x20+\x20sym.name);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20names.add(sym.name,\x20sym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20type.extendsList.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(type.extendsList[i].symbol.flags\x20&\x20SymbolFlags.RecursivelyReferenced))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.assertUniqueNamesInBaseTypes(names,\x20type.extendsList[i],\x20classDecl,\x20checkUnique);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkBaseTypeMemberInheritance(derivedType:\x20Type,\x20derivedTypeDecl:\x20AST):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20instanceType\x20=\x20derivedType.getInstanceType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType.extendsList\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20instanceType.extendsList.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(len\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20names\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType.isClassInstance())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.assertUniqueNamesInBaseTypes(names,\x20instanceType.extendsList[i],\x20<InterfaceDeclaration>derivedTypeDecl,\x20i\x20>\x200);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(instanceType.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20instanceType.members.publicMembers.map((key,\x20s,\x20c)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20len;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20base\x20=\x20instanceType.extendsList[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(base.memberScope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(derivedTypeDecl,\x20\x22Base\x20type\x20\x27\x22\x20+\x20base.symbol.name\x20+\x20\x22\x27\x20lacks\x20an\x20implementation.\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bSym\x20=\x20base.memberScope.find(sym.name,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(bSym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aType\x20=\x20sym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bType\x20=\x20bSym.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(this.checker.sourceIsSubtypeOfTarget(aType,\x20bType)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleErrorFromSym(sym,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Type\x20of\x20overridden\x20member\x20\x27\x22\x20+\x20sym.name\x20+\x20\x22\x27\x20is\x20not\x20subtype\x20of\x20original\x20member\x20defined\x20by\x20type\x20\x27\x22\x20+\x20bSym.container.name\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((sym.kind()\x20==\x20SymbolKind.Type)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(bSym.kind()\x20==\x20SymbolKind.Field))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleErrorFromSym(sym,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Cannot\x20override\x20field\x20\x27\x22\x20+\x20sym.name\x20+\x20\x22\x27\x20with\x20method\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckClass(classDecl:\x20ClassDeclaration):\x20ClassDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeSymbol\x20=\x20<TypeSymbol>classDecl.type.symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeSymbol.typeCheckStatus\x20==\x20TypeCheckStatus.Finished)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(typeSymbol.typeCheckStatus\x20==\x20TypeCheckStatus.Started)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20report\x20this\x20recursion\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.typeCheckStatus\x20=\x20TypeCheckStatus.Started;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.addStartedPTO(typeSymbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svClassNode\x20=\x20this.thisClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20classType\x20=\x20classDecl.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBases(classType.instanceType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBaseListPrivacy(classDecl.extendsList,\x20typeSymbol,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBaseListPrivacy(classDecl.implementsList,\x20typeSymbol,\x20false);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20classType.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20classType.instanceType.containedScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20the\x20constructor\x20locals,\x20if\x20necessary\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classDecl.constructorDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20classType.instanceType.constructorScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ssb\x20=\x20<SymbolScopeBuilder>this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcTable\x20=\x20ssb.valueMembers.allMembers;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol,\x20classDecl.constructorDecl.arguments,\x20funcTable,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(classDecl.members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeSymbol.typeCheckStatus\x20=\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkBaseTypeMemberInheritance(classType,\x20classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkMembersImplementInterfaces(classType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckOverloadSignatures(classType,\x20classDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckOverloadSignatures(classType.instanceType,\x20classDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20class\x20has\x20no\x20declared\x20constructor,\x20adapt\x20its\x20base\x20class\x27s\x20signature\x20group,\x20if\x20necessary\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!classDecl.constructorDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(classDecl.extendsList\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.extendsList.members.length\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.extendsList.members[0].type\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20classDecl.extendsList.members[0].type.symbol.type.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20cloneParentConstructGroupForChildType(classDecl.type,\x20classDecl.extendsList.members[0].type.symbol.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20prevThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisClassNode\x20=\x20svClassNode;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20classDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckOverloadSignatures(type:\x20Type,\x20ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.call.typeCheck(this.checker,\x20ast,\x20type.construct\x20!=\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.construct.typeCheck(this.checker,\x20ast,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.index.typeCheck(this.checker,\x20ast,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckInterface(interfaceDecl:\x20InterfaceDeclaration):\x20InterfaceDeclaration\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20overloads\x20will\x20be\x20typechecked\x20inline\x20by\x20the\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//this.typeCheckOverloadSignatures(interfaceDecl.type,\x20interfaceDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBases(interfaceDecl.type);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckBaseListPrivacy(interfaceDecl.extendsList,\x20interfaceDecl.type.symbol,\x20true);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(interfaceDecl.members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checkBaseTypeMemberInheritance(interfaceDecl.type,\x20interfaceDecl);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20propagate\x20base\x20type\x20signatures\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20interfaceDecl.extendsList.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.extendsList.members[i].type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.call.signatures\x20=\x20interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.call\x20=\x20interfaceDecl.extendsList.members[i].type.call;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.extendsList.members[i].type.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.type.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.construct.signatures\x20=\x20interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.construct\x20=\x20interfaceDecl.extendsList.members[i].type.construct;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.extendsList.members[i].type.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(interfaceDecl.type.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.index.signatures\x20=\x20interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20interfaceDecl.type.index\x20=\x20interfaceDecl.extendsList.members[i].type.index;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20interfaceDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckImportDecl(importDecl:\x20ImportDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mod:\x20ModuleType\x20=\x20<ModuleType>importDecl.alias.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20TypeSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInImportTC\x20=\x20this.inImportTypeCheck;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inImportTypeCheck\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(importDecl.alias);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mod\x20=\x20<ModuleType>importDecl.alias.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mod\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(importDecl.alias,\x20\x22Could\x20not\x20resolve\x20module\x20alias\x20\x27\x22\x20+\x20importDecl.id.actualText\x20+\x20\x22\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mod\x20=\x20<ModuleType>this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>importDecl.id.sym).type\x20=\x20mod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20importDecl.id.type\x20=\x20mod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20mod.symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!mod.isModuleType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(importDecl.alias,\x20\x22A\x20module\x20cannot\x20be\x20aliased\x20to\x20a\x20non-module\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.type\x20=\x20mod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Add\x20the\x20imported\x20module\x20to\x20the\x20AMD\x20dependency\x20list\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.typeFlow.currentScript\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeFlow.currentScript.topLevelMod\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeFlow.currentScript.topLevelMod.mod)\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<TypeSymbol>importDecl.id.sym).type\x20=\x20mod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mod.symbol\x20&&\x20mod.symbol.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ModuleDeclaration>mod.symbol.declAST).modFlags\x20&=\x20~ModuleFlags.ShouldEmitModuleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//importDecl.id.sym\x20=\x20sym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Uncomment\x20when\x20you\x20can\x20toggle\x20module\x20codegen\x20targets\x20from\x20the\x20language\x20service\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//else\x20if\x20(typeFlow.checker.currentModDecl\x20==\x20null\x20&&\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag((<ModuleDecl>sym.declAST).modFlags,ModuleFlags.IsDynamic)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleGenTarget\x20==\x20ModuleGenTarget.Asynchronous)\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20\x20typeFlow.checker.errorReporter.simpleError(alias,\x20\x22In\x20AMD\x20codegen\x20mode,\x20dynamic\x20modules\x20may\x20not\x20be\x20referenced\x20from\x20global\x20scope.\x20\x20(Wrap\x20the\x20file\x20in\x20a\x20module\x20declaration.)\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inImportTypeCheck\x20=\x20prevInImportTC;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20importDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckModule(moduleDecl:\x20ModuleDeclaration):\x20ModuleDeclaration\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20some\x20really\x20nasty\x20cases\x20of\x20error\x20recovery,\x20we\x20may\x20not\x20have\x20a\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!moduleDecl.mod)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.currentScript)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.currentScript.requiresGlobal\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mod\x20=\x20moduleDecl.mod;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym:\x20TypeSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevScope\x20=\x20this.scope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevCurrentModDecl\x20=\x20this.checker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20moduleDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20mod.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(moduleDecl.members);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym\x20=\x20mod.symbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.currentModDecl\x20=\x20prevCurrentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20prevThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scope\x20=\x20prevScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleDecl.type\x20=\x20mod;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20sym.typeCheckStatus\x20=\x20TypeCheckStatus.Finished;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20moduleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckFor(forStmt:\x20ForStatement):\x20ForStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.init\x20=\x20this.typeCheck(forStmt.init);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.cond\x20=\x20this.typeCheck(forStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCondExpr(forStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.incr\x20=\x20this.typeCheck(forStmt.incr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.nestingLevel--;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.body\x20=\x20this.typeCheck(forStmt.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(forStmt.body,\x20\x22for\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forStmt.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20forStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckWith(withStmt:\x20WithStatement):\x20WithStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.errorsOnWith)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(withStmt.expr,\x20\x22All\x20symbols\x20within\x20a\x20\x27with\x27\x20block\x20will\x20be\x20typed\x20as\x20\x27any\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20withStmt.expr\x20=\x20this.typeCheck(withStmt.expr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.inWith\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20withStmt.body\x20=\x20this.typeCheck(withStmt.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(withStmt.body,\x20\x22with\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.inWith\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20withStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckForIn(forInStmt:\x20ForInStatement):\x20ForInStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.obj\x20=\x20this.typeCheck(forInStmt.obj);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.lval\x20=\x20this.cast(this.typeCheck(forInStmt.lval),\x20this.checker.stringType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(forInStmt.lval.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varDecl\x20=\x20<VarDecl>forInStmt.lval;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.typeExpr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(varDecl,\x20\x22Variable\x20declarations\x20for\x20for/in\x20expressions\x20may\x20not\x20contain\x20a\x20type\x20annotation\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(varDecl.sym)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varDecl.sym.setType(this.checker.stringType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20forInStmt.body\x20=\x20this.typeCheck(forInStmt.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(forInStmt.body,\x20\x22for\x20in\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20forInStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckWhile(whileStmt:\x20WhileStatement):\x20WhileStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.cond\x20=\x20this.typeCheck(whileStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCondExpr(whileStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.body\x20=\x20this.typeCheck(whileStmt.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(whileStmt.body,\x20\x22while\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20whileStmt.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20whileStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckDoWhile(doWhileStmt:\x20DoWhileStatement):\x20DoWhileStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doWhileStmt.cond\x20=\x20this.typeCheck(doWhileStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCondExpr(doWhileStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doWhileStmt.body\x20=\x20this.typeCheck(doWhileStmt.body);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(doWhileStmt.body,\x20\x22do\x20while\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20doWhileStmt.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20doWhileStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckCondExpr(cond:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.assignmentInCond)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((cond\x20!==\x20null)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(cond.nodeType\x20>=\x20NodeType.Asg)\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(cond.nodeType\x20<=\x20NodeType.LastAsg))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(cond,\x20\x22top-level\x20assignment\x20statement\x20in\x20conditional\x20expression\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckCompoundStmtBlock(stmts:\x20AST,\x20stmtType:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.blockInCompoundStmt\x20&&\x20stmts)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(stmts.nodeType\x20!=\x20NodeType.Block)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(stmts,\x20stmtType\x20+\x20\x22\x20requires\x20a\x20block\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckIf(ifStmt:\x20IfStatement):\x20IfStatement\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.cond\x20=\x20this.typeCheck(ifStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCondExpr(ifStmt.cond);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.thenBod\x20=\x20this.typeCheck(ifStmt.thenBod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.elseBod\x20=\x20this.typeCheck(ifStmt.elseBod);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(ifStmt.thenBod,\x20\x22if\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckCompoundStmtBlock(ifStmt.elseBod,\x20\x22if\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ifStmt.type\x20=\x20this.voidType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ifStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeFromAccessorFuncDecl(funcDecl:\x20FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!funcDecl.isAccessor())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(funcDecl.fncFlags,\x20FncFlags.GetAccessor))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl.type.call.signatures[0].returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20funcDecl.type.call.signatures[0].parameters[0].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckObjectLit(objectLit:\x20UnaryExpression):\x20void\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20resultType\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType.symbol\x20=\x20new\x20TypeSymbol(this.checker.anon,\x20objectLit.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objectLit.limChar\x20-\x20objectLit.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType.memberScope\x20=\x20new\x20SymbolTableScope(resultType.members,\x20null,\x20null,\x20null,\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20aggScope\x20=\x20new\x20SymbolAggregateScope(resultType.symbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(resultType.memberScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20aggScope.addParentScope(this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType.containedScope\x20=\x20aggScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberDecls\x20=\x20<ASTList>objectLit.operand;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevThisType\x20=\x20this.thisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20acceptTargetType\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.hasTargetType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20this.checker.getTargetTypeContext().contextualType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType\x20&&\x20targetType.symbol\x20&&\x20!this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType.symbol.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(targetType.symbol.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20acceptTargetType\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberDecls)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20memberDecls.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>memberDecls.members[i];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20id\x20=\x20binex.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20text:\x20string;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetMember:\x20Symbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fieldSymbol:\x20FieldSymbol\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(id.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20(<Identifier>id).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(id.nodeType\x20==\x20NodeType.QString)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20TODO:\x20set\x20text\x20to\x20unescaped\x20string\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20idText\x20=\x20(<StringLiteral>id).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20text\x20=\x20idText.substring(1,\x20idText.length\x20-\x201);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(objectLit,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22malformed\x20object\x20literal\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(acceptTargetType\x20&&\x20targetType.memberScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetMember\x20=\x20targetType.memberScope.find(text,\x20false,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20before\x20typechecking\x20an\x20accessor\x20function\x20member,\x20we\x20need\x20to\x20initialize\x20its\x20accessor\x20symbol\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(binex.operand2.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x20(<FuncDecl>binex.operand2).isAccessor())\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcDecl\x20=\x20<FuncDecl>binex.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorSym:\x20FieldSymbol\x20=\x20resultType.members.publicMembers.lookup(text);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20accessorSym\x20=\x20this.checker.createAccessorSymbol(funcDecl,\x20accessorSym,\x20resultType,\x20true,\x20false,\x20resultType.memberScope,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcDecl.accessorSymbol\x20=\x20accessorSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol\x20=\x20accessorSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(id.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<Identifier>id).sym\x20=\x20accessorSym;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(acceptTargetType\x20&&\x20targetMember\x20?\x20targetMember.getType()\x20:\x20null,\x20false,\x20acceptTargetType,\x20binex.operand2);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(acceptTargetType\x20&&\x20targetMember)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note\x20that\x20we\x20accept\x20\x27any\x27\x20in\x20place\x20of\x20a\x20valid\x20subtype\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((binex.operand2.type\x20==\x20this.anyType\x20||\x20this.checker.sourceIsAssignableToTarget(binex.operand2.type,\x20targetMember.getType()))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.operand2.nodeType\x20==\x20NodeType.FuncDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>binex.operand2).isAccessor()\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2)\x20==\x20targetMember.getType()))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20set\x20the\x20field\x20type\x20to\x20the\x20proper\x20contextual\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20this\x20is\x20especially\x20important\x20in\x20the\x20\x27any\x27\x20case,\x20so\x20that\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20fields\x20typed\x20to\x20\x27any\x27\x20aren\x27t\x20accepted\x20for\x20contextual\x20typing,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20but\x20never\x20properly\x20set\x20to\x20the\x20target\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1.type\x20=\x20targetMember.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20here\x20we\x20sub\x20in\x20\x27any\x27\x20for\x20\x27undefined\x27\x20to\x20account\x20for\x20field\x20initialization\x20to\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x27undefined\x27\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2.type\x20=\x20binex.operand2.type\x20==\x20this.checker.undefinedType\x20?\x20this.anyType\x20:\x20binex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20the\x20field\x20symbol\x20hasn\x27t\x20been\x20set\x20by\x20a\x20getter\x20or\x20setter\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fieldSymbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberType\x20=\x20binex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20field\x20=\x20new\x20ValueLocation();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20FieldSymbol(text,\x20id.minChar,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo.unitIndex,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20true,\x20field);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.flags\x20|=\x20SymbolFlags.Property;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.symbol\x20=\x20fieldSymbol;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.typeCheckStatus\x20=\x20this.checker.getTypeCheckFinishedStatus();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink\x20=\x20new\x20TypeLink();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20field.typeLink.type\x20=\x20memberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20resultType.members.publicMembers.add(text,\x20fieldSymbol);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20fieldSymbol.isObjectLitField\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisType\x20=\x20prevThisType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objectLit.type\x20=\x20resultType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20objectLit.targetType\x20=\x20targetType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckArrayLit(arrayLit:\x20UnaryExpression):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20elements\x20=\x20<ASTList>arrayLit.operand;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20elementType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetElementType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comparisonInfo\x20=\x20new\x20TypeComparisonInfo();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20comparisonInfo.onlyCaptureFirstError\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20target\x20type\x20is\x20an\x20array\x20type,\x20extract\x20the\x20element\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.hasTargetType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType\x20=\x20this.checker.getTargetTypeContext().contextualType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetElementType\x20=\x20targetType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(elements)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInArrayElemTypeCheck\x20=\x20this.inArrayElementTypeCheck;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inArrayElementTypeCheck\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(targetElementType,\x20this.checker.inProvisionalTypecheckMode(),\x20targetElementType\x20!=\x20null,\x20elements);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inArrayElementTypeCheck\x20=\x20prevInArrayElemTypeCheck;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elementType\x20=\x20elements.members[0].type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20collection:\x20ITypeCollection\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getLength:\x20()\x20=>\x20{\x20return\x20elements.members.length;\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20setTypeAtIndex:\x20(index:\x20number,\x20type:\x20Type)\x20=>\x20{\x20elements.members[index].type\x20=\x20type;\x20},\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getTypeAtIndex:\x20(index:\x20number)\x20=>\x20{\x20return\x20elements.members[index].type;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elementType\x20=\x20this.checker.findBestCommonType(elementType,\x20targetElementType,\x20collection,\x20false,\x20comparisonInfo);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20array\x20type\x20is\x20the\x20undefined\x20type,\x20we\x20should\x20widen\x20it\x20to\x20any\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20it\x27s\x20of\x20the\x20null\x20type,\x20only\x20widen\x20it\x20if\x20it\x27s\x20not\x20in\x20a\x20nested\x20array\x20element,\x20so\x20as\x20not\x20to\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20short-circuit\x20any\x20checks\x20for\x20the\x20best\x20common\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(elementType\x20==\x20this.checker.undefinedType\x20||\x20(!prevInArrayElemTypeCheck\x20&&\x20elementType\x20==\x20this.nullType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elementType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emsg\x20=\x20\x22Incompatible\x20types\x20in\x20array\x20literal\x20expression\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!comparisonInfo.message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(arrayLit,\x20emsg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(arrayLit,\x20emsg\x20+\x20\x22:\x20\x22\x20+\x20comparisonInfo.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elementType\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(targetElementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20for\x20the\x20case\x20of\x20zero-length\x20\x27any\x27\x20arrays,\x20we\x20still\x20want\x20to\x20set\x20the\x20contextual\x20type,\x20if\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20need\x20be\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.sourceIsAssignableToTarget(elementType,\x20targetElementType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20elementType\x20=\x20targetElementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20arrayLit.type\x20=\x20this.checker.makeArrayType(elementType);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkForVoidConstructor(type:\x20Type,\x20ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.construct\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20type.construct.signatures.length\x20>\x200)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20type.construct.signatures.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type.construct.signatures[i].returnType.type\x20==\x20this.checker.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(ast,\x20\x22Constructors\x20may\x20not\x20have\x20a\x20return\x20type\x20of\x20\x27void\x27\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20the\x20code\x20below\x20could\x20set\x20the\x20signature\x20type\x20of\x20the\x20function\x20to\x20the\x20current\x20return\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20type,\x20which\x20would\x20have\x20a\x20benefit\x20of\x20reducing\x20the\x20risk\x20of\x20a\x20recursive\x20typecheck\x20scenario,\x20but\x20is\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20is\x20technically\x20wrong\x20-\x20mergeOrdered\x20will\x20only\x20work\x20properly\x20if\x20the\x20best\x20common\x20supertype\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20comes\x20before\x20any\x20sibling\x20types.\x20\x20This\x20would\x20mean\x20that\x20if\x20a\x20function,\x20\x22color()\x22,\x20returned\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20three\x20types\x20(in\x20order)\x20-\x20\x22Red\x22,\x20\x22Blue\x22,\x20and\x20\x22IColor\x22,\x20an\x20\x22Incompatible\x20return\x20type\x22\x20error\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20would\x20be\x20triggered.\x20\x20However,\x20if\x20\x22color()\x22\x20returned\x20(in\x20order)\x20\x22Red\x22,\x20\x22IColor\x22\x20and\x20\x22Blue\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20no\x20error\x20would\x20be\x20triggered,\x20and\x20the\x20return\x20type\x20of\x20the\x20function\x20would\x20be\x20\x22IColor\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckReturn(returnStmt:\x20ReturnStatement):\x20ReturnStatement\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.thisFnc)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20determine\x20the\x20target\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.hasTargetType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tcContext\x20=\x20this.checker.getTargetTypeContext();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20accessorType\x20=\x20tcContext.targetAccessorType;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(accessorType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20accessorType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetSig\x20=\x20this.checker.getTargetTypeContext().targetSig;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetSig\x20&&\x20targetSig.returnType.type\x20!=\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20targetSig.returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(returnStmt.returnExpression)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc.fncFlags\x20|=\x20FncFlags.HasReturnExpression;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType\x20==\x20null\x20&&\x20this.thisFnc.returnTypeAnnotation\x20&&\x20this.thisFnc.returnTypeAnnotation.type\x20&&\x20this.thisFnc.returnTypeAnnotation.type\x20!=\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20this.thisFnc.returnTypeAnnotation.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(targetType,\x20this.checker.inProvisionalTypecheckMode(),\x20targetType\x20!=\x20null,\x20returnStmt.returnExpression);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20expectedReturnType:\x20Type\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.thisFnc.returnTypeAnnotation\x20&&\x20this.thisFnc.returnTypeAnnotation.type)\x20?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc.returnTypeAnnotation.type\x20:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(expectedReturnType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(expectedReturnType\x20==\x20this.voidType\x20&&\x20returnStmt.returnExpression.type\x20!=\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(returnStmt,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22Return\x20with\x20value\x20expression\x20in\x20void\x20function\x22);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20even\x20though\x20we\x27ve\x20raised\x20an\x20error,\x20use\x20the\x20more\x20specific\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.type\x20=\x20returnStmt.returnExpression.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.returnExpression\x20=\x20this.cast(returnStmt.returnExpression,\x20expectedReturnType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.type\x20=\x20expectedReturnType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(returnStmt.returnExpression.type\x20!=\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.returnExpression\x20=\x20this.cast(returnStmt.returnExpression,\x20targetType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.returnExpression.type\x20=\x20targetType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.type\x20=\x20returnStmt.returnExpression.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length]\x20=\x20returnStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20returnStmt.type\x20=\x20targetType\x20==\x20null\x20?\x20this.checker.voidType\x20:\x20targetType;\x20//((this.thisFnc.returnTypeAnnotation\x20&&\x20this.thisFnc.returnTypeAnnotation.type)\x20?\x20this.thisFnc.returnTypeAnnotation.type\x20:\x20this.checker.voidType)\x20:\x20targetType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20returnStmt;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckInstOf(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!((binex.operand1.type\x20==\x20this.checker.anyType\x20||\x20this.checker.sourceIsSubtypeOfTarget(binex.operand1.type,\x20this.objectInterfaceType))\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(binex.operand2.type\x20==\x20this.anyType\x20||\x20this.checker.sourceIsSubtypeOfTarget(binex.operand2.type,\x20this.functionInterfaceType))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(ast,\x20\x22The\x20instanceof\x20operator\x20requires\x20the\x20left\x20operand\x20to\x20be\x20of\x20type\x20Any\x20or\x20an\x20object\x20type,\x20and\x20the\x20right\x20operand\x20to\x20be\x20of\x20type\x20Any\x20or\x20a\x20subtype\x20of\x20the\x20Function\x20interface\x20type\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckCommaOperator(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binex\x20=\x20<BinaryExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20binex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckLogOr(binex:\x20BinaryExpression):\x20BinaryExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20leftType\x20=\x20binex.operand1.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rightType\x20=\x20binex.operand2.type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(leftType\x20==\x20this.checker.anyType\x20||\x20rightType\x20==\x20this.checker.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.booleanType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rightType\x20==\x20this.checker.booleanType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.booleanType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.numberType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rightType\x20==\x20this.checker.numberType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.numberType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(leftType\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(rightType\x20==\x20this.checker.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.stringType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.sourceIsSubtypeOfTarget(leftType,\x20rightType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20rightType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.checker.sourceIsSubtypeOfTarget(rightType,\x20leftType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20leftType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20this.checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckLogAnd(binex:\x20BinaryExpression):\x20BinaryExpression\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand1\x20=\x20this.typeCheck(binex.operand1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.operand2\x20=\x20this.typeCheck(binex.operand2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binex.type\x20=\x20binex.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20binex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20tryAddCandidates(signature:\x20Signature,\x20actuals:\x20Type[],\x20exactCandidates:\x20Signature[],\x20conversionCandidates:\x20Signature[],\x20comparisonInfo:\x20TypeComparisonInfo):\x20void\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20lowerBound\x20=\x20signature.nonOptionalParameterCount;\x20//\x20required\x20parameters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20upperBound\x20=\x20signature.parameters.length;\x20//\x20required\x20and\x20optional\x20parameters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20formalLen\x20=\x20lowerBound;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20acceptable\x20=\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((actuals.length\x20>=\x20lowerBound)\x20&&\x20(signature.hasVariableArgList\x20||\x20actuals.length\x20<=\x20upperBound))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formalLen\x20=\x20(signature.hasVariableArgList\x20?\x20signature.parameters.length\x20:\x20actuals.length);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20acceptable\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20repeatType:\x20Type\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(acceptable\x20||\x20signature.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20assumed\x20structure\x20here\x20is\x20checked\x20when\x20signature\x20is\x20formed\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20formalLen\x20-=\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20repeatType\x20=\x20(<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20repeatType\x20=\x20repeatType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20acceptable\x20=\x20actuals.length\x20>=\x20formalLen;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20actuals.length;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exact\x20=\x20acceptable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20convert\x20=\x20acceptable;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeA:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(i\x20<\x20formalLen)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeA\x20=\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20typeA\x20=\x20repeatType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeB\x20=\x20actuals[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!typeA\x20||\x20!typeB\x20||\x20!(this.checker.typesAreIdentical(typeA,\x20typeB)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exact\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20is\x20the\x20argument\x20assignable\x20to\x20the\x20parameter?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.checker.sourceIsAssignableToTarget(typeB,\x20typeA,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20convert\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!(exact\x20||\x20convert))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(exact)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20exactCandidates[exactCandidates.length]\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(convert\x20&&\x20(exactCandidates.length\x20==\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20conversionCandidates[conversionCandidates.length]\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20resolveOverload(application:\x20AST,\x20group:\x20SignatureGroup):\x20Signature\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20rd\x20=\x20this.resolutionDataCache.getResolutionData();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20actuals\x20=\x20rd.actuals;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20exactCandidates\x20=\x20rd.exactCandidates;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20conversionCandidates\x20=\x20rd.conversionCandidates;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidate:\x20Signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20hasOverloads\x20=\x20group.signatures.length\x20>\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20comparisonInfo\x20=\x20new\x20TypeComparisonInfo();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20args:\x20ASTList\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20target:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(application.nodeType\x20==\x20NodeType.Call\x20||\x20application.nodeType\x20==\x20NodeType.New)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20callEx\x20=\x20<CallExpression>application;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args\x20=\x20callEx.arguments;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20target\x20=\x20callEx.target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20callEx.arguments.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20actuals[i]\x20=\x20callEx.arguments.members[i].type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(application.nodeType\x20==\x20NodeType.Index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binExp\x20=\x20<BinaryExpression>application;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20target\x20=\x20binExp.operand1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20args.members[0]\x20=\x20binExp.operand2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20actuals[0]\x20=\x20binExp.operand2.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200,\x20groupLen\x20=\x20group.signatures.length;\x20j\x20<\x20groupLen;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20group.signatures[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasOverloads\x20&&\x20signature\x20==\x20group.definitionSignature\x20&&\x20!this.checker.canCallDefinitionSignature)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!signature.returnType.type\x20&&\x20signature.declAST\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(signature.typeCheckStatus\x20!=\x20TypeCheckStatus.Finished))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheckFunction(signature.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.tryAddCandidates(signature,\x20actuals,\x20exactCandidates,\x20conversionCandidates,\x20comparisonInfo);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(exactCandidates.length\x20==\x200)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applicableCandidates\x20=\x20this.checker.getApplicableSignatures(conversionCandidates,\x20args,\x20comparisonInfo);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(applicableCandidates.length\x20>\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateInfo\x20=\x20this.checker.findMostApplicableSignature(applicableCandidates,\x20args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(candidateInfo.ambiguous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(target,\x20\x22Ambiguous\x20call\x20expression\x20-\x20could\x20not\x20choose\x20overload\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20candidate\x20=\x20candidateInfo.sig;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emsg\x20=\x20\x22Supplied\x20parameters\x20do\x20not\x20match\x20any\x20signature\x20of\x20call\x20target\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(comparisonInfo.message)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(target,\x20emsg\x20+\x20\x22:\x5cn\x5ct\x22\x20+\x20comparisonInfo.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(target,\x20emsg);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(exactCandidates.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20applicableSigs:\x20ApplicableSignature[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20exactCandidates.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20applicableSigs[i]\x20=\x20{\x20signature:\x20exactCandidates[i],\x20hadProvisionalErrors:\x20false\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20candidateInfo\x20=\x20this.checker.findMostApplicableSignature(applicableSigs,\x20args);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(candidateInfo.ambiguous)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(target,\x20\x22Ambiguous\x20call\x20expression\x20-\x20could\x20not\x20choose\x20overload\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20candidate\x20=\x20candidateInfo.sig;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20candidate\x20=\x20exactCandidates[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.resolutionDataCache.returnResolutionData(rd);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20candidate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckNew(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20callEx\x20=\x20<CallExpression>ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.target\x20=\x20this.typeCheck(callEx.target);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20target\x20=\x20callEx.target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.type.construct\x20||\x20target.type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.preTypeCheckCallArgs(callEx.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.arguments\x20=\x20<ASTList>this.typeCheck(callEx.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.type\x20==\x20this.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.arguments\x20=\x20<ASTList>this.typeCheck(callEx.arguments);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(target.type.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20this.resolveOverload(callEx,\x20target.type.construct);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(signature.returnType.type\x20==\x20this.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20signature.returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(target.type.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20this.resolveOverload(callEx,\x20target.type.call);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((signature.returnType.type\x20==\x20this.voidType)\x20||\x20(signature.returnType.type\x20==\x20this.anyType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.simpleError(callEx.target,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x22new\x20expression\x20only\x20valid\x20on\x20constructors\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(target.type.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20target.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.invalidCall(callEx,\x20callEx.nodeType,\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.postTypeCheckCallArgs(callEx);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20callEx;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Typecheck\x20all\x20args\x20that\x20cannot\x20be\x20affected\x20by\x20contextual\x20typing\x20of\x20overloads\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20preTypeCheckCallArgs(args:\x20ASTList)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!args)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20args.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(args.members[i].nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(args.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20postTypeCheckCallArgs(callEx:\x20CallExpression)\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20acceptedTargetType\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.target\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.target.type\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sig\x20=\x20callEx.signature;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sig\x20&&\x20callEx.arguments.members.length\x20>=\x20sig.nonOptionalParameterCount)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20acceptedTargetType\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20targetType:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nonVarArgFormalParamLength\x20=\x20sig.hasVariableArgList\x20?\x20sig.parameters.length\x20-\x201\x20:\x20sig.parameters.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20nonVarArgActualParamLength\x20=\x20callEx.arguments.members.length\x20<\x20nonVarArgFormalParamLength\x20?\x20callEx.arguments.members.length\x20:\x20nonVarArgFormalParamLength\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20nonVarArgActualParamLength;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20sig.parameters[i].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(callEx.arguments.members[i].nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(targetType,\x20this.checker.inProvisionalTypecheckMode(),\x20!sig.parameters[i].declAST.isParenthesized,\x20callEx.arguments.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(sig.hasVariableArgList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20varArgParamIndex\x20=\x20sig.nonOptionalParameterCount\x20-\x201;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20sig.parameters[varArgParamIndex].getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(targetType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20targetType\x20=\x20targetType.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20isParenthesized\x20=\x20!sig.parameters[varArgParamIndex].declAST.isParenthesized;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x20nonVarArgActualParamLength;\x20i\x20<\x20callEx.arguments.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(callEx.arguments.members[i].nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.typeCheckWithContextualType(targetType,\x20this.checker.inProvisionalTypecheckMode(),\x20isParenthesized,\x20callEx.arguments.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!acceptedTargetType\x20&&\x20callEx.arguments)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.killCurrentContextualType();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20callEx.arguments.members.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(callEx.arguments.members[i].nodeType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.FuncDecl:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ObjectLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20NodeType.ArrayLit:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeCheck(callEx.arguments.members[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20default:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheckCall(ast:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20callEx\x20=\x20<CallExpression>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.checker.styleSettings.newMustBeUsed\x20&&\x20(ast.nodeType\x20==\x20NodeType.New))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(ast.flags,\x20ASTFlags.IsStatement))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(ast,\x20\x22use\x20of\x20new\x20expression\x20as\x20a\x20statement\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((!this.checker.styleSettings.evalOK)\x20&&\x20(ast.nodeType\x20==\x20NodeType.Call))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((callEx.target.nodeType\x20==\x20NodeType.Name)\x20&&\x20((<Identifier>callEx.target).text\x20==\x20\x22eval\x22))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.styleError(callEx,\x20\x22eval\x20not\x20permitted\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.target.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<FuncDecl>callEx.target).isInlineCallLiteral\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20prevInSuperCall\x20=\x20this.inSuperCall;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.target.nodeType\x20==\x20NodeType.Super)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inSuperCall\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.target\x20=\x20this.typeCheck(callEx.target);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.preTypeCheckCallArgs(callEx.arguments);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20target\x20=\x20callEx.target;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((target.type\x20==\x20null)\x20||\x20(target.type\x20==\x20this.anyType)\x20||\x20(this.functionInterfaceType\x20&&\x20target.type\x20==\x20this.functionInterfaceType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fnType\x20=\x20target.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(fnType.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20this.resolveOverload(callEx,\x20fnType.call);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20signature.returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20track\x20calls\x20to\x20class\x20base\x20class\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(callEx.target.nodeType\x20==\x20NodeType.Super\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.thisFnc.isConstructor\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hasFlag(this.thisFnc.fncFlags,\x20FncFlags.ClassMethod))\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Need\x20to\x20use\x20the\x20class\x20type\x20for\x20the\x20construct\x20signature,\x20not\x20the\x20instance\x20type\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signature\x20=\x20fnType.symbol.type.construct\x20?\x20this.resolveOverload(callEx,\x20fnType.symbol.type.construct)\x20:\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(signature\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.flags\x20|=\x20ASTFlags.ClassBaseConstructorCall;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20signature.returnType.type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.signature\x20=\x20signature;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20callEx.type\x20=\x20this.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.errorReporter.invalidCall(callEx,\x20callEx.nodeType,\x20this.scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.postTypeCheckCallArgs(callEx);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.inSuperCall\x20=\x20prevInSuperCall;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20callEx;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20assignScopes(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.checker.locationInfo\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20globalChain\x20=\x20new\x20ScopeChain(this.checker.gloMod,\x20null,\x20this.globalScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20context\x20=\x20new\x20AssignScopeContext(globalChain,\x20this,\x20[this.checker.currentModDecl]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(ast,\x20preAssignScopes,\x20postAssignScopes,\x20null,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findMemberScope(enclosingScopeContext:\x20EnclosingScopeContext,\x20matchFlag:\x20ASTFlags)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosingScope\x20=\x20enclosingScopeContext.getScope();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pos\x20=\x20enclosingScopeContext.pos\x20-\x20enclosingScopeContext.getScriptFragmentPosition();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scriptFragment\x20=\x20enclosingScopeContext.getScriptFragment();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memContext\x20=\x20new\x20MemberScopeContext(this,\x20pos,\x20matchFlag);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memContext.scope\x20=\x20enclosingScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scriptFragment.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20scriptFragment.type.getMemberScope(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(scriptFragment,\x20preFindMemberScope,\x20null,\x20null,\x20memContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memContext.ast\x20&&\x20enclosingScopeContext.enclosingClassDecl\x20&&\x20memContext.ast.type\x20==\x20enclosingScopeContext.enclosingClassDecl.type.instanceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingScopeContext.publicsOnly\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memContext.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20memContext.type.getMemberScope(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findMemberScopeAt(enclosingScopeContext:\x20EnclosingScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.findMemberScope(enclosingScopeContext,\x20ASTFlags.DotLHS);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findMemberScopeAtFullAst(enclosingScopeContext:\x20EnclosingScopeContext)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20matchFlag\x20=\x20ASTFlags.DotLHS;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20pos\x20=\x20enclosingScopeContext.pos;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20astResult:\x20AST\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preFindMemberScopeFullAst\x20=\x20function\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isValidAstNode(ast))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note:\x20pos\x20==\x20ast.limChar\x20\x20\x20\x20\x20\x20\x20in\x20case\x20of\x20incomplete\x20code\x20(e.g.\x20\x22foo.\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Note:\x20(pos\x20-\x201)\x20==\x20ast.limChar\x20in\x20case\x20of\x20complete\x20code\x20(e.g.\x20\x22foo.bar\x22)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(ast.flags,\x20matchFlag)\x20&&\x20(pos\x20==\x20ast.limChar\x20||\x20(pos\x20-\x201)\x20==\x20ast.limChar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20astResult\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.stopWalk();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Stop\x20traversal\x20if\x20range\x20does\x20not\x20contain\x20position\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20(ast.minChar\x20<=\x20pos)\x20&&\x20(pos\x20<=\x20ast.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20preFindMemberScopeFullAstFuzy\x20=\x20function\x20(ast:\x20AST,\x20parent:\x20AST,\x20walker:\x20IAstWalker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isValidAstNode(ast))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(ast.flags,\x20matchFlag)\x20&&\x20((ast.minChar\x20<\x20pos)\x20&&\x20(pos\x20<=\x20ast.limChar)))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20astResult\x20=\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Stop\x20traversal\x20if\x20range\x20does\x20not\x20contain\x20position\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20walker.options.goChildren\x20=\x20(ast.minChar\x20<=\x20pos)\x20&&\x20(pos\x20<=\x20ast.limChar);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(enclosingScopeContext.script,\x20preFindMemberScopeFullAst);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(astResult\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Perform\x20a\x20more\x20\x22fusy\x22\x20match.\x20This\x20is\x20because\x20the\x20limChar\x20of\x20AST\x20nodes\x20is\x20sometimes\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20not\x20what\x20we\x20expect,\x20for\x20example:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20\x20\x20foo./*comment*/;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20In\x20this\x20case,\x20limChar\x20points\x20to\x20\x22;\x22\x20instead\x20of\x20\x22.\x22\x20(because\x20of\x20the\x20trailing\x20comment).\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(enclosingScopeContext.script,\x20preFindMemberScopeFullAstFuzy);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(astResult\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingScopeContext.enclosingClassDecl\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20astResult.type\x20==\x20enclosingScopeContext.enclosingClassDecl.type.instanceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20enclosingScopeContext.publicsOnly\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(astResult\x20&&\x20astResult.type)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20astResult.type.getMemberScope(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27diagnostics.ts\x27\x20/>\x0a///<reference\x20path=\x27flags.ts\x27\x20/>\x0a///<reference\x20path=\x27nodeTypes.ts\x27\x20/>\x0a///<reference\x20path=\x27hashTable.ts\x27\x20/>\x0a///<reference\x20path=\x27ast.ts\x27\x20/>\x0a///<reference\x20path=\x27astWalker.ts\x27\x20/>\x0a///<reference\x20path=\x27astWalkerCallback.ts\x27\x20/>\x0a///<reference\x20path=\x27astPath.ts\x27\x20/>\x0a///<reference\x20path=\x27astLogger.ts\x27\x20/>\x0a///<reference\x20path=\x27binder.ts\x27\x20/>\x0a///<reference\x20path=\x27base64.ts\x27\x20/>\x0a///<reference\x20path=\x27sourceMapping.ts\x27\x20/>\x0a///<reference\x20path=\x27emitter.ts\x27\x20/>\x0a///<reference\x20path=\x27errorReporter.ts\x27\x20/>\x0a///<reference\x20path=\x27parser.ts\x27\x20/>\x0a///<reference\x20path=\x27printContext.ts\x27\x20/>\x0a///<reference\x20path=\x27scanner.ts\x27\x20/>\x0a///<reference\x20path=\x27scopeAssignment.ts\x27\x20/>\x0a///<reference\x20path=\x27scopeWalk.ts\x27\x20/>\x0a///<reference\x20path=\x27signatures.ts\x27\x20/>\x0a///<reference\x20path=\x27symbols.ts\x27\x20/>\x0a///<reference\x20path=\x27symbolScope.ts\x27\x20/>\x0a///<reference\x20path=\x27tokens.ts\x27\x20/>\x0a///<reference\x20path=\x27typeChecker.ts\x27\x20/>\x0a///<reference\x20path=\x27typeCollection.ts\x27\x20/>\x0a///<reference\x20path=\x27typeFlow.ts\x27\x20/>\x0a///<reference\x20path=\x27types.ts\x27\x20/>\x0a///<reference\x20path=\x27pathUtils.ts\x27\x20/>\x0a///<reference\x20path=\x27referenceResolution.ts\x27\x20/>\x0a///<reference\x20path=\x27precompile.ts\x27\x20/>\x0a///<reference\x20path=\x27incrementalParser.ts\x27\x20/>\x0a///<reference\x20path=\x27declarationEmitter.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20enum\x20UpdateUnitKind\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20Unknown,\x0a\x20\x20\x20\x20\x20\x20\x20\x20NoEdits,\x0a\x20\x20\x20\x20\x20\x20\x20\x20EditsInsideSingleScope,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ScriptEditRange\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20minChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20limChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20delta:\x20number)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20unknown():\x20ScriptEditRange\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20ScriptEditRange(-1,\x20-1,\x20-1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isUnknown()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.minChar\x20===\x20-1\x20&&\x20this.limChar\x20===\x20-1\x20&&\x20this.delta\x20===\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containsPosition(pos:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(this.minChar\x20<=\x20pos\x20&&\x20pos\x20<\x20this.limChar)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20||\x20(this.minChar\x20<=\x20pos\x20&&\x20pos\x20<\x20this.limChar\x20+\x20this.delta);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20\x22editRange(minChar=\x22\x20+\x20this.minChar\x20+\x20\x22,\x20limChar=\x22\x20+\x20this.limChar\x20+\x20\x22,\x20delta=\x22\x20+\x20this.delta\x20+\x20\x22)\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20UpdateUnitResult\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20kind:\x20UpdateUnitKind,\x20public\x20unitIndex:\x20number,\x20public\x20script1:\x20Script,\x20public\x20script2:\x20Script)\x20{\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scope1:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scope2:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20editRange:\x20ScriptEditRange\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseErrors:\x20ErrorEntry[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20noEdits(unitIndex:\x20number)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20UpdateUnitResult(UpdateUnitKind.NoEdits,\x20unitIndex,\x20null,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20unknownEdits(script1:\x20Script,\x20script2:\x20Script,\x20parseErrors:\x20ErrorEntry[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20UpdateUnitResult(UpdateUnitKind.Unknown,\x20script1.locationInfo.unitIndex,\x20script1,\x20script2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.parseErrors\x20=\x20parseErrors;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20singleScopeEdits(script1:\x20Script,\x20script2:\x20Script,\x20scope1:\x20AST,\x20scope2:\x20AST,\x20editRange:\x20ScriptEditRange,\x20parseErrors:\x20ErrorEntry[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20UpdateUnitResult(UpdateUnitKind.EditsInsideSingleScope,\x20script1.locationInfo.unitIndex,\x20script1,\x20script2);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.scope1\x20=\x20scope1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.scope2\x20=\x20scope2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.editRange\x20=\x20editRange;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.parseErrors\x20=\x20parseErrors;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ErrorEntry\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20unitIndex:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20minChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20limChar:\x20number,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20message:\x20string)\x20{\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20var\x20defaultSettings\x20=\x20new\x20CompilationSettings();\x0a\x0a\x20\x20\x20\x20export\x20interface\x20EmitterIOHost\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20function\x20that\x20can\x20even\x20create\x20a\x20folder\x20structure\x20if\x20needed\x0a\x20\x20\x20\x20\x20\x20\x20\x20createFile(path:\x20string,\x20useUTF8?:\x20bool):\x20ITextWriter;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20function\x20to\x20check\x20if\x20file\x20exists\x20on\x20the\x20disk\x0a\x20\x20\x20\x20\x20\x20\x20\x20fileExists(path:\x20string):\x20bool;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Function\x20to\x20check\x20if\x20the\x20directory\x20exists\x20on\x20the\x20disk\x0a\x20\x20\x20\x20\x20\x20\x20\x20directoryExists(path:\x20string):\x20bool;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Resolves\x20the\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20resolvePath(path:\x20string):\x20string;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeScriptCompiler\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parser\x20=\x20new\x20Parser();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeChecker:\x20TypeChecker;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeFlow:\x20TypeFlow\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20scripts\x20=\x20new\x20ASTList();\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20units:\x20LocationInfo[]\x20=\x20new\x20LocationInfo[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20errorReporter:\x20ErrorReporter;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20persistentTypeState:\x20PersistentGlobalTypeState;\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitSettings:\x20EmitOptions;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20errorOutput:\x20ITextWriter,\x20public\x20logger:\x20ILogger\x20=\x20new\x20NullLogger(),\x20public\x20settings:\x20CompilationSettings\x20=\x20defaultSettings)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter\x20=\x20new\x20ErrorReporter(this.errorOutput);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState\x20=\x20new\x20PersistentGlobalTypeState(this.errorReporter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.parser\x20=\x20this.parser;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.initTypeChecker(this.errorOutput);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.style_requireSemi\x20=\x20this.settings.styleSettings.requireSemi;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.style_funcInLoop\x20=\x20this.settings.styleSettings.funcInLoop;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.inferPropertiesFromThisAssignment\x20=\x20this.settings.inferPropertiesFromThisAssignment;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings\x20=\x20new\x20EmitOptions(this.settings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20codeGenTarget\x20=\x20settings.codeGenTarget;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20timeFunction(funcDescription:\x20string,\x20func:\x20()\x20=>\x20any):\x20any\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeScript.timeFunction(this.logger,\x20funcDescription,\x20func);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20initTypeChecker(errorOutput:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20initial\x20\x22refresh\x22\x20initializes\x20the\x20persistent\x20type\x20state\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState.refreshPersistentState();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker\x20=\x20new\x20TypeChecker(this.persistentTypeState);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.errorReporter\x20=\x20this.errorReporter;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20These\x20properties\x20should\x20be\x20moved\x20out\x20of\x20the\x20typeCheck\x20object\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20ideally,\x20CF\x20should\x20be\x20a\x20separate\x20pass,\x20independent\x20of\x20control\x20flow\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.checkControlFlow\x20=\x20this.settings.controlFlow;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.checkControlFlowUseDef\x20=\x20this.settings.controlFlowUseDef;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.printControlFlowGraph\x20=\x20this.settings.printControlFlow;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.errorsOnWith\x20=\x20this.settings.errorOnWith;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.styleSettings\x20=\x20this.settings.styleSettings;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.canCallDefinitionSignature\x20=\x20this.settings.canCallDefinitionSignature;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.checker\x20=\x20this.typeChecker;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.setErrorOutput(this.errorOutput);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrorOutput(outerr)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorOutput\x20=\x20outerr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.setErrOut(outerr);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.outfile\x20=\x20outerr;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitCommentsToOutput()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings\x20=\x20new\x20EmitOptions(this.settings);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setErrorCallback(fn:\x20(minChar:\x20number,\x20charLen:\x20number,\x20message:\x20string,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20unitIndex:\x20number)\x20=>void\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback\x20=\x20fn;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20updateUnit(prog:\x20string,\x20filename:\x20string,\x20setRecovery:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.updateSourceUnit(new\x20StringSourceText(prog),\x20filename,\x20setRecovery);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20updateSourceUnit(sourceText:\x20ISourceText,\x20filename:\x20string,\x20setRecovery:\x20bool):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22updateSourceUnit(\x22\x20+\x20filename\x20+\x20\x22)\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20updateResult\x20=\x20this.partialUpdateUnit(sourceText,\x20filename,\x20setRecovery);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.applyUpdateResult(updateResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Apply\x20changes\x20to\x20compiler\x20state.\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20\x22false\x22\x20if\x20the\x20change\x20is\x20empty\x20and\x20nothing\x20was\x20updated.\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20applyUpdateResult(updateResult:\x20UpdateUnitResult):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20switch\x20(updateResult.kind)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20UpdateUnitKind.NoEdits:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20UpdateUnitKind.Unknown:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scripts.members[updateResult.unitIndex]\x20=\x20updateResult.script2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.units[updateResult.unitIndex]\x20=\x20updateResult.script2.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20updateResult.parseErrors.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20e\x20=\x20updateResult.parseErrors[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.parser.errorCallback)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback(e.minChar,\x20e.limChar\x20-\x20e.minChar,\x20e.message,\x20e.unitIndex);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20case\x20UpdateUnitKind.EditsInsideSingleScope:\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20new\x20IncrementalParser(this.logger).mergeTrees(updateResult);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20partialUpdateUnit(sourceText:\x20ISourceText,\x20filename:\x20string,\x20setRecovery:\x20bool):\x20UpdateUnitResult\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22partialUpdateUnit(\x22\x20+\x20filename\x20+\x20\x22)\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.units.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.units[i].filename\x20==\x20filename)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<Script>this.scripts.members[i]).isResident)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20UpdateUnitResult.noEdits(i);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(setRecovery)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.setErrorRecovery(null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20updateResult:\x20UpdateUnitResult;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Capture\x20parsing\x20errors\x20so\x20that\x20they\x20are\x20part\x20of\x20\x22updateResult\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20parseErrors:\x20ErrorEntry[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20errorCapture\x20=\x20(minChar:\x20number,\x20charLen:\x20number,\x20message:\x20string,\x20unitIndex:\x20number):\x20void\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parseErrors.push(new\x20ErrorEntry(unitIndex,\x20minChar,\x20minChar\x20+\x20charLen,\x20message));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svErrorCallback\x20=\x20this.parser.errorCallback;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(svErrorCallback)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback\x20=\x20errorCapture;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20oldScript\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20newScript\x20=\x20this.parser.parse(sourceText,\x20filename,\x20i);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(svErrorCallback)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.errorCallback\x20=\x20svErrorCallback;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20updateResult\x20=\x20UpdateUnitResult.unknownEdits(oldScript,\x20newScript,\x20parseErrors);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20updateResult;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20new\x20Error(\x22Unknown\x20file\x20\x5c\x22\x22\x20+\x20filename\x20+\x20\x22\x5c\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addUnit(prog:\x20string,\x20filename:\x20string,\x20keepResident?\x20=\x20false,\x20referencedFiles?:\x20IFileReference[]\x20=\x20[]):\x20Script\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.addSourceUnit(new\x20StringSourceText(prog),\x20filename,\x20keepResident,\x20referencedFiles);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addSourceUnit(sourceText:\x20ISourceText,\x20filename:\x20string,\x20keepResident:bool,\x20referencedFiles?:\x20IFileReference[]\x20=\x20[]):\x20Script\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22addSourceUnit(\x22\x20+\x20filename\x20+\x20\x22,\x20\x22\x20+\x20keepResident\x20+\x20\x22)\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script:\x20Script\x20=\x20this.parser.parse(sourceText,\x20filename,\x20this.units.length,\x20AllowedElements.Global);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.referencedFiles\x20=\x20referencedFiles;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.isResident\x20=\x20keepResident;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState.setCollectionMode(keepResident\x20?\x20TypeCheckCollectionMode.Resident\x20:\x20TypeCheckCollectionMode.Transient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20this.units.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.units[index]\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.collectTypes(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scripts.append(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20script\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseUnit(prog:\x20string,\x20filename:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.parseSourceUnit(new\x20StringSourceText(prog),\x20filename);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseSourceUnit(sourceText:\x20ISourceText,\x20filename:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parser.setErrorRecovery(this.errorOutput);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script:\x20Script\x20=\x20this.parser.parse(sourceText,\x20filename,\x200);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20index\x20=\x20this.units.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.units[index]\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.collectTypes(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.scripts.append(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeCheck()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22typeCheck()\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20binder\x20=\x20new\x20Binder(this.typeChecker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.units\x20=\x20this.units;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binder.bind(this.typeChecker.globalScope,\x20this.typeChecker.globals);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binder.bind(this.typeChecker.globalScope,\x20this.typeChecker.ambientGlobals);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binder.bind(this.typeChecker.globalScope,\x20this.typeChecker.globalTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20binder.bind(this.typeChecker.globalScope,\x20this.typeChecker.ambientGlobalTypes);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow\x20=\x20new\x20TypeFlow(this.logger,\x20this.typeChecker.globalScope,\x20this.parser,\x20this.typeChecker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20i\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script:\x20Script\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x20this.scripts.members.length;\x0a\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Resident);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20first,\x20typecheck\x20resident\x20\x22lib\x22\x20scripts,\x20if\x20necessary\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!script.isResident\x20||\x20script.hasBeenTypeChecked)\x20{\x20continue;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.assignScopes(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.initLibs();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!script.isResident\x20||\x20script.hasBeenTypeChecked)\x20{\x20continue;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script.hasBeenTypeChecked\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20next\x20typecheck\x20scripts\x20that\x20may\x20change\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20len\x20=\x20this.scripts.members.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(script.isResident)\x20{\x20continue;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.assignScopes(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.initLibs();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(i\x20=\x200;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(script.isResident)\x20{\x20continue;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlow.typeCheck(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cleanASTTypesForReTypeCheck(ast:\x20AST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20function\x20cleanASTType(ast:\x20AST,\x20parent:\x20AST):\x20AST\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ast.type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(ast.nodeType\x20==\x20NodeType.VarDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20vardecl\x20=\x20<VarDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20vardecl.sym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ArgDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20argdecl\x20=\x20<ArgDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20argdecl.sym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Name)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20<Identifier>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20name.sym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20funcdecl\x20=\x20<FuncDecl>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcdecl.signature\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcdecl.freeVariables\x20=\x20new\x20Symbol[]\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcdecl.symbols\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcdecl.accessorSymbol\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20funcdecl.scopeType\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.ModuleDeclaration)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20modDecl\x20=\x20<ModuleDeclaration>ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20modDecl.mod\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.With)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<WithStatement>ast).withSym\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(ast.nodeType\x20==\x20NodeType.Catch)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(<Catch>ast).containedScope\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20ast;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20TypeScript.getAstWalkerFactory().walk(ast,\x20cleanASTType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20cleanTypesForReTypeCheck()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22cleanTypesForReTypeCheck()\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((<Script>script).isResident)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cleanASTTypesForReTypeCheck(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.collectTypes(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20\x22true\x22\x20if\x20the\x20incremental\x20typecheck\x20was\x20successful\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20\x22false\x22\x20if\x20incremental\x20typecheck\x20failed,\x20requiring\x20a\x20full\x20typecheck\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20attemptIncrementalTypeCheck(updateResult:\x20TypeScript.UpdateUnitResult):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22attemptIncrementalTypeCheck()\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20updateResult.kind\x20==\x20editsInsideFunction\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20updateResult.scope1\x20==\x20old\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20updateResult.scope2\x20==\x20new\x20function\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//REVIEW:\x20What\x20about\x20typecheck\x20errors?\x20How\x20do\x20we\x20replace\x20the\x20old\x20ones\x20with\x20the\x20new\x20ones?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reTypeCheck()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.timeFunction(\x22reTypeCheck()\x22,\x20()\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20CompilerDiagnostics.analysisPass++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.initTypeChecker(this.errorOutput);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.persistentTypeState.setCollectionMode(TypeCheckCollectionMode.Transient);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.cleanTypesForReTypeCheck();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.typeCheck();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20});\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20isDynamicModuleCompilation()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!script.isDeclareFile\x20&&\x20script.topLevelMod\x20!=\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20updateCommonDirectoryPath()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commonComponents:\x20string[]\x20=\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20commonComponentsLength\x20=\x20-1;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(script.emitRequired(this.emitSettings))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fileName\x20=\x20script.locationInfo.filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fileComponents\x20=\x20filePathComponents(fileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commonComponentsLength\x20==\x20-1)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20First\x20time\x20at\x20finding\x20common\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20So\x20common\x20path\x20=\x20directory\x20of\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commonComponents\x20=\x20fileComponents;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commonComponentsLength\x20=\x20commonComponents.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20updatedPath\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20j\x20=\x200;\x20j\x20<\x20commonComponentsLength\x20&&\x20j\x20<\x20fileComponents.length;\x20j++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(commonComponents[j]\x20!=\x20fileComponents[j])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20new\x20components\x20=\x200\x20...\x20j\x20-1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commonComponentsLength\x20=\x20j;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20updatedPath\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(j\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20error\x20to\x20not\x20have\x20common\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20\x22Cannot\x20find\x20the\x20common\x20subdirectory\x20path\x20for\x20the\x20input\x20files\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20the\x20fileComponent\x20path\x20completely\x20matched\x20and\x20less\x20than\x20already\x20found\x20update\x20the\x20length\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!updatedPath\x20&&\x20fileComponents.length\x20<\x20commonComponentsLength)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20commonComponentsLength\x20=\x20fileComponents.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.commonDirectoryPath\x20=\x20commonComponents.slice(0,\x20commonComponentsLength).join(\x22/\x22)\x20+\x20\x22/\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputOption.charAt(this.emitSettings.outputOption.length\x20-\x201)\x20!=\x20\x22/\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputOption\x20+=\x20\x22/\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20parseEmitOption(ioHost:\x20EmitterIOHost)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.ioHost\x20=\x20ioHost;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputOption\x20==\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputMany\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.commonDirectoryPath\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputOption\x20=\x20switchToForwardSlashes(this.emitSettings.ioHost.resolvePath(this.emitSettings.outputOption));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Determine\x20if\x20output\x20options\x20is\x20directory\x20or\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.ioHost.directoryExists(this.emitSettings.outputOption))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Existing\x20directory\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputMany\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(this.emitSettings.ioHost.fileExists(this.emitSettings.outputOption))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Existing\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputMany\x20=\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20New\x20File/directory\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitSettings.outputMany\x20=\x20!isJSFile(this.emitSettings.outputOption);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Verify\x20if\x20options\x20are\x20correct\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isDynamicModuleCompilation()\x20&&\x20!this.emitSettings.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20\x22Cannot\x20compile\x20dynamic\x20modules\x20when\x20emitting\x20into\x20single\x20file\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Parse\x20the\x20directory\x20structure\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.updateCommonDirectoryPath();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20useUTF8ForFile(script:\x20Script)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.outputScriptToUTF8(script);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.outputScriptsToUTF8(<Script[]>(this.scripts.members));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20mapToDTSFileName(fileName:\x20string,\x20wholeFileNameReplaced:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20getDeclareFilePath(fileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20canEmitDeclarations(script?:\x20Script)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.settings.generateDeclarationFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20its\x20already\x20a\x20declare\x20file\x20or\x20is\x20resident\x20or\x20does\x20not\x20contain\x20body\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!!script\x20&&\x20(script.isDeclareFile\x20||\x20script.isResident\x20||\x20script.bod\x20==\x20null))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitDeclarationsUnit(script:\x20Script,\x20reuseEmitter?:\x20bool,\x20declarationEmitter?:\x20DeclarationEmitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitDeclarations(script))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!declarationEmitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declareFileName\x20=\x20this.emitSettings.mapOutputFileName(script.locationInfo.filename,\x20TypeScriptCompiler.mapToDTSFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declareFile\x20=\x20this.createFile(declareFileName,\x20this.useUTF8ForFile(script));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter\x20=\x20new\x20DeclarationEmitter(this.typeChecker,\x20this.emitSettings,\x20this.errorReporter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter.setDeclarationFile(declareFile);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter.emitDeclarations(script);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!reuseEmitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20declarationEmitter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitDeclarations()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.canEmitDeclarations())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.errorReporter.hasErrors)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20There\x20were\x20errors\x20reported,\x20do\x20not\x20generate\x20declaration\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.scripts.members.length\x20==\x200)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20declarationEmitter:\x20DeclarationEmitter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany\x20||\x20declarationEmitter\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20or\x20reuse\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter\x20=\x20this.emitDeclarationsUnit(script,\x20!this.emitSettings.outputMany);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Emit\x20in\x20existing\x20emitter\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitDeclarationsUnit(script,\x20true,\x20declarationEmitter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(declarationEmitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20declarationEmitter.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20mapToFileNameExtension(extension:\x20string,\x20fileName:\x20string,\x20wholeFileNameReplaced:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(wholeFileNameReplaced)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20The\x20complete\x20output\x20is\x20redirected\x20in\x20this\x20file\x20so\x20do\x20not\x20change\x20extension\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20fileName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Change\x20the\x20extension\x20of\x20the\x20file\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20splitFname\x20=\x20fileName.split(\x22.\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20splitFname.pop();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20splitFname.join(\x22.\x22)\x20+\x20extension;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20mapToJSFileName(fileName:\x20string,\x20wholeFileNameReplaced:\x20bool)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeScriptCompiler.mapToFileNameExtension(\x22.js\x22,\x20fileName,\x20wholeFileNameReplaced);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitUnit(script:\x20Script,\x20reuseEmitter?:\x20bool,\x20emitter?:\x20Emitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!script.emitRequired(this.emitSettings))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fname\x20=\x20script.locationInfo.filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!emitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outFname\x20=\x20this.emitSettings.mapOutputFileName(fname,\x20TypeScriptCompiler.mapToJSFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outFile\x20=\x20this.createFile(outFname,\x20this.useUTF8ForFile(script));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter\x20=\x20new\x20Emitter(this.typeChecker,\x20outFname,\x20outFile,\x20this.emitSettings,\x20this.errorReporter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.settings.mapSourceFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setSourceMappings(new\x20TypeScript.SourceMapper(fname,\x20outFname,\x20outFile,\x20this.createFile(outFname\x20+\x20SourceMapper.MapFileExtension,\x20false),\x20this.errorReporter));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(this.settings.mapSourceFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.setSourceMappings(new\x20TypeScript.SourceMapper(fname,\x20emitter.emittingFileName,\x20emitter.outfile,\x20emitter.sourceMapper.sourceMapOut,\x20this.errorReporter));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.locationInfo\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(script,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!reuseEmitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20emitter;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emit(ioHost:\x20EmitterIOHost)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseEmitOption(ioHost);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emitter:\x20Emitter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany\x20||\x20emitter\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter\x20=\x20this.emitUnit(script,\x20!this.emitSettings.outputMany);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.emitUnit(script,\x20true,\x20emitter);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(emitter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitToOutfile(outputFile:\x20ITextWriter)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.settings.mapSourceFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20Error(\x22Cannot\x20generate\x20source\x20map\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.settings.generateDeclarationFiles)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20Error(\x22Cannot\x20generate\x20declaration\x20files\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.settings.outputOption\x20!=\x20\x22\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20throw\x20Error(\x22Cannot\x20parse\x20output\x20option\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20emitter:\x20Emitter\x20=\x20emitter\x20=\x20new\x20Emitter(this.typeChecker,\x20\x22stdout\x22,\x20outputFile,\x20this.emitSettings,\x20this.errorReporter);;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeChecker.locationInfo\x20=\x20script.locationInfo;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20emitter.emitJavascript(script,\x20TokenID.Comma,\x20false);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20emitAST(ioHost:\x20EmitterIOHost)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.parseEmitOption(ioHost);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outFile:\x20ITextWriter\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20context:\x20PrintContext\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.scripts.members.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20<Script>this.scripts.members[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany\x20||\x20context\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20fname\x20=\x20this.units[i].filename;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mapToTxtFileName\x20=\x20(fileName:\x20string,\x20wholeFileNameReplaced:\x20bool)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20TypeScriptCompiler.mapToFileNameExtension(\x22.txt\x22,\x20fileName,\x20wholeFileNameReplaced);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20outFname\x20=\x20this.emitSettings.mapOutputFileName(fname,\x20mapToTxtFileName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outFile\x20=\x20this.createFile(outFname,\x20this.useUTF8ForFile(script));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20context\x20=\x20new\x20PrintContext(outFile,\x20this.parser);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20getAstWalkerFactory().walk(script,\x20prePrintAST,\x20postPrintAST,\x20null,\x20context);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.emitSettings.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outFile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20e.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!this.emitSettings.outputMany)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20outFile.Close();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20e.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20outputScriptToUTF8(script:\x20Script):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20script.containsUnicodeChar\x20||\x20(this.emitSettings.emitComments\x20&&\x20script.containsUnicodeCharInComment);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20outputScriptsToUTF8(scripts:\x20Script[]):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20scripts.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20script\x20=\x20scripts[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.outputScriptToUTF8(script))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20createFile(fileName:\x20string,\x20useUTF8:\x20bool):\x20ITextWriter\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Creating\x20files\x20can\x20cause\x20exceptions,\x20report\x20them.\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.emitSettings.ioHost.createFile(fileName,\x20useUTF8);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(ex)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.errorReporter.emitterError(null,\x20ex.message);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ScopeEntry\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20name:\x20string,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20type:\x20string,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20public\x20sym:\x20Symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ScopeTraversal\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(private\x20compiler:\x20TypeScriptCompiler)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScope(enclosingScopeContext:\x20EnclosingScopeContext):\x20SymbolScope\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingScopeContext.enclosingObjectLit\x20&&\x20enclosingScopeContext.isMemberCompletion)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20enclosingScopeContext.getObjectLiteralScope();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(enclosingScopeContext.isMemberCompletion)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(enclosingScopeContext.useFullAst)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20enclosingScopeContext.getScope();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScopeEntries(enclosingScopeContext:\x20EnclosingScopeContext):\x20ScopeEntry[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20scope\x20=\x20this.getScope(enclosingScopeContext);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(scope\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20inScopeNames:\x20IHashTable\x20=\x20new\x20StringHashTable();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20allSymbolNames:\x20string[]\x20=\x20scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20there\x20may\x20be\x20duplicates\x20between\x20the\x20type\x20and\x20value\x20tables,\x20so\x20batch\x20the\x20symbols\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20getTypeNamesForNames\x20will\x20prefer\x20the\x20entry\x20in\x20the\x20value\x20table\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20allSymbolNames.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20allSymbolNames[i];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Skip\x20global/internal\x20symbols\x20that\x20won\x27t\x20compile\x20in\x20user\x20code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(name\x20==\x20globalId\x20||\x20name\x20==\x20\x22_Core\x22\x20||\x20name\x20==\x20\x22_element\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20continue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20inScopeNames.add(name,\x20\x22\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20svModuleDecl\x20=\x20this.compiler.typeChecker.currentModDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compiler.typeChecker.currentModDecl\x20=\x20enclosingScopeContext.deepestModuleDecl;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20this.getTypeNamesForNames(enclosingScopeContext,\x20inScopeNames.getAllKeys(),\x20scope);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.compiler.typeChecker.currentModDecl\x20=\x20svModuleDecl;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20private\x20getTypeNamesForNames(enclosingScopeContext:\x20EnclosingScopeContext,\x20allNames:\x20string[],\x20scope:\x20SymbolScope):\x20ScopeEntry[]\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result:\x20ScopeEntry[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20enclosingScope\x20=\x20enclosingScopeContext.getScope();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200;\x20i\x20<\x20allNames.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20name\x20=\x20allNames[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Search\x20for\x20the\x20id\x20in\x20the\x20value\x20space\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20we\x20don\x27t\x20find\x20it,\x20search\x20in\x20the\x20type\x20space.\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20We\x20don\x27t\x20want\x20to\x20search\x20twice,\x20because\x20the\x20first\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20search\x20may\x20insert\x20the\x20name\x20in\x20the\x20symbol\x20value\x20table\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20if\x20the\x20scope\x20is\x20aggregate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20publicsOnly\x20=\x20enclosingScopeContext.publicsOnly\x20&&\x20enclosingScopeContext.isMemberCompletion;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20scope.find(name,\x20publicsOnly,\x20false/*typespace*/);\x20\x20//\x20REVIEW:\x20Should\x20search\x20public\x20members\x20only?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20symbol\x20=\x20scope.find(name,\x20publicsOnly,\x20true/*typespace*/);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20displayThisMember\x20=\x20symbol\x20&&\x20symbol.flags\x20&\x20SymbolFlags.Private\x20?\x20symbol.container\x20==\x20scope.container\x20:\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Do\x20not\x20add\x20dynamic\x20module\x20names\x20to\x20the\x20list,\x20since\x20they\x27re\x20not\x20legal\x20as\x20identifiers\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(displayThisMember\x20&&\x20!isQuoted(symbol.name)\x20&&\x20!isRelative(symbol.name))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeName\x20=\x20symbol.getType().getScopedTypeName(enclosingScope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.push(new\x20ScopeEntry(name,\x20typeName,\x20symbol));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Special\x20case\x20for\x20\x22true\x22\x20and\x20\x22false\x22\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20This\x20may\x20no\x20longer\x20be\x20necessary?\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(name\x20==\x20\x22true\x22\x20||\x20name\x20==\x20\x22false\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.push(new\x20ScopeEntry(name,\x20\x22bool\x22,\x20this.compiler.typeChecker.booleanType.symbol));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a}\x0a//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20TypeScript\x20{\x0a\x0a\x20\x20\x20\x20export\x20enum\x20Primitive\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20None\x20=\x200,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Void\x20=\x201,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Double\x20=\x202,\x0a\x20\x20\x20\x20\x20\x20\x20\x20String\x20=\x204,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Boolean\x20=\x208,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Any\x20=\x2016,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Null\x20=\x2032,\x0a\x20\x20\x20\x20\x20\x20\x20\x20Undefined\x20=\x2064,\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20prefix:\x20string\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20suffix:\x20string\x20=\x20\x22\x22;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isString()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArray()\x20{\x20return\x20false;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20toString():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.memberNameToString(this);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20memberNameToString(memberName:\x20MemberName):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20memberName.prefix;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(memberName.isString())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20(<MemberNameString>memberName).text;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20ar\x20=\x20<MemberNameArray>memberName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20index\x20=\x200;\x20index\x20<\x20ar.entries.length;\x20index++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20memberNameToString(ar.entries[index]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20ar.delim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20+=\x20memberName.suffix;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20create(text:\x20string):\x20MemberName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20create(entry:\x20MemberName,\x20prefix:\x20string,\x20suffix:\x20string):\x20MemberName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20create(arg1:\x20any,\x20arg2?:\x20any,\x20arg3?:\x20any):\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeof\x20arg1\x20==\x20\x22string\x22)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20new\x20MemberNameString(arg1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20MemberNameArray();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arg2)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.prefix\x20=\x20arg2;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(arg3)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.suffix\x20=\x20arg3;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.entries.push(arg1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20MemberNameString\x20extends\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20text:\x20string)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super()\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isString()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20MemberNameArray\x20extends\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20delim:\x20string\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20entries:\x20MemberName[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArray()\x20{\x20return\x20true;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20add(entry:\x20MemberName)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.entries.push(entry);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20addAll(entries:\x20MemberName[])\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200\x20;\x20i\x20<\x20entries.length;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.entries.push(entries[i]);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20var\x20currentTypeID\x20=\x20-1;\x0a\x0a\x20\x20\x20\x20export\x20class\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeID\x20=\x20currentTypeID++;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20members:\x20ScopedMembers;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ambientMembers:\x20ScopedMembers;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20construct:\x20SignatureGroup\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20call:\x20SignatureGroup\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20index:\x20SignatureGroup\x20=\x20null;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20for\x20either\x20of\x20the\x20below,\x20why\x20do\x20we\x20have\x20lists\x20of\x20types\x20and\x20lists\x20of\x20type\x20links?\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20interface\x20can\x20only\x20extend\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20extendsList:\x20Type[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20extendsTypeLinks:\x20TypeLink[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20class\x20can\x20also\x20implement\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20implementsList:\x20Type[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20implementsTypeLinks:\x20TypeLink[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20passTypeCreated:\x20number\x20=\x20CompilerDiagnostics.analysisPass;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20baseClass():\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.extendsList\x20&&\x20(this.extendsList.length\x20>\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.extendsList[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20elementType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getArrayBase(arrInstType:\x20Type,\x20checker:\x20TypeChecker):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.arrayCache.specialize(arrInstType,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20primitiveTypeClass:\x20number\x20=\x20Primitive.None;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Prune\x20constructorScope\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20constructorScope:\x20SymbolScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20containedScope:\x20SymbolScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20memberScope:\x20SymbolScope;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20arrayCache:\x20ArrayCache;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20typeFlags\x20=\x20TypeFlags.None;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20symbol:\x20TypeSymbol;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20enclosingType:\x20Type;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20instanceType:\x20Type;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20Prune\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isClass()\x20{\x20return\x20this.instanceType\x20!=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isArray()\x20{\x20return\x20this.elementType\x20!=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isClassInstance()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.symbol\x20&&\x20!this.elementType\x20&&\x20(<TypeSymbol>this.symbol).type.isClass();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getInstanceType()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.instanceType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasImplementation()\x20{\x20return\x20hasFlag(this.typeFlags,\x20TypeFlags.HasImplementation);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20setHasImplementation()\x20{\x20this.typeFlags\x20|=\x20TypeFlags.HasImplementation;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isDouble()\x20{\x20return\x20hasFlag(this.primitiveTypeClass,\x20Primitive.Double);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isString()\x20{\x20return\x20hasFlag(this.primitiveTypeClass,\x20Primitive.String);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isBoolean()\x20{\x20return\x20hasFlag(this.primitiveTypeClass,\x20Primitive.Boolean);\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isNull()\x20{\x20return\x20hasFlag(this.primitiveTypeClass,\x20Primitive.Null);\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20No\x20need\x20for\x20this\x20to\x20be\x20a\x20method\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getTypeName():\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getMemberTypeName(\x22\x22,\x20true,\x20false,\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScopedTypeName(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getMemberTypeName(\x22\x22,\x20true,\x20false,\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getScopedTypeNameEx(scope:\x20SymbolScope)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.getMemberTypeNameEx(\x22\x22,\x20true,\x20false,\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20No\x20need\x20for\x20this\x20to\x20be\x20a\x20method\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20callCount()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20total\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20total\x20+=\x20this.call.signatures.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20total\x20+=\x20this.construct.signatures.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20total\x20+=\x20this.index.signatures.length;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20total;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20No\x20need\x20for\x20this\x20to\x20be\x20a\x20method\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getMemberTypeName(prefix:\x20string,\x20topLevel:\x20bool,\x20isElementType:\x20bool,\x20scope:\x20SymbolScope):\x20string\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memberName\x20=\x20this.getMemberTypeNameEx(prefix,\x20topLevel,\x20isElementType,\x20scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20memberName.toString();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20REVIEW:\x20No\x20need\x20for\x20this\x20to\x20be\x20a\x20method\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getMemberTypeNameEx(prefix:\x20string,\x20topLevel:\x20bool,\x20isElementType:\x20bool,\x20scope:\x20SymbolScope):\x20MemberName\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(this.elementType.getMemberTypeNameEx(prefix,\x20false,\x20true,\x20scope),\x20\x22\x22,\x20\x22[]\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.symbol\x20&&\x20this.symbol.name\x20&&\x20this.symbol.name\x20!=\x20\x22_anonymous\x22\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(((this.call\x20==\x20null)\x20&&\x20(this.construct\x20==\x20null)\x20&&\x20(this.index\x20==\x20null))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(hasFlag(this.typeFlags,\x20TypeFlags.BuildingName))\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(this.members\x20&&\x20(!this.isClass()))))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20tn\x20=\x20this.symbol.scopeRelativeName(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(tn\x20==\x20\x22null\x22\x20?\x20\x22any\x22\x20:\x20tn);\x20//\x20REVIEW:\x20GROSS!!!\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.members\x20||\x20this.call\x20||\x20this.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(hasFlag(this.typeFlags,\x20TypeFlags.BuildingName))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(\x22this\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlags\x20|=\x20TypeFlags.BuildingName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20builder\x20=\x20\x22\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20allMemberNames\x20=\x20new\x20MemberNameArray();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20curlies\x20=\x20isElementType\x20||\x20this.index\x20!=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20memCount\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20delim\x20=\x20\x22;\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members.allMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(!hasFlag(sym.flags,\x20SymbolFlags.BuiltIn))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Remove\x20the\x20delimiter\x20character\x20from\x20the\x20generated\x20type\x20name,\x20since\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20our\x20\x22allMemberNames\x22\x20array\x20takes\x20care\x20of\x20storing\x20delimiters\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20typeNameMember\x20=\x20sym.getTypeNameEx(scope);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(typeNameMember.isArray()\x20&&\x20(<MemberNameArray>typeNameMember).delim\x20==\x20delim)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.add(typeNameMember);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20memCount++;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20curlies\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20signatureCount\x20=\x20this.callCount();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20j:\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20len\x20=\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20shortform\x20=\x20!curlies\x20&&\x20signatureCount\x20==\x201\x20&&\x20topLevel;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.addAll(this.call.toStrings(prefix,\x20shortform,\x20scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.construct)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.addAll(this.construct.toStrings(\x22new\x22,\x20shortform,\x20scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.index)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.addAll(this.index.toStrings(\x22\x22,\x20shortform,\x20scope));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((curlies)\x20||\x20((signatureCount\x20>\x201)\x20&&\x20topLevel))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.prefix\x20=\x20\x22{\x20\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.suffix\x20=\x20\x22}\x22;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.delim\x20=\x20delim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20if\x20(allMemberNames.entries.length\x20>\x201)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20allMemberNames.delim\x20=\x20delim;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.typeFlags\x20&=\x20(~TypeFlags.BuildingName);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((signatureCount\x20==\x200)\x20&&\x20(memCount\x20==\x200))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(\x22{}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20allMemberNames;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20MemberName.create(\x22{}\x22);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20checkDecl(checker:\x20TypeChecker)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isClassInstance()\x20||\x20this.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.symbol.declAST)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getMemberScope(flow:\x20TypeFlow)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this\x20==\x20flow.anyType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.isDouble())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(flow.numberInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20flow.numberInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.isBoolean())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(flow.booleanInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20flow.booleanInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this\x20==\x20flow.stringType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(flow.stringInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20flow.stringInterfaceType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(flow.arrayInterfaceType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20arrInstType\x20=\x20this.elementType.getArrayBase(flow.arrayInterfaceType,\x20flow.checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20arrInstType.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.memberScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isReferenceType()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.members\x20||\x20this.extendsList\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.construct\x20||\x20this.call\x20||\x20this.index\x20||\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.elementType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20specializeType(pattern:\x20Type,\x20replacement:\x20Type,\x20checker:\x20TypeChecker,\x20membersOnly:\x20bool):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(pattern\x20==\x20this)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20replacement;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(membersOnly)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20assume\x20interface\x20type\x20without\x20bases\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isReferenceType())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.members)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.members\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members.publicMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bSym\x20=\x20sym.specializeType(pattern,\x20replacement,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.members.addPublicMember(bSym.name,\x20bSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.members.privateMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bSym\x20=\x20sym.specializeType(pattern,\x20replacement,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.members.addPrivateMember(bSym.name,\x20bSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.ambientMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.ambientMembers\x20=\x20new\x20ScopedMembers(new\x20DualStringHashTable(new\x20StringHashTable(),\x20new\x20StringHashTable()));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientMembers.publicMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bSym\x20=\x20sym.specializeType(pattern,\x20replacement,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.ambientMembers.addPublicMember(bSym.name,\x20bSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20this.ambientMembers.privateMembers.map((key,\x20s,\x20unused)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20sym\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20bSym\x20=\x20sym.specializeType(pattern,\x20replacement,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.ambientMembers.addPrivateMember(bSym.name,\x20bSym);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.containedScope\x20=\x20checker.scopeOf(result);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.memberScope\x20=\x20result.containedScope;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType\x20==\x20pattern)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20checker.makeArrayType(replacement);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType.elementType\x20==\x20pattern)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20checker.makeArrayType(checker.makeArrayType(replacement));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.call)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result\x20=\x20new\x20Type();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.call\x20=\x20this.call.specializeType(pattern,\x20replacement,\x20checker);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasBase(baseType:\x20Type):\x20bool\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(baseType\x20==\x20this)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.extendsList)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(var\x20i\x20=\x200,\x20len\x20=\x20this.extendsList.length;\x20i\x20<\x20len;\x20i++)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.extendsList[i].hasBase(baseType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20false;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20mergeOrdered(b:\x20Type,\x20checker:\x20TypeChecker,\x20acceptVoid:\x20bool,\x20comparisonInfo?:\x20TypeComparisonInfo):\x20Type\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20((this\x20==\x20checker.anyType)\x20||\x20(b\x20==\x20checker.anyType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this\x20==\x20b)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((b\x20==\x20checker.nullType)\x20&&\x20this\x20!=\x20checker.nullType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this\x20==\x20checker.nullType)\x20&&\x20(b\x20!=\x20checker.nullType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(acceptVoid\x20&&\x20(b\x20==\x20checker.voidType)\x20&&\x20this\x20!=\x20checker.voidType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(acceptVoid\x20&&\x20(this\x20==\x20checker.voidType)\x20&&\x20(b\x20!=\x20checker.voidType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((b\x20==\x20checker.undefinedType)\x20&&\x20this\x20!=\x20checker.undefinedType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20((this\x20==\x20checker.undefinedType)\x20&&\x20(b\x20!=\x20checker.undefinedType))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(this.elementType\x20&&\x20b.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType\x20==\x20b.elementType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20mergedET\x20=\x20this.elementType.mergeOrdered(b.elementType,\x20checker,\x20acceptVoid,\x20comparisonInfo);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(mergedET\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20checker.makeArrayType(checker.anyType);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20checker.makeArrayType(mergedET);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(checker.sourceIsSubtypeOfTarget(this,\x20b,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20b;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20if\x20(checker.sourceIsSubtypeOfTarget(b,\x20this,\x20comparisonInfo))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isModuleType()\x20{\x20return\x20false;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasMembers()\x20{\x20return\x20this.members\x20!=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllAmbientEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getPublicEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getpublicAmbientEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getDocComments():\x20Comment[]{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.elementType\x20||\x20!this.symbol)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.isClassInstance()\x20||\x20this.isClass())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.symbol.declAST.nodeType\x20==\x20NodeType.FuncDecl)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20a\x20constructor\x20-\x20use\x20the\x20class\x20declaration\x20instead\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20(<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Its\x20a\x20class\x20without\x20constructor\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.symbol.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(this.symbol.name\x20&&\x20this.symbol.name\x20!=\x20\x22_anonymous\x22\x20&&\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(((this.call\x20==\x20null)\x20&&\x20(this.construct\x20==\x20null)\x20&&\x20(this.index\x20==\x20null))\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20||\x20this.members))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20this.symbol.getDocComments();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20[];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20interface\x20ITypeCollection\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20returns\x20null\x20when\x20types\x20are\x20exhausted\x0a\x20\x20\x20\x20\x20\x20\x20\x20getLength():\x20number;\x0a\x20\x20\x20\x20\x20\x20\x20\x20setTypeAtIndex(index:\x20number,\x20type:\x20Type):\x20void;\x0a\x20\x20\x20\x20\x20\x20\x20\x20getTypeAtIndex(index:\x20number):\x20Type;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20ModuleType\x20extends\x20Type\x20{\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20constructor\x20(public\x20enclosedTypes:\x20ScopedMembers,\x20public\x20ambientEnclosedTypes:\x20ScopedMembers)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20super();\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20isModuleType()\x20{\x20return\x20true;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20hasMembers()\x20{\x20return\x20this.members\x20!=\x20null\x20||\x20this.enclosedTypes\x20!=\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllEnclosedTypes()\x20{\x20return\x20this.enclosedTypes;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getAllAmbientEnclosedTypes()\x20{\x20return\x20this.ambientEnclosedTypes;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getPublicEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20getpublicAmbientEnclosedTypes():\x20ScopedMembers\x20{\x20return\x20null;\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20importedModules:\x20ImportDeclaration[]\x20=\x20[];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Finds\x20the\x20dynamic\x20module\x20name\x20of\x20moduleType\x20in\x20the\x20members\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20ignoreSymbols\x20define\x20list\x20of\x20symbols\x20already\x20visited\x20-\x20to\x20avoid\x20recursion\x0a\x20\x20\x20\x20\x20\x20\x20\x20static\x20findDynamicModuleNameInHashTable(moduleType:\x20Type,\x20members:\x20IHashTable)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleName:\x20{\x20name:\x20string;\x20symbol:\x20Symbol;\x20}\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20members.map((key,\x20s,\x20c)\x20=>\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleName\x20==\x20null\x20&&\x20!isQuoted(key))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20symbol\x20=\x20<Symbol>s;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20type\x20=\x20symbol.getType();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(type\x20==\x20moduleType)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20If\x20this\x20is\x20the\x20module\x20type\x20we\x20were\x20looking\x20for\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleName\x20=\x20{\x20name:\x20key,\x20symbol:\x20symbol\x20};\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20},\x20null);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20moduleName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Finds\x20the\x20Dynamic\x20module\x20name\x20of\x20the\x20moduleType\x20in\x20this\x20moduleType\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20onlyPublic\x20tells\x20if\x20we\x20are\x20looking\x20for\x20module\x20name\x20in\x20public\x20members\x20only\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20findDynamicModuleName(moduleType:\x20Type):\x20{\x20name:\x20string;\x20symbol:\x20Symbol;\x20}\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20var\x20moduleName:\x20{\x20name:\x20string;\x20symbol:\x20Symbol;\x20}\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Not\x20cached,\x20so\x20seach\x20and\x20add\x20to\x20the\x20cache\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleName\x20=\x20ModuleType.findDynamicModuleNameInHashTable(moduleType,\x20this.members.allMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(moduleName\x20==\x20null)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20moduleName\x20=\x20ModuleType.findDynamicModuleNameInHashTable(moduleType,\x20this.ambientMembers.allMembers);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20moduleName;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20TypeLink\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20type:\x20Type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20ast:\x20AST\x20=\x20null;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20function\x20getTypeLink(ast:\x20AST,\x20checker:\x20TypeChecker,\x20autoVar:\x20bool):\x20TypeLink\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20var\x20result\x20=\x20new\x20TypeLink();\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20result.ast\x20=\x20ast;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20((ast\x20==\x20null)\x20&&\x20(autoVar))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.type\x20=\x20checker.anyType;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20else\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20result.type\x20=\x20null;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20result;\x0a\x20\x20\x20\x20}\x0a\x0a}//\x0a//\x20Copyright\x20(c)\x20Microsoft\x20Corporation.\x20\x20All\x20rights\x20reserved.\x0a//\x20\x0a//\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\x22License\x22);\x0a//\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\x0a//\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\x0a//\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\x0a//\x0a//\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\x0a//\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\x22AS\x20IS\x22\x20BASIS,\x0a//\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\x0a//\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\x0a//\x20limitations\x20under\x20the\x20License.\x0a//\x0a\x0a///<reference\x20path=\x27typescript.ts\x27\x20/>\x0a\x0amodule\x20Tools\x20{\x0a\x20\x20\x20\x20export\x20interface\x20IWalkContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20goChildren:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20goNextSibling:\x20bool;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20visit\x20siblings\x20in\x20reverse\x20execution\x20order\x0a\x20\x20\x20\x20\x20\x20\x20\x20reverseSiblings:\x20bool;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20export\x20class\x20BaseWalkContext\x20implements\x20IWalkContext\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20goChildren\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20goNextSibling\x20=\x20true;\x0a\x20\x20\x20\x20\x20\x20\x20\x20public\x20reverseSiblings\x20=\x20false;\x0a\x20\x20\x20\x20}\x0a}';function a0_0x1bc6(){var _0xa13036=['504840XXWKlP','8056250fspfOG','161485TquQIj','18kUrAzL','94192mqMzBC','21rOhyBI','76GvhQLs','705666nvzVBH','3727096AfITmj','1229928qyvniQ'];a0_0x1bc6=function(){return _0xa13036;};return a0_0x1bc6();}