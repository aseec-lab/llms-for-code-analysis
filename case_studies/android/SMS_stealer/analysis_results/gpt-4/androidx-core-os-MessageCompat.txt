The `MessageCompat` class provides compatibility methods related to Android's `Message` class. It includes two methods: `isAsynchronous(Message paramMessage)` and `setAsynchronous(Message paramMessage, boolean paramBoolean)`.

The `isAsynchronous(Message paramMessage)` method checks whether the passed `Message` is asynchronous. It first checks the Android version of the device. If the Android version is >= API level 22, it simply returns the result of `paramMessage.isAsynchronous()`. If the version is between API level 16 (inclusive) and 22 (exclusive), it tries to call `paramMessage.isAsynchronous()`, but if that method does not exist, it sets `sTryIsAsynchronous` to `false` to remember not to call it again. If the Android version is < API level 16, or `Message.isAsynchronous()` has previously caused a `NoSuchMethodError`, it just returns `false`.

The `setAsynchronous(Message paramMessage, boolean paramBoolean)` method attempts to set the `Message` object as asynchronous or not, based on the passed boolean value. Similar to the `isAsynchronous()` method, it checks the Android version and behaves differently depending on the version. If the Android version is >= API level 22, it simply calls `paramMessage.setAsynchronous(paramBoolean)`. If it's between API level 16 (inclusive) and 22 (exclusive), it tries to call `paramMessage.setAsynchronous(paramBoolean)`. If that fails due to a `NoSuchMethodError`, it sets `sTrySetAsynchronous` to `false` to remember not to call it again. If the Android version is < API level 16, or the `Message.setAsynchronous()` method has previously caused a `NoSuchMethodError`, it does nothing. 

In summary, this class provides a way to use asynchronous messages consistently across different Android API levels.