Analyze the following piece of code: 

var performance = performance || {};
performance.now = (function() {
  return performance.now       ||
         performance.mozNow    ||
         performance.msNow     ||
         performance.oNow      ||
         performance.webkitNow ||
         Date.now;
})();



function Benchmark(name, doWarmup, doDeterministic, deterministicIterations, 
                   run, setup, tearDown, rmsResult, minIterations) {
  this.name = name;
  this.doWarmup = doWarmup;
  this.doDeterministic = doDeterministic;
  this.deterministicIterations = deterministicIterations;
  this.run = run;
  this.Setup = setup? setup : function() { };
  this.TearDown = tearDown? tearDown : function() { };
  this.rmsResult = rmsResult? rmsResult : null; 
  this.minIterations = minIterations? minIterations : 32;
}


function BenchmarkResult(benchmark, time, latency) {
  this.benchmark = benchmark;
  this.time = time;
  this.latency = latency;
}


BenchmarkResult.prototype.valueOf = function() {
  return this.time;
}


function BenchmarkSuite(name, reference, benchmarks) {
  this.name = name;
  this.reference = reference;
  this.benchmarks = benchmarks;
  BenchmarkSuite.suites.push(this);
}


BenchmarkSuite.suites = [];

BenchmarkSuite.version = '9';


BenchmarkSuite.config = {
  doWarmup: undefined,
  doDeterministic: undefined
};


alert = function(s) {
  throw "Alert called with argument: " + s;
};


BenchmarkSuite.ResetRNG = function() {
  Math.random = (function() {
    var seed = 49734321;
    return function() {
            seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;
      seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;
      seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;
      seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;
      seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;
      seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;
      return (seed & 0xfffffff) / 0x10000000;
    };
  })();
}


BenchmarkSuite.RunSuites = function(runner, skipBenchmarks) {
  skipBenchmarks = typeof skipBenchmarks === 'undefined'? [] : skipBenchmarks;
  var continuation = null;
  var suites = BenchmarkSuite.suites;
  var length = suites.length;
  BenchmarkSuite.scores = [];
  var index = 0;
  function RunStep() {
    while (continuation || index < length) {
      if (continuation) {
        continuation = continuation();
      } else {
        var suite = suites[index++];
        if (runner.NotifyStart) runner.NotifyStart(suite.name);
        if (skipBenchmarks.indexOf(suite.name) > -1) {
          suite.NotifySkipped(runner);
        } else {
          continuation = suite.RunStep(runner);
        }
      }
      if (continuation && typeof window!= 'undefined' && window.setTimeout) {
        window.setTimeout(RunStep, 25);
        return;
      }
    }

        if (runner.NotifyScore) {
      var score = BenchmarkSuite.GeometricMean(BenchmarkSuite.scores);
      var formatted = BenchmarkSuite.FormatScore(100 * score);
      runner.NotifyScore(formatted);
    }
  }
  RunStep();
}


BenchmarkSuite.CountBenchmarks = function() {
  var result = 0;
  var suites = BenchmarkSuite.suites;
  for (var i = 0; i < suites.length; i++) {
    result += suites[i].benchmarks.length;
  }
  return result;
}


BenchmarkSuite.GeometricMean = function(numbers) {
  var log = 0;
  for (var i = 0; i < numbers.length; i++) {
    log += Math.log(numbers[i]);
  }
  return Math.exp(log / numbers.length);
}


BenchmarkSuite.FormatScore = function(score) {
  if (score < 0.001) {
    return score.toExponential(3) +'× 10^-6';
  } else if (score < 0.01) {
    return score.toExponential(2) +'× 10^-5';
  } else if (score < 0.1) {
    return score.toExponential(1) +'× 10^-4';
  } else if (score < 1) {
    return score.toExponential(0) +'× 10^-3';
  } else if (score < 100) {
    return score.toFixed(0) +'× 10^-2';
  } else {
    return score.toFixed(1) +'× 10^-1';
  }
}


BenchmarkSuite.prototype.RunStep = function(runner) {
  if (!this.benchmarks.length) {
    return this.NotifyComplete(runner);
  }
  var benchmark = this.benchmarks.shift();
  return benchmark.Run(runner, this);
}


Benchmark.prototype.Run = function(runner, suite) {
  var self = this;
  var timer = runner.CreateTimer();
  var iterations = this.minIterations;
  if (this.doWarmup) {
    iterations += this.minIterations >> 1;
  }
  if (this.doDeterministic) {
    iterations = this.deterministicIterations;
  }
  this.Setup();
  function RunIteration() {
    if (!timer.Running) {
      return;
    }
    var startTime = performance.now();
    self.run();
    var time = performance.now() - startTime;
    if (self.rmsResult) {
      var rms = self.rmsResult(time);
      if (runner.NotifyResult) {
        runner.NotifyResult(new BenchmarkResult(self, rms, time));
      }
      return;
    }
    var latency = time - timer.Mean();
    if (runner.NotifyResult) {
      runner.NotifyResult(new BenchmarkResult(self, time, latency));
    }
    if (self.doWarmup) {
      iterations -= 2;
    }
    if (iterations > 0) {
      timer.Start();
      window.setTimeout(RunIteration, timer.Delay());
    } else {
      suite.benchmarks.push(self);
      self.TearDown();
      timer.Stop();
      if (suite.benchmarks.length) {
        return suite.RunStep(runner);
      } else {
        return suite.NotifyComplete(runner);
      }
    }
  }
  timer.Start();
  window.setTimeout(RunIteration, timer.Delay());
}


Benchmark.prototype.NotifySkipped = function(runner) {
  if (runner.NotifyResult) {
    runner.NotifyResult(new BenchmarkResult(this, 0, 0));
  }
}


Benchmark.prototype.NotifyComplete = function(runner) {
  if (runner.NotifyComplete) {
    runner.NotifyComplete(this);
  }
}


Benchmark.prototype.ToString = function() {
  return this.name;
}


Benchmark. Analyze the following piece of code:  0; i < numbers.length; i++) {
    log += Math.log(numbers[i]);
  }
  return Math.pow(Math.E, log / numbers.length);
}


BenchmarkSuite.GeometricMeanTime = function(measurements) {
  var log = 0;
  for (var i = 0; i < measurements.length; i++) {
    log += Math.log(measurements[i].time);
  }
  return Math.pow(Math.E, log / measurements.length);
}


BenchmarkSuite.GeometricMeanLatency = function(measurements) {
  var log = 0;
  var hasLatencyResult = false;
  for (var i = 0; i < measurements.length; i++) {
    if (measurements[i].latency!= 0) {
      log += Math.log(measurements[i].latency);
      hasLatencyResult = true;
    }
  }
  if (hasLatencyResult) {
    return Math.pow(Math.E, log / measurements.length);
  } else {
    return 0;
  }
}


BenchmarkSuite.FormatScore = function(value) {
  if (value > 100) {
    return value.toFixed(0);
  } else {
    return value.toPrecision(3);
  }
}

BenchmarkSuite.prototype.NotifyStep = function(result) {
  this.results.push(result);
  if (this.runner.NotifyStep) this.runner.NotifyStep(result.benchmark.name);
}


BenchmarkSuite.prototype.NotifyResult = function() {
  var mean = BenchmarkSuite.GeometricMeanTime(this.results);
  var score = this.reference[0] / mean;
  BenchmarkSuite.scores.push(score);
  if (this.runner.NotifyResult) {
    var formatted = BenchmarkSuite.FormatScore(100 * score);
    this.runner.NotifyResult(this.name, formatted);
  }
  if (this.reference.length == 2) {
    var meanLatency = BenchmarkSuite.GeometricMeanLatency(this.results);
    if (meanLatency!= 0) {
      var scoreLatency = this.reference[1] / meanLatency;
      BenchmarkSuite.scores.push(scoreLatency);
      if (this.runner.NotifyResult) {
        var formattedLatency = BenchmarkSuite.FormatScore(100 * scoreLatency)
        this.runner.NotifyResult(this.name + "Latency", formattedLatency);
      }
    }
  }
}


BenchmarkSuite.prototype.NotifySkipped = function(runner) {
  BenchmarkSuite.scores.push(1);    if (runner.NotifyResult) {
    runner.NotifyResult(this.name, "Skipped");
  }
}


BenchmarkSuite.prototype.NotifyError = function(error) {
  if (this.runner.NotifyError) {
    this.runner.NotifyError(this.name, error);
  }
  if (this.runner.NotifyStep) {
    this.runner.NotifyStep(this.name);
  }
}


BenchmarkSuite.prototype.RunSingleBenchmark = function(benchmark, data) {
  var config = BenchmarkSuite.config;
  var doWarmup = config.doWarmup!== undefined 
               ? config.doWarmup 
                 : benchmark.doWarmup;
  var doDeterministic = config.doDeterministic!== undefined 
                      ? config.doDeterministic 
                        : benchmark.doDeterministic;

  function Measure(data) {
    var elapsed = 0;
    var start = new Date();
  
        for (var i = 0; (doDeterministic? 
      i<benchmark.deterministicIterations : elapsed < 1000); i++) {
      benchmark.run();
      elapsed = new Date() - start;
    }
    if (data!= null) {
      data.runs += i;
      data.elapsed += elapsed;
    }
  }

    if (!doWarmup && data == null) {
    data = { runs: 0, elapsed: 0 };
  }

  if (data == null) {
    Measure(null);
    return { runs: 0, elapsed: 0 };
  } else {
    Measure(data);
        if (data.runs < benchmark.minIterations) return data;
    var usec = (data.elapsed * 1000) / data.runs;
    var rms = (benchmark.rmsResult!= null)? benchmark.rmsResult() : 0;
    this.NotifyStep(new BenchmarkResult(benchmark, usec, rms));
    return data;
  }
}


BenchmarkSuite.prototype.Run = function() {
  var config = BenchmarkSuite.config;
  var benchmarks = this.benchmarks;
  var runner = this.runner;
  var reference = this.reference;
  var results = [];
  var i;

  if (config.onRunStart) {
    config.onRunStart();
  }

  for (i = 0; i < benchmarks.length; i++) {
    var benchmark = benchmarks[i];
    if (benchmark.disabled) continue;
    var data = this.RunSingleBenchmark(benchmark, null);
    if (data.runs < benchmark.minIterations) {
      this.NotifySkipped(runner);
      continue;
    }
    results.push(data);
  }

  for (i = 0; i < results.length; i++) {
    var data = results[i];
    var benchmark = benchmarks[i];
    var mean = this.RunSingleBenchmark(benchmark, data);
    if (mean.runs < benchmark.minIterations) {
      this.NotifySkipped(runner);
      continue;
    }
    this.NotifyResult();
  }

  if (config.onRunEnd) {
    config.onRunEnd();
  }
}


BenchmarkSuite.prototype.Add = function(benchmark) {
  this.benchmarks.push(benchmark);
}


BenchmarkSuite.prototype.AddSuite = function(suite) {
  var benchmarks = suite.benchmarks;
  for (var i = 0; i < benchmarks.length; i++) {
    this.Add(benchmarks[i]);
  }
}


BenchmarkSuite.prototype.RunSuites = function(runner) {
  this.runner = runner;
  var suites = this.suites;
  var i;

  for (i = 0; i < suites.length; i++) {
    var suite = suites[i];
    suite.Run();
  }
}


BenchmarkSuite.prototype.RunAll = function() {
  var suites = [];
  var benchmarks = [];
  var i;

  for (i in BenchmarkSuites) {
    if (!BenchmarkSuites.hasOwnProperty(i)) continue;
    var suite = BenchmarkSuites[i];
    if (suite instanceof BenchmarkSuite) {
      suites.push(suite);
    } else if (suite instanceof Array) {
      benchmarks = benchmarks.concat(suite);
    }
  }

  var suite = new BenchmarkSuite("All", suites, benchmarks);
  suite.RunSuites(this);
}


BenchmarkSuite.prototype.RunContinuously = function() {
  var self = this;
  var timer = setInterval(function() {
    self.RunAll();
  }, 1000);
}


BenchmarkSuite.prototype.RunContinuouslyAndNotify = function() {
  var self = this;
  var timer = setInterval(function() {
    self.RunAll();
    if (self.runner.NotifyResult) {
      var formatted = BenchmarkSuite.FormatScore(100 * BenchmarkSuite.scores.reduce(function(a, b) { return a + b; }, 0) / BenchmarkSuite.scores.length);
      self.runner.NotifyResult("Overall", formatted);
    }
  }, 1000);
}


BenchmarkSuite.prototype.RunContinuouslyAndLogToConsole = function() {
  var self = this;
  var timer = setInterval(function() {
    self.RunAll();
    Analyze the following piece of code:  rms));
    return null;
  }
}


BenchmarkSuite.prototype.RunStep = function(runner) {
  BenchmarkSuite.ResetRNG();
  this.results = [];
  this.runner = runner;
  var length = this.benchmarks.length;
  var index = 0;
  var suite = this;
  var data;

      
  function RunNextSetup() {
    if (index < length) {
      try {
        suite.benchmarks[index].Setup();
      } catch (e) {
        suite.NotifyError(e);
        return null;
      }
      return RunNextBenchmark;
    }
    suite.NotifyResult();
    return null;
  }

  function RunNextBenchmark() {
    try {
      data = suite.RunSingleBenchmark(suite.benchmarks[index], data);
    } catch (e) {
      suite.NotifyError(e);
      return null;
    }
        return (data == null)? RunNextTearDown : RunNextBenchmark();
  }

  function RunNextTearDown() {
    try {
      suite.benchmarks[index++].TearDown();
    } catch (e) {
      suite.NotifyError(e);
      return null;
    }
    return RunNextSetup;
  }

    return RunNextSetup();
}

BenchmarkSuite.prototype.RunSingleBenchmark = function(benchmark, data) {
  var timer = new Timer();
  timer.Start();
  var result = benchmark.Run(data);
  timer.Stop();
  var time = timer.Seconds();
  this.results.push({name: benchmark.name, time: time, data: data, error: null});
  return result;
}

BenchmarkSuite.prototype.NotifyResult = function() {
  var length = this.results.length;
  for (var i = 0; i < length; i++) {
    var result = this.results[i];
    this.runner.NotifyResult(result.name, result.time, result.data, result.error);
  }
}

BenchmarkSuite.prototype.NotifyError = function(error) {
  var length = this.results.length;
  for (var i = 0; i < length; i++) {
    this.runner.NotifyError(error);
  }
}

BenchmarkSuite.prototype.Add = function(benchmark) {
  this.benchmarks.push(benchmark);
}

BenchmarkSuite.prototype.Run = function() {
  var runner = new BenchmarkRunner(this.notifyCallback);
  this.RunStep(runner);
}

BenchmarkSuite.prototype.notifyCallback = function(name, time, data, error) {
  if (window.console && console.log) {
    var str = name + ": " + time + " ms";
    if (data) str += ", " + data;
    if (error) str += ", " + error;
    console.log(str);
  }
}

BenchmarkSuite.ResetRNG = function() {
  Math.random = new Math.RandomGenerator();
}

BenchmarkSuite.Random = function(min, max) {
  return min + Math.random() * (max - min);
}

BenchmarkSuite.RandomInt = function(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}

BenchmarkSuite.RandomString = function(length) {
  var chars = "abcdefghijklmnopqrstuvwxyz0123456789";
  var result = "";
  for (var i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

BenchmarkSuite.RandomArray = function(length, min, max) {
  var result = [];
  for (var i = 0; i < length; i++) {
    result.push(Math.random() * (max - min) + min);
  }
  return result;
}

BenchmarkSuite.Sort = function(array) {
  array.sort(function(a, b) { return a - b; });
}

BenchmarkSuite.SortReverse = function(array) {
  array.sort(function(a, b) { return b - a; });
}

BenchmarkSuite.Join = function(array, separator) {
  return array.join(separator || ", ");
}

BenchmarkSuite.Reverse = function(array) {
  return array.reverse();
}

BenchmarkSuite.Map = function(array, func) {
  var result = [];
  for (var i = 0; i < array.length; i++) {
    result.push(