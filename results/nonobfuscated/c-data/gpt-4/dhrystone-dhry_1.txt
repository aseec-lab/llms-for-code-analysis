This code seems to be written in the C programming language. It is structured and modular, utilizing several functions to perform specific tasks. For clarity, I will dissect the code into function blocks and provide a brief overview of what each function does.

1. `Proc_6`:
  - This function accepts two parameters: `Enum_Val_Par` and `Enum_Ref_Par`. It sets the `Enum_Ref_Par` pointer to the value of `Enum_Val_Par`. If `Enum_Val_Par` does not equate with the value returned by `Func_3`, `Enum_Ref_Par` is set to `Ident_4`. It also manipulates `Enum_Ref_Par` based on the value of `Enum_Val_Par` within a switch-case control structure.

2. `Proc_7`:
  - `Proc_7` takes in three parameters: `Int_1_Par_Val`, `Int_2_Par_Val`, and `Int_Par_Ref`. It calculates the sum of `Int_1_Par_Val` and a constant. Then, it adds this sum to `Int_2_Par_Val` and stores the result in the memory location pointed by `Int_Par_Ref`.

3. `Proc_8`:
  - This function manipulates array elements and a globally defined integer variable `Int_Glob`, using variables and parameters which are passed to it.

4. `Func_1`:
  - It is a function that compares two parameters, `Ch_1_Par_Val` and `Ch_2_Par_Val` and returns `Ident_1` or `Ident_2`. Also, it modifies a global variable `Ch_1_Glob`.

5. `Func_2`:
  - This function takes in two string references as parameters. It implements a while loop, calling function `Func_1` and checking for certain conditions related to alphabetical characters in the strings. Depending on the conditions, it modifies a global variable `Int_Glob` and returns a boolean value.

6. `Func_3`:
  - It takes an enumerated type as a parameter and returns a boolean value based on the condition checking whether `Enum_Par_Val` is equivalent to `Ident_3` or not. 

Please note that the definition or the specifications of the enumerated types and arrays, the values of constants like `Ident_1`, `Ident_2`, `Ident_3`, `Ident_4`, etc., are missing here, which could have provided a more specific description of how these functions operate.