The code does the following:

1. It reads an integer `n` as an input. As long as `n` is not zero:

    - It reads `n` integers into array `a` and `n` integers into array `b`. 

    - It sorts both `a` and `b` using standard library function `qsort()`. The compare function is used to compare two integers. It subtracts the second integer from the first and returns the difference.

    - It uses pointers `ai`, `aj`, `bi`, `bj` to traverse both arrays from both ends simultaneously. During this process, it compares the value at `ai` and `bi` and if the value at `ai` is greater then `ai` and `bi` both decrement and `win` is incremented by one. If the value at `ai` is not greater than `bi`, it compares `aj` and `bj` and if `aj` is greater then `aj` and `bj` both increment and again `win` is incremented by one. If `aj`'s value is not greater than `bj's, it compares `aj` and `bi`, and if `aj` is less than `bi` then, `lose` is incremented by one, and `aj` increments while `bi` decrements.

    - It stores the result of `win` minus `lose` multiplied by `200` in the array `m`.

    - It reads another value for `n`.

2. It then prints out all the values in the array `m`.

The general idea seems to be some form of game simulated over multiple rounds. In each round, `n` pairs of numbers are read and sorted. Afterward, some sort of scoring logic is applied, possibly representing some match-ups or competitions between the elements of arrays `a` and `b`. The result of each round (after some transformation) is printed after all rounds are finished. However, without more context or specific comments in the code, the exact nature of what is being simulated or calculated can only be speculated about.