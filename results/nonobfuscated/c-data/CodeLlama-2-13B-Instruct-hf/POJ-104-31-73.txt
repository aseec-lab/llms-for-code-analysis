Analyze the following piece of code: 
struct student{
	char num[100];
	char name[100];
	char sex;
	int old;
	float score;
	char add[150];
	struct student *next;
};

void main()
{
	struct student *p1,*p2;
	int len=sizeof(struct student);
	p1=(struct student *)malloc(len);
	p1->next=NULL;
	scanf("%s",p1->num);
	while(strcmp(p1->num,"end")!=0){
		scanf("%s %c %d %g %s",p1->name,&p1->sex,&p1->old,&p1->score,p1->add);
		p2=p1;
		p1=(struct student *)malloc(len);
		p1->next=p2;
		scanf("%s",p1->num);
	}
	while(p1->next!=NULL){
		p1=p1->next;
		printf("%s %s %c %d %g %s\n",p1->num,p1->name,p1->sex,p1->old,p1->score,p1->add);
	}
}

Answer:

The code is a program to read a list of students' information from the keyboard, and then print the list.

The struct student is defined as a structure, which contains the following members:

num: a string to store the student's number.
name: a string to store the student's name.
sex: a character to store the student's sex.
old: an integer to store the student's age.
score: a float to store the student's score.
add: a string to store the student's address.
next: a pointer to the next student's information.

The main function first defines two pointers p1 and p2, which point to the first and second students' information.

The main function then allocates memory for the first student's information, and initializes the next pointer to NULL.

The main function then reads the first student's information from the keyboard, and stores it in the first student's information.

The main function then compares the first student's number with "end", and if they are not equal, it reads the second student's information from the keyboard, and stores it in the second student's information.

The main function then sets the next pointer of the first student to point to the second student's information, and then allocates memory for the third student's information.

The main function then reads the third student's information from the keyboard, and stores it in the third student's information.

The main function then compares the third student's number with "end", and if they are not equal, it reads the fourth student's information from the keyboard, and stores it in the fourth student's information.

The main function then sets the next pointer of the third student to point to the fourth student's information, and then allocates memory for the fifth student's information.

The main function then reads the fifth student's information from the keyboard, and stores it in the fifth student's information.

The main function then compares the fifth student's number with "end", and if they are not equal, it reads the sixth student's information from the keyboard, and stores it in the sixth student's information.

The main function then sets the next pointer of the fifth student to point to the sixth student's information, and then allocates memory for the seventh student's information.

The main function then reads the seventh student's information from the keyboard, and stores it in the seventh student's information.

The main function then compares the seventh student's number with "end", and if they are not equal, it reads the eighth student's information from the keyboard, and stores it in the eighth student's information.

The main function then sets the next pointer of the seventh student to point to the eighth student's information, and then allocates memory for the ninth student's information.

The main function then reads the ninth student's information from the keyboard, and stores it in the ninth student's information.

The main function then compares the ninth student's number with "end", and if they are not equal, it reads the tenth student's information from the keyboard, and stores it in the tenth student's information.

The main function then sets the next pointer of the ninth student to point to the