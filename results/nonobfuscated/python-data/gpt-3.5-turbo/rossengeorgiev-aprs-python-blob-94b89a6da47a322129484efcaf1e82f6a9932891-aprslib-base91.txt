This code defines two functions: `to_decimal` and `from_decimal`.

The `to_decimal` function takes in a string as input and converts it into a decimal number. It first checks if the input is a string, and raises a TypeError if it is not. It then checks if the string contains any invalid characters and raises a ValueError if it does. After removing the leading exclamation mark from the string, it calculates the decimal value by iterating through each character, subtracting 33 from its ASCII value, and multiplying it by the base (91) raised to the power of its position in the string. The decimal value is then returned.

The `from_decimal` function takes in a decimal number and an optional width parameter. It first checks if the number is an integer and raises a TypeError if it is not. It also checks if the width is an integer and raises a TypeError if it is not. It then checks if the number is negative and raises a ValueError if it is. If the number is positive, it calculates the maximum number of digits needed to represent the number in base 91. It then iterates from the maximum number of digits to 0 and calculates the quotient and remainder when dividing the number by 91 raised to the current digit. It appends the character corresponding to the quotient plus 33 to the `text` list. Finally, it joins the characters in the `text` list into a string, removes the leading exclamation mark, and right-justifies the string to the specified width (or 1 if no width is specified). The resulting string is returned.