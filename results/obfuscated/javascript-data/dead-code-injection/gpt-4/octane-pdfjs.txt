The given JavaScript code is obfuscated, but here's a breakdown of what it seems to be doing:

1. The script begins by assigning the function `a0_0x119a` to the variable `a0_0x1806d9`.

2. Inside the immediately invoked function, it performs a calculation using multiple parseInt and hexadecimal operations and checks whether the result equals `_0x376e94`. If the result does not match, it rotates the `_0x294877 array` contents. Doing so until the calculation equals `_0x376e94` or, in case of exceptions, it continues the rotation.

3. `a0_0x119a function` is redefined within itself to return elements from `_0x58c447 array`.

4. Variables for `pdf_file, canvas_logs, PdfJS` are then declared, seemingly related to PDF document processing.

5. The `setupPdfJS` function checks to ensure the compatibility of the environment for usage with Typed arrays, PDF retrieval, and storage. 

6. `runPdfJS` function appears to use PDF.js's API to render a PDF document to a canvas element, logging canvas state changes to `canvas_logs`.

7. Post rendering, `tearDownPdfJS` calculates a hash of canvas logs and compare against expected known values. If it doesn't match, log and throw an error, and finally cleans up.

This script mostly seems a part of a PDF.js benchmark test helping in performance measure during PDF rendering to a canvas, calculate the hash of so produced canvas and compare them with some expected known values. While the functions appear to be named in a generic obfusctated fashion, the named artifacts like `PdfJS` and `getDocument` imply its usage.##########