This Javascript code uses zlib compression and benchmarking techniques to check the performance of your code. Below are the key steps in this code:

1. It first declares an array called _0x5aedbc with various string values.
2. Then, it performs bitwise operations (like shifting and OR operations) on certain elements of the array to create new values.
3. These new values are continually pushed into and removed from a new array until a specific condition is met, which in this case, is when _0x63d00 equals _0x5cd4aa.
4. After this, it calls a BenchmarkSuite method with 'zlib', a random number array, and a new Benchmark object passed as arguments.
5. This suite measures the runtime of runZlib function, comparing if it equals undefined, and running tearDownZlib function in the end.
6. In the end, it deletes some global variables from the environment. These are likely variables that are only needed for this specific compression test and can be safely removed afterwards. 

Therefore, this code is essentially a testing suite for your code's performance using zlib compression, performing various bitwise operations, and logging the performance.These lines of code are part of a switch statement which continues the cleaning up from the previous code segment. In each case (which correspond to different condition values), a particular global variable is deleted in order to free up memory. This is typically done in performance-sensitive applications or in tests like this one to ensure that the testing environment is cleaned up before and after each test.

The "continue" keyword is used to skip the rest of the switch statement once the matching case block is executed. It essentially tells the program to jump to the next iteration or case in the switch statement. In this context, once a global variable is deleted, the program moves to the next case to check and delete the next variable.These lines of code continue with the switch statement from the previous code that deletes global variables after they've been used. This is done to free up memory space. Once a case is done executing, employing the 'continue' statement allows the program to move on to the next case. However, if no cases match, the 'break' keyword is used to end the switch statement.

In some cases, the code branches on the value of _0xce8b58, and deletions are performed on the variables that are selected as a result of this branching. The purpose of _0xce8b58(0x12e) or _0x22c72f[_0xce8b58(0x126)] calls is to obfuscate or encrypt the code, making reverse engineering and understanding the code more difficult for humans and machines.

Also, you will encounter some cases where variables don't appear to be string literals but rather computed values like _0x22c72f[_0xce8b58(0x12f)]. This again is likely a technique for code obfuscation.

In the end, deletion of the variables continues until it has iterated through all the cases, at which point it gets to 'break' and exits the switch statement.