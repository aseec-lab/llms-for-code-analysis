The given code is quite complex and intricate, with usage of advanced pointer manipulation, function pointers, and complex typedefs. The code incorporates extreme obfuscation, making it difficult to understand. However, here is a general overview:

1. The code includes libraries "stdio.h" for standard input/output functions and "stdlib.h" for general purpose functions. 

2. It defines compound and recursive typedef "p", which defines a complex multilevel function pointer type. 

3. It defines two structures "frst" and "scnd", each containing two pointers to structure "frst". 

4. It then defines two elementary functions "arg1" and "arg2" which return the first and the second argument respectively. 

5. It defines some more instances of "frst", a function "C" to allocate and initialize an object of type "frst", and a huge hardcoded lookup table "table".

6. In the function 'f', it performs a series of operations on pointers and the 'frst' struct objects in a very complex and roundabout manner. It involves reading character from stdin, accessing elements from the lookup table based on that character, calling a series of function pointers with various arguments, altering the objects in the process, and writing characters to stdout.

7. In the main function, it initializes the global pointer 'w' and calls the function 'f' with "arg2, arg2" as arguments and string literals "OK\n" and "\n ^ Error\n" as parameters. 

The effect of the code at runtime is rather complicated to ascertain without full context or a more detailed line-by-line analysis. But given the style, this could potentially be obfuscated code for data encryption, manipulation of input stream, or as part of a coding challenge where it's deliberately created to confuse the reader. It doesn't seem like any typical, practical-purpose code one might encounter in mainstream applications.