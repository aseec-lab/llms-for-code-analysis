This is a very minimal C program characterized by the lack of spaces and minimal use of lines. Here is the detailed functional description.

The program reads input from the standard input (stdin), such as keyboard input, or input redirected from file.

It contains two functions: `g()` and `main()`:

1. `g()` is a simple function that reads a character from the standard input and adds its ASCII value to the global variable `j`. 

2. The `main(a, b) char **b` function:
   - It reads a parameter from the command line which is accessed by `b[1]`.
   - Then it enters an indefinite loop until there are no more characters to read in the input.
   - Inside this loop, the program reads two characters using `g()`, adding their ASCII values to the variable `j`.
   - It then uses this value to index into the command line argument and outputs a character, which is a sort of transformed version of the input.
   - It also tracks the number of characters read so far using `e` and inserts a newline every 80 characters due to `e%d`.

Basically, this code seems to implement a kind of cryptic transformation/filter on input, based on the command-line argument. It would be useful if the incoming data or text needed to be condensed, transformed or encrypted in some way. However, this analysis depends on the assumption that `getchar()` and `putchar()` behave as they usually do in standard C, i.e., that they respectively read a character from stdin and write a character to stdout. If these methods have been redefined elsewhere in the program, the behavior could be different. Regardless, the code, as it stands, is hard to understand due to its unclear structure and lack of comments.