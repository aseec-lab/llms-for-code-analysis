This C program appears to read a command line string argument and conducts series of operations on the argument’s characters. It is incomplete and contains multiple syntax errors that I have corrected to deduce its functionality.

Here is the corrected version of the code:

```c
#include <stdio.h>
#include <string.h>

int main(int argc, char **argv)
{
    long arg[100]; 
    int i, j;
    int base = 10;
    int start = 0;
    int end = strlen(argv[1]);

    for (i = 0; i < end; i++)
        arg[i] = argv[1][i] - '0';

    while (end - start > 2){
                while (arg[end - 1] == 0){
			printf("%d\n", base);
			end--;
		}
                while (arg[start] == 0) start += 1;
                base += 1;

                for(i = start + 1; i < end; i++)
                    for (j = i; j > start; j--)
                        if ((arg[j] -= arg[j - 1]) < 0){
                            arg[j] += base;
                            arg[j - 1] -= 1;
                        }
            }
    return 0;
}
```
First, this program reads a string from command line argument and for each character in the argument, it calculates its integer equivalent by subtracting the ASCII value of ‘0’. The results are stored in an array called `arg`.

The program then enters a while loop that keeps iterating until the distance between `start` and `end` is less than or equal to 2. In each loop, it performs several checks and operations:

• First, it checks if the element at the index `end - 1` in the `arg` array is zero. If it is, it prints the current base (the initial base is 10) and decreases the `end` by one. This will continue until the element in `arg[end - 1]` is no longer zero.

• Second, it checks if the element at the `start` index in the `arg` array is zero. If it is, it increases `start` value by one. This will continue until the element in `arg[start]` is no longer zero.

• The `base` value is then increased by one.

• Then, it enters a nested loop starting from `start+1`to `end - 1`. It checks whether the current element minus its previous element is negative. If it is, it increases the current element by base and decreases the previous element by 1.

This process continues as long as the distance between start and end is greater than 2.

The code seems to be applying some sort of numeric transformation on the input string, possibly for some sort of compression or other data manipulation task. However, the exact purpose isn't clear without more context.

A couple points to note:

• The program assumes that the entered string consists only of digits. Input validation is not present.

• The array `arg` is of fixed size 100, and the program does not check if the input string argv[1] is of length 100 or less. This may lead to buffer overflow if larger input is provided.

Remember to understand and test the code before using it.