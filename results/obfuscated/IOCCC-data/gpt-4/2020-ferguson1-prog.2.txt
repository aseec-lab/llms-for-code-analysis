The given code is written in C language and it seems to be a very convoluted representation of a game. 

Specifically, it is mimicking the functionality of the game "Snake". The game board appears on the terminal window with the snake represented by an 'o' character that grows in length when it encounters the '*' character, which represents the food. The 'q' or 'Q' keys are used to quit the game. 

This is a single player game where the player controls the snake and tries to make it eat as much food as possible without hitting into the wall. The length of the snake grows whenever it eats the food and the game ends when the snake hits the wall. 

There are also several other features such as growing the size of the snake, avoiding the walls, shedding off part of its body, speed control etc. These features are activated based on body size, position etc. and are defined by certain character environment variables which can be set before starting.

Note that this code must be run in a terminal that has the ncurses library installed. The ncurses library allows for the creation of text-based user interfaces.The code section you've posted is a continuation of the snake game implemented in C. Note how the game's logic and key events are implemented through nested conditions, switches, and loop structures. 

Here are some key points:
1. The motion of the snake is controlled by the switch-case statement, where the cases match keys or buttons pressed from the keyboard. The Y and X represent the coordinates of the snake's position. 
    * Case 1: Y is decremented (snake moves up)
    * Case 2: Y is incremented (snake moves down)
    * Case 3: X is decremented (snake moves left)
    * Case 4: X is incremented (snake moves right)

2. There's a check to see whether the snake has moved out of bounds of the game screen. If the snake goes out of bounds, and a certain condition `*p` is met, the snake will appear on the opposite edge (this is called screen wrapping). Otherwise, the game ends with the message "OUCH!". 

3. A loop is used to check if the new position of the snake's head coincides with any other part of its body. If it does, the game ends with the message "OW!". 

4. If the snake moves onto a position with a fruit (the `*V` and `*U` coordinates), it triggers `B(1)`, presumably a function handling fruit consumption (growing the snake, increasing the score, etc.). 

5. In other cases, it calls other functions `H` and `S` passing various parameters â€” which likely handle specific game events, or update the game state.

6. "free(e)" and "free(n)" statements are freeing up some previously dynamically allocated memory, which indicates the game is over. 

It is difficult to extract more detailed information without the full context or a complete understanding of all the defined variables, functions, macros and the overall logic of the game.