This C code appears to perform a certain manipulation on command line arguments, and print out ones that satisfy specific conditions. This might be a part of system software for domain-specific applications.

Here is a detailed breakdown:

1. Check if input argument count Q is not equal to zero (in other words, if there are command line arguments).

2. If there are command line arguments, recursively call the same function, decreasing the argument count Q by one.

3. Perform a bitwise XOR operation on the first character of each command line argument by XOR-ing it with 0x80. This operation basically flips the sign bit in the first character of the command-line argument string.

4. Initialize the first character of the first command line argument to 0.

5. For each command line argument, if the first character of the argument string is positive, prints the entire argument string.

6. Print out a line of hyphens to separate results.

7. Recursively call the function again with the same argument count and arguments, repeating the above steps until there are no more arguments.

Please note, the code isn't syntactically correct as it misses the semicolons at the end of some statements, and this analysis is based on the assumption that semicolons should be placed accordingly at the end of the statements. Also, the entry point of the program is non-standard. Conventionally, the main function's signature should be "int main(int argc, char** argv)".